import { createClient } from '@supabase/supabase-js';
import axios from 'axios';
import dotenv from 'dotenv';
import OpenAIService from './openaiService.js';
import ZulMessages from './zulMessages.js';
import ZulAssistant from './zulAssistant.js';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

const WHATSAPP_API_URL = 'https://graph.facebook.com/v18.0';

/**
 * Conversa inteligente para MeuAzul√£o
 * Analisa mensagens e extrai informa√ß√µes automaticamente
 */
class SmartConversation {
  constructor() {
    this.openai = new OpenAIService();
    this.zulMessages = new ZulMessages();
    this.zulAssistant = new ZulAssistant();
    
    // Debug: ver exatamente o valor da vari√°vel
    console.log('üîç [CONSTRUCTOR] USE_ZUL_ASSISTANT raw:', JSON.stringify(process.env.USE_ZUL_ASSISTANT));
    console.log('üîç [CONSTRUCTOR] typeof:', typeof process.env.USE_ZUL_ASSISTANT);
    console.log('üîç [CONSTRUCTOR] length:', process.env.USE_ZUL_ASSISTANT?.length);
    console.log('üîç [CONSTRUCTOR] comparison result:', process.env.USE_ZUL_ASSISTANT === 'true');
    
    this.useAssistant = process.env.USE_ZUL_ASSISTANT === 'true'; // Feature flag
    console.log('üîç [CONSTRUCTOR] useAssistant final:', this.useAssistant);
  }

  /**
   * Normaliza nomes para compara√ß√£o consistente
   */
  normalizeName(name) {
    if (!name || typeof name !== 'string') return '';
    
    return name
      .toLowerCase()
      .normalize('NFD') // Decompor caracteres acentuados
      .replace(/[\u0300-\u036f]/g, '') // Remover acentos
      .trim();
  }

  /**
   * Mapeia nomes normalizados para nomes can√¥nicos
   * Para nomes futuros, mant√©m a capitaliza√ß√£o original mas normaliza
   */
  getCanonicalName(name) {
    const normalized = this.normalizeName(name);
    const nameMapping = {
      'compartilhado': 'Compartilhado',
      'compartilhada': 'Compartilhado',
      'compartilhar': 'Compartilhado'
    };
    
    // Se encontrou no mapeamento, usar o nome can√¥nico
    if (nameMapping[normalized]) {
      return nameMapping[normalized];
    }
    
    // Para nomes futuros, capitalizar primeira letra de cada palavra
    return name
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  }

  /**
   * Normaliza m√©todo de pagamento para valores can√¥nicos V2
   */
  normalizePaymentMethod(input) {
    if (!input) return 'other';
    
    const t = String(input)
      .toLowerCase()
      .normalize('NFD')
      .replace(/\p{Diacritic}/gu, '');
    
    console.log('üîç [NORMALIZE] Input:', input, '‚Üí Normalized:', t);
    
    // Cart√£o de Cr√©dito - todas as varia√ß√µes
    if (/cred/.test(t) || /cart.*cred/.test(t) || /credito/.test(t) || 
        /credito/.test(t) || /cartao.*credito/.test(t) || /cartao.*cred/.test(t) ||
        /visa/.test(t) || /mastercard/.test(t) || /amex/.test(t) ||
        /cred/.test(t) || /credit/.test(t)) {
      console.log('üîç [NORMALIZE] ‚Üí credit_card');
      return 'credit_card';
    }
    
    // Cart√£o de D√©bito - todas as varia√ß√µes
    if (/deb/.test(t) || /cart.*deb/.test(t) || /debito/.test(t) ||
        /cartao.*debito/.test(t) || /cartao.*deb/.test(t) ||
        /debit/.test(t)) {
      console.log('üîç [NORMALIZE] ‚Üí debit_card');
      return 'debit_card';
    }
    
    // PIX - todas as varia√ß√µes
    if (/pix/.test(t)) {
      console.log('üîç [NORMALIZE] ‚Üí pix');
      return 'pix';
    }
    
    // Dinheiro - todas as varia√ß√µes
    if (/(dinheiro|cash|especie|especie|notas|moedas)/.test(t)) {
      console.log('üîç [NORMALIZE] ‚Üí cash');
      return 'cash';
    }
    
    // Transfer√™ncia banc√°ria
    if (/(transferencia|ted|doc|pix|pix instantaneo)/.test(t)) {
      console.log('üîç [NORMALIZE] ‚Üí bank_transfer');
      return 'bank_transfer';
    }
    
    // Boleto
    if (/(boleto|fatura|conta)/.test(t)) {
      console.log('üîç [NORMALIZE] ‚Üí boleto');
      return 'boleto';
    }
    
    console.log('üîç [NORMALIZE] ‚Üí other (fallback)');
    return 'other';
  }

  /**
   * Heur√≠stica simples para detectar in√≠cio de nova despesa
   */
  isLikelyNewExpenseMessage(text) {
    if (!text) return false;
    const t = String(text).toLowerCase();
    
    // Padr√µes que indicam nova despesa (mais espec√≠ficos)
    const expensePatterns = [
      /(gastei|paguei|comprei|r\$)/,  // Palavras-gatilho
      /^\w+\s+\d+[\.,]?\d*\s+(cr√©dito|d√©bito|pix|dinheiro|√† vista)/,  // "Mercado 300 cr√©dito"
      /\d+[\.,]?\d*\s+(no|na|em)\s+\w+/,  // "300 no mercado", "50 na farm√°cia"
      /^\w+\s+\d+[\.,]?\d*$/,  // "Mercado 300" (sem m√©todo de pagamento)
    ];
    
    // Padr√µes que indicam resposta sobre cart√£o (N√ÉO s√£o despesas)
    const cardResponsePatterns = [
      /^\w+\s+\d+x$/,  // "latam 3x", "nubank 2x"
      /^\w+\s+(√† vista)$/,  // "latam √† vista"
      /^\w+\s+(uma|duas|tr√™s|quatro|cinco|seis|sete|oito|nove|dez|onze|doze)\s+(vezes|x)$/,  // "latam duas vezes"
    ];
    
    const hasExpensePattern = expensePatterns.some(pattern => pattern.test(t));
    const hasCardResponsePattern = cardResponsePatterns.some(pattern => pattern.test(t));
    const hasNumber = /\d+[\.,]?\d*/.test(t);
    
    // Se parece resposta sobre cart√£o, N√ÉO √© nova despesa
    if (hasCardResponsePattern) return false;
    
    return hasExpensePattern && hasNumber;
  }

  /**
   * Analisar mensagem e extrair informa√ß√µes da despesa
   */
  async analyzeExpenseMessage(text, userPhone) {
    try {
      console.log(`üß† Analisando mensagem: "${text}"`);
      
      // Buscar usu√°rio para obter categorias da organiza√ß√£o
      const user = await this.getUserByPhone(userPhone);
      const categories = user ? await this.getBudgetCategories(user.organization_id) : [];
      const categoryNames = categories.map(cat => cat.name).join(', ');
      
      const prompt = `Voc√™ √© um assistente financeiro especializado APENAS em processar despesas do MeuAzul√£o.

REGRAS R√çGIDAS:
1. Processe APENAS mensagens sobre gastos/despesas
2. Ignore completamente qualquer outro assunto
3. Seja extremamente preciso com valores monet√°rios
4. Use APENAS as categorias da organiza√ß√£o do usu√°rio
5. Retorne APENAS JSON v√°lido
6. NUNCA use "Outros" como primeira op√ß√£o - tente identificar a categoria correta

CATEGORIAS DISPON√çVEIS PARA ESTA ORGANIZA√á√ÉO:
${categoryNames}

M√âTODOS DE PAGAMENTO:
- credit_card: cart√£o de cr√©dito, cr√©dito, credito, cred, cart√£o cred
- debit_card: cart√£o de d√©bito, d√©bito, debito, deb, cart√£o deb, d√©bito autom√°tico
- pix: pix, PIX
- cash: dinheiro, cash, esp√©cie, em esp√©cie
- other: outros m√©todos n√£o listados

RESPONS√ÅVEIS: Nomes dos centros de custo da organiza√ß√£o (ou null se n√£o especificado)

EXEMPLOS:
"Gastei 50" ‚Üí {"valor": 50, "descricao": "gasto n√£o especificado", "categoria": "${categories[0]?.name || 'Outros'}", "metodo_pagamento": null, "responsavel": null, "data": "hoje", "confianca": 0.3, "precisa_confirmar": true}

"Gastei 50 no mercado" ‚Üí {"valor": 50, "descricao": "mercado", "categoria": "Alimenta√ß√£o", "metodo_pagamento": null, "responsavel": null, "data": "hoje", "confianca": 0.9, "precisa_confirmar": true}

"Paguei 30 na farm√°cia" ‚Üí {"valor": 30, "descricao": "farm√°cia", "categoria": "Sa√∫de", "metodo_pagamento": null, "responsavel": null, "data": "hoje", "confianca": 0.95, "precisa_confirmar": true}

"Gastei 25 no d√©bito na padaria" ‚Üí {"valor": 25, "descricao": "padaria", "categoria": "Alimenta√ß√£o", "metodo_pagamento": "debit_card", "responsavel": null, "data": "hoje", "confianca": 0.9, "precisa_confirmar": true}

"Paguei 40 no cart√£o de d√©bito" ‚Üí {"valor": 40, "descricao": "gasto n√£o especificado", "categoria": "Outros", "metodo_pagamento": "debit_card", "responsavel": null, "data": "hoje", "confianca": 0.8, "precisa_confirmar": true}

Se a mensagem N√ÉO for sobre despesas, retorne: {"erro": "Mensagem n√£o √© sobre despesas"}

Retorne APENAS JSON:`;

      const completion = await this.openai.client.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: prompt },
          { role: 'user', content: text }
        ],
        temperature: 0.1,
        max_tokens: 300,
        response_format: { type: 'json_object' }
      });

      const result = JSON.parse(completion.choices[0].message.content);
      
      console.log(`‚úÖ An√°lise conclu√≠da:`, result);
      return result;

    } catch (error) {
      console.error('‚ùå Erro na an√°lise:', error);
      return null;
    }
  }

  /**
   * Buscar usu√°rio por telefone
   */
  async getUserByPhone(phone) {
    try {
      const normalized = String(phone || '').replace(/^\+/, '');
      // Buscar usu√°rio primeiro
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('*')
        .in('phone', [normalized, `+${normalized}`])
        .eq('is_active', true)
        .single();

      if (userError) throw userError;
      
      // Buscar organiza√ß√£o separadamente
      const { data: organization } = await supabase
        .from('organizations')
        .select('*')
        .eq('id', user.organization_id)
        .single();

      // Buscar centros de custo separadamente
      const { data: costCenters } = await supabase
        .from('cost_centers')
        .select('*')
        .eq('organization_id', user.organization_id)
        .eq('is_active', true);

      return {
        ...user,
        organization,
        cost_centers: costCenters || []
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      return null;
    }
  }

  /**
   * Buscar centros de custo da organiza√ß√£o
   */
  async getCostCenters(organizationId) {
    try {
      const { data, error } = await supabase
        .from('cost_centers')
        .select('*')
        .eq('organization_id', organizationId)
        .eq('is_active', true)
        .order('name');

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar centros de custo:', error);
      return [];
    }
  }

  /**
   * Buscar categorias de or√ßamento
   */
  async getBudgetCategories(organizationId) {
    try {
      const { data, error } = await supabase
        .from('budget_categories')
        .select('*')
        .eq('organization_id', organizationId)
        .order('name');

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar categorias:', error);
      return [];
    }
  }

  /**
   * Enviar mensagem WhatsApp
   */
  async sendWhatsAppMessage(to, text) {
    const phoneId = process.env.PHONE_ID;
    const token = process.env.WHATSAPP_TOKEN;

    if (!phoneId || !token) {
      console.error('‚ùå Credenciais WhatsApp n√£o configuradas');
      return;
    }

    // Normalize phone format to E.164 with leading +
    const normalizedTo = String(to || '').startsWith('+') ? String(to) : `+${String(to)}`;

    const message = {
      messaging_product: 'whatsapp',
      to: normalizedTo,
      type: 'text',
      text: {
        body: text,
      },
    };

    try {
      const response = await axios.post(`${WHATSAPP_API_URL}/${phoneId}/messages`, message, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      });
      console.log(`‚úÖ Mensagem enviada para ${normalizedTo}:`, response.data);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar mensagem:`, error.message);
      if (error.response) {
        console.error('üìÑ Detalhes do erro:', error.response.data);
      }
    }
  }

  /**
   * Aplicar personalidade do ZUL nas respostas (vers√£o heur√≠stica e natural)
   */
  applyZulPersonality(assistantResponse, userName) {
    const response = (assistantResponse || '').trim();
    if (!response) {
      return '';
    }

    const firstName = userName ? userName.split(' ')[0] : '';
    const nameSuffix = firstName ? `, ${firstName}` : '';
    const pick = (options) => options[Math.floor(Math.random() * options.length)];
    const lower = response.toLowerCase();

    const composeQuestion = (questions) => {
      const openings = [
        `Entendi${nameSuffix}.`,
        `Perfeito${nameSuffix}.`,
        `√ìtimo${nameSuffix}.`,
        `Beleza${nameSuffix}.`,
        `Certo${nameSuffix}.`,
        `Tudo bem${nameSuffix}.`,
      ];
      const bridges = [
        '',
        ' Me conta: ',
        ' Me diz, ',
        ' S√≥ pra eu registrar: ',
        ' Agora me fala: ',
      ];

      const opening = pick(openings);
      const bridge = pick(bridges);
      const question = pick(questions);

      if (bridge.trim() === '') {
        return `${opening} ${question}`;
      }

      if (bridge.trim().endsWith(',')) {
        return `${opening}${bridge}${question}`;
      }

      return `${opening}${bridge}${question}`;
    };

    const decorateConfirmation = (message) => {
      if (!message) return '';

      const amountMatch = message.match(/R\$\s?([\d.,]+)/i);
      const descriptionMatch = message.match(/(?:no|na|em) ([^.,]+)/i);
      const responsibleMatch = message.match(/para ([^.,]+)/i);

      const baseVariants = [
        'Pronto! {body}',
        'Feito! {body}',
        'Anotado! {body}',
        'Registro conclu√≠do! {body}',
      ];

      if (amountMatch && descriptionMatch) {
        const amount = amountMatch[1];
        const description = descriptionMatch[1].trim();
        const responsible = responsibleMatch ? responsibleMatch[1].trim() : null;

        const base = pick(baseVariants).replace('{body}', responsible
          ? `R$ ${amount} em ${description} para ${responsible}.`
          : `R$ ${amount} em ${description}.`);
        const comment = this.getContextualComment(description);
        const extra = comment ? `\n${comment}` : '';
        
        // Adicionar follow-up amig√°vel
        const friendlyClosings = [
          'Qualquer coisa √© s√≥ me chamar.',
          'Estou por aqui se surgir outra despesa.',
          'Seguimos juntos no controle dos gastos.',
        ];
        const closing = Math.random() > 0.5 ? `\n${pick(friendlyClosings)}` : '';
        
        return `${base}${extra}${closing}`;
      }

      // fallback: apenas garantir que h√° um toque humano
      const friendlyClosings = [
        'Qualquer coisa √© s√≥ me chamar.',
        'Estou por aqui se surgir outra despesa.',
        'Seguimos juntos no controle dos gastos.',
      ];

      return `${message}\n${pick(friendlyClosings)}`;
    };

    const paymentKeywords = [/forma de pagamento/, /como (foi|voc√™) pag/, /pagamento/];
    const responsibleKeywords = [/respons[a√°]vel/, /quem pagou/, /quem foi/];
    const cardKeywords = [/cart[a√£]o/];
    const installmentKeywords = [/parcel/, /vezes/];

    if (paymentKeywords.some((regex) => regex.test(lower))) {
      return composeQuestion([
        'Como voc√™ pagou essa despesa?',
        'Qual foi a forma de pagamento?',
        'Qual forma de pagamento devo registrar?',
        'Usou qual forma de pagamento?',
      ]);
    }

    if (responsibleKeywords.some((regex) => regex.test(lower))) {
      return composeQuestion([
        'Quem ficou respons√°vel por essa compra?',
        'Quem pagou essa?',
        'Registramos no nome de quem?',
        'Foi voc√™ ou outra pessoa?',
      ]);
    }

    if (cardKeywords.some((regex) => regex.test(lower)) && lower.includes('?')) {
      return composeQuestion([
        'Qual cart√£o voc√™ usou?',
        'Em qual cart√£o devemos lan√ßar?',
        'Qual cart√£o entrou nessa?',
        'Sabe me dizer qual cart√£o foi usado?',
      ]);
    }

    if (installmentKeywords.some((regex) => regex.test(lower)) && lower.includes('?')) {
      return composeQuestion([
        'Em quantas parcelas ficou?',
        'Parcelou em quantas vezes?',
        'Quantas parcelas devo lan√ßar?',
        'Foi em quantas vezes no cart√£o?',
      ]);
    }

    if (response.startsWith('[save_expense]')) {
      const [command, ...rest] = response.split(']');
      const body = rest.join(']').trim();
      const decorated = decorateConfirmation(body);
      return `${command}] ${decorated}`.trim();
    }

    if (response.includes('Pronto!') || response.includes('Feito!') || response.includes('Salvei!') || response.includes('Anotado!')) {
      return decorateConfirmation(response);
    }

    // Como fallback, adicionar pequenas varia√ß√µes a perguntas curtas
    if (response.endsWith('?') && response.split(' ').length <= 6) {
      return composeQuestion([response.replace(/[?]/g, '').trim() + '?']);
    }

    return response;
  }

  /**
   * Obter coment√°rio contextual baseado na descri√ß√£o
   */
  getContextualComment(description) {
    const desc = description.toLowerCase();
    
    const contextualComments = {
      'farm√°cia': 'Agora voc√™s t√™m um controle mais claro dos gastos com sa√∫de.',
      'mercado': 'Assim fica mais f√°cil acompanhar os gastos com alimenta√ß√£o.',
      'gasolina': 'Boa forma de monitorar os custos de transporte.',
      'restaurante': 'Perfeito para controlar os gastos com alimenta√ß√£o fora de casa.',
      'uber': '√ìtimo para acompanhar os gastos com transporte.',
      'cinema': 'Boa forma de controlar os gastos com lazer.',
      'farmacia': 'Agora voc√™s t√™m um controle mais claro dos gastos com sa√∫de.'
    };
    
    for (const [keyword, comment] of Object.entries(contextualComments)) {
      if (desc.includes(keyword)) {
        return comment;
      }
    }
    
    return null;
  }

  /**
   * Enviar mensagem conversacional (sem bot√µes)
   */
  async sendConversationalMessage(to, text) {
    const phoneId = process.env.PHONE_ID;
    const token = process.env.WHATSAPP_TOKEN;

    if (!phoneId || !token) {
      console.error('‚ùå Credenciais WhatsApp n√£o configuradas');
      return;
    }

    const normalizedTo = String(to || '').startsWith('+') ? String(to) : `+${String(to)}`;

    const message = {
      messaging_product: 'whatsapp',
      to: normalizedTo,
      type: 'text',
      text: {
        body: text,
      },
    };

    try {
      const response = await axios.post(`${WHATSAPP_API_URL}/${phoneId}/messages`, message, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      });
      console.log(`‚úÖ Mensagem conversacional enviada para ${to}:`, response.data);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar mensagem:`, error.message);
      if (error.response) {
        console.error('üìÑ Detalhes do erro:', error.response.data);
      }
    }
  }

  /**
   * Salvar despesa no banco
   */
  async saveExpense(expenseData) {
    try {
      const { data, error } = await supabase
        .from('expenses')
        .insert(expenseData)
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao salvar despesa:', error);
      throw error;
    }
  }

  /**
   * Processar mensagem usando ZUL Assistant (novo fluxo)
   */
  async handleMessageWithAssistant(text, userPhone) {
    try {
      console.log(`ü§ñ [ASSISTANT] Processando mensagem de ${userPhone}: "${text}"`);

      // 1. Buscar usu√°rio
      const user = await this.getUserByPhone(userPhone);
      if (!user) {
        await this.sendWhatsAppMessage(userPhone, 
          this.zulMessages.userNotFound()
        );
        return;
      }

      // 2. Buscar contexto necess√°rio
      const costCenters = await this.getCostCenters(user.organization_id);
      const categories = await this.getBudgetCategories(user.organization_id);
      const { data: cards } = await supabase
        .from('cards')
        .select('name, id')
        .eq('organization_id', user.organization_id)
        .eq('is_active', true);

      // 3. Preparar contexto para o Assistant
      const context = {
        userName: user.name,
        userPhone: userPhone,
        organizationId: user.organization_id,
        userId: user.id,
        
        // Fun√ß√µes que o Assistant pode chamar
        validatePaymentMethod: async (userInput) => {
          const normalized = this.normalizePaymentMethod(userInput);
          const valid = ['credit_card', 'debit_card', 'pix', 'cash', 'bank_transfer', 'boleto', 'other'].includes(normalized);
          
          return {
            valid,
            normalized_method: normalized,
            available_methods: ['D√©bito', 'Cr√©dito', 'PIX', 'Dinheiro']
          };
        },

        validateCard: async (cardName, installments, availableCards) => {
          const card = cards?.find(c => 
            this.normalizeName(c.name) === this.normalizeName(cardName)
          );
          
          return {
            valid: !!card,
            card_id: card?.id || null,
            card_name: card?.name || null,
            available_cards: cards?.map(c => c.name) || []
          };
        },

        validateResponsible: async (responsibleName, availableResponsibles) => {
          const normalized = this.normalizeName(responsibleName);
          
          // Compartilhado √© sempre v√°lido
          if (normalized === 'compartilhado') {
            return {
              valid: true,
              responsible: 'Compartilhado',
              is_shared: true
            };
          }
          
          // Mapear "eu" para o cost center do usu√°rio atual
          if (normalized === 'eu' || normalized === 'me' || normalized === 'mim') {
            // Buscar cost center associado ao user_id do usu√°rio atual
            const userCostCenter = costCenters.find(cc => 
              cc.user_id === context.userId && cc.type === 'individual'
            );
            
            if (userCostCenter) {
              console.log(`‚úÖ [MAPEAMENTO] "Eu" mapeado para: ${userCostCenter.name} (ID: ${userCostCenter.id})`);
              return {
                valid: true,
                responsible: userCostCenter.name,
                cost_center_id: userCostCenter.id,
                is_shared: false
              };
            }
            
            // Fallback: usar o primeiro cost center individual da org
            const firstIndividual = costCenters.find(cc => cc.type === 'individual');
            if (firstIndividual) {
              console.log(`‚ö†Ô∏è [MAPEAMENTO] Cost center do usu√°rio n√£o encontrado, usando fallback: ${firstIndividual.name}`);
              return {
                valid: true,
                responsible: firstIndividual.name,
                cost_center_id: firstIndividual.id,
                is_shared: false
              };
            }
            
            console.log(`‚ùå [MAPEAMENTO] Nenhum cost center individual encontrado para o usu√°rio`);
          }
          
          // Buscar nos cost centers
          const found = costCenters.find(cc => 
            this.normalizeName(cc.name) === normalized
          );
          
          const availableNames = [
            ...costCenters.map(cc => cc.name),
            'Compartilhado'
          ];
          
          return {
            valid: !!found,
            responsible: found?.name || null,
            cost_center_id: found?.id || null,
            is_shared: false,
            available_responsibles: availableNames
          };
        },

        saveExpense: async (expenseData) => {
          try {
            console.log('üíæ [SAVE_EXPENSE] ===== IN√çCIO =====');
            console.log('üíæ [SAVE_EXPENSE] Dados recebidos:', JSON.stringify(expenseData, null, 2));
            console.log('üíæ [SAVE_EXPENSE] User ID:', user.id);
            console.log('üíæ [SAVE_EXPENSE] Organization ID:', user.organization_id);
            
            // Inferir categoria baseada na descri√ß√£o
            const inferCategory = (description) => {
              const desc = description.toLowerCase();
              
              // Mapeamento de palavras-chave para categorias
              const mapping = {
                'Transporte': ['gasolina', 'posto', 'combust√≠vel', 'uber', 'taxi', '√¥nibus', 'metr√¥', 'estacionamento'],
                'Alimenta√ß√£o': ['mercado', 'supermercado', 'restaurante', 'lanche', 'padaria', 'a√ßougue', 'feira'],
                'Sa√∫de': ['farm√°cia', 'rem√©dio', 'm√©dico', 'consulta', 'hospital', 'cl√≠nica'],
                'Lazer': ['cinema', 'show', 'teatro', 'parque', 'viagem'],
                'Moradia': ['aluguel', 'condom√≠nio', '√°gua', 'luz', 'g√°s', 'internet']
              };
              
              for (const [categoryName, keywords] of Object.entries(mapping)) {
                if (keywords.some(keyword => desc.includes(keyword))) {
                  return categories.find(c => c.name === categoryName);
                }
              }
              
              return null;
            };
            
            // Tentar encontrar categoria exata ou inferir
            let category = categories.find(c => 
              c.name.toLowerCase() === (expenseData.category || '').toLowerCase()
            );
            
            if (!category) {
              category = inferCategory(expenseData.description);
            }

            // Fallback seguro: usar categoria padr√£o da organiza√ß√£o ("Outros"/"Geral")
            if (!category) {
              const defaultCategory = categories.find(c => {
                const n = (c.name || '').toLowerCase();
                return n === 'outros' || n === 'geral' || n === 'diversos' || n === 'outras despesas';
              });
              if (defaultCategory) {
                category = defaultCategory;
              }
            }
            
            // Verificar se √© compartilhado
            const isShared = this.normalizeName(expenseData.responsible) === 'compartilhado';
            
            // Buscar cost center se n√£o for compartilhado
            let costCenterId = null;
            if (!isShared) {
              const costCenter = costCenters.find(cc => 
                this.normalizeName(cc.name) === this.normalizeName(expenseData.responsible)
              );
              costCenterId = costCenter?.id || null;
            }
            
            // Se for cart√£o de cr√©dito e tiver parcelas, criar installments
            if (expenseData.payment_method === 'credit_card' && expenseData.installments > 1) {
              const card = cards?.find(c => 
                this.normalizeName(c.name) === this.normalizeName(expenseData.card_name)
              );
              
              if (card) {
                await this.createInstallments(
                  user,
                  {
                    valor: expenseData.amount,
                    descricao: expenseData.description,
                    categoria: expenseData.category,
                    responsavel: expenseData.responsible,
                    data: 'hoje',
                    cartao: card.name,
                    parcelas: expenseData.installments,
                    card_id: card.id
                  },
                  { id: costCenterId, name: expenseData.responsible },
                  category?.id || null
                );
                
                // ‚úÖ Limpar thread ap√≥s sucesso (nova conversa na pr√≥xima vez)
                await this.zulAssistant.clearThread(user.id, userPhone);
                console.log('üóëÔ∏è Thread limpa ap√≥s criar parcelas');
                
                return { success: true, installments: true };
              }
            }
            
            // Despesa simples (n√£o parcelada)
            console.log('üíæ [SAVE_EXPENSE] Criando expense record...');
            console.log('üíæ [SAVE_EXPENSE] Category:', category);
            console.log('üíæ [SAVE_EXPENSE] Cost Center ID:', costCenterId);
            console.log('üíæ [SAVE_EXPENSE] Is Shared:', isShared);
            
            const expenseRecord = {
              organization_id: user.organization_id,
              user_id: user.id,
              cost_center_id: costCenterId,
              split: isShared,
              amount: expenseData.amount,
              description: this.capitalizeDescription(expenseData.description),
              payment_method: expenseData.payment_method,
              category_id: category?.id || null,
              category: category?.name || null,
              owner: this.getCanonicalName(expenseData.responsible),
              date: this.parseDate('hoje'),
              status: 'confirmed',
              confirmed_at: this.getBrazilDateTime().toISOString(),
              confirmed_by: user.id,
              source: 'whatsapp',
              whatsapp_message_id: `msg_${Date.now()}`
            };
            
            console.log('üíæ [SAVE_EXPENSE] Inserindo no banco:', JSON.stringify(expenseRecord, null, 2));
            
            const { data, error } = await supabase
              .from('expenses')
              .insert(expenseRecord)
              .select()
              .single();
            
            if (error) {
              console.error('‚ùå [SAVE_EXPENSE] Erro no insert:', error);
              throw error;
            }
            
            console.log('‚úÖ [SAVE_EXPENSE] Despesa salva com sucesso! ID:', data.id);
            
            // ‚úÖ Limpar thread ap√≥s sucesso (nova conversa na pr√≥xima vez)
            await this.zulAssistant.clearThread(user.id, userPhone);
            console.log('üóëÔ∏è [SAVE_EXPENSE] Thread limpa ap√≥s salvar despesa');
            console.log('üíæ [SAVE_EXPENSE] ===== FIM =====');
            
            return { success: true, expense_id: data.id };
            
          } catch (error) {
            console.error('‚ùå [SAVE_EXPENSE] ERRO CR√çTICO:', error);
            console.error('‚ùå [SAVE_EXPENSE] Stack:', error.stack);
            return { success: false, error: error.message };
          }
        }
      };

      // 4. Enviar mensagem para o Assistant
      console.log('üîÑ [ASSISTANT] Enviando para ZUL Assistant...');
      console.log('üîÑ [ASSISTANT] User ID:', user.id);
      console.log('üîÑ [ASSISTANT] Text:', text);
      console.log('üîÑ [ASSISTANT] Context keys:', Object.keys(context));
      
      const assistantResponse = await this.zulAssistant.sendMessage(user.id, text, context);
      console.log('‚úÖ [ASSISTANT] Resposta recebida do Assistant:', assistantResponse);
      
      // 5. Enviar resposta PURA do Assistant (sem camada artificial)
      console.log('üí¨ [ZUL] Resposta natural:', assistantResponse);
      await this.sendWhatsAppMessage(userPhone, assistantResponse);

    } catch (error) {
      console.error('‚ùå [ASSISTANT] Erro no processamento:', error);
      console.error('‚ùå [ASSISTANT] Stack:', error.stack);
      await this.sendWhatsAppMessage(userPhone, 
        this.zulMessages.genericError()
      );
    }
  }

  /**
   * Processar mensagem principal
   */
  async handleMessage(text, userPhone) {
    console.log(`üîç [DEBUG] useAssistant flag: ${this.useAssistant}`);
    console.log(`üîç [DEBUG] USE_ZUL_ASSISTANT env: ${process.env.USE_ZUL_ASSISTANT}`);
    
    // Salvar debug no banco para an√°lise
    try {
      await supabase.from('conversation_state').upsert({
        user_phone: userPhone,
        state: 'debug',
        temp_data: {
          useAssistant: this.useAssistant,
          env_var: process.env.USE_ZUL_ASSISTANT,
          message: text,
          timestamp: new Date().toISOString()
        },
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_phone'
      });
    } catch (e) {
      console.log('Erro ao salvar debug:', e.message);
    }
    
    // Se USE_ZUL_ASSISTANT=true, usar o novo fluxo com Assistant
    if (this.useAssistant) {
      console.log(`ü§ñ [DEBUG] Usando ZUL Assistant para: "${text}"`);
      return await this.handleMessageWithAssistant(text, userPhone);
    }
    
    console.log(`üì± [DEBUG] Usando fluxo antigo para: "${text}"`);
    
    // Fluxo antigo (fallback)
    try {
      console.log(`üì± Processando mensagem de ${userPhone}: "${text}"`);

      // 1. Buscar usu√°rio
      console.log('üîç [DEBUG] Buscando usu√°rio para telefone:', userPhone);
      const user = await this.getUserByPhone(userPhone);
      console.log('üîç [DEBUG] Usu√°rio encontrado:', user ? 'SIM' : 'N√ÉO');
      if (!user) {
        console.log('‚ùå [DEBUG] Usu√°rio n√£o encontrado, enviando mensagem de erro');
        await this.sendWhatsAppMessage(userPhone, 
          this.zulMessages.userNotFound()
        );
        return;
      }

      // 2. Verificar se h√° uma conversa em andamento
      const ongoingConversation = await this.getOngoingConversation(userPhone);
      if (ongoingConversation) {
        // Se a mensagem parece iniciar uma nova despesa, cancelar a pendente e seguir como nova
        if (this.isLikelyNewExpenseMessage(text)) {
          await this.cancelConversation(ongoingConversation.id);
        } else {
          await this.continueConversation(user, ongoingConversation, text);
          return;
        }
      }

      // 3. Analisar nova mensagem
      const analysis = await this.analyzeExpenseMessage(text, userPhone);
      console.log('üîç [ANALYSIS] Resultado da an√°lise:', analysis);
      if (!analysis) {
        await this.sendWhatsAppMessage(userPhone, 
          this.zulMessages.didNotUnderstand()
        );
        return;
      }

      // 4. Verificar se √© uma mensagem sobre despesas
      if (analysis.erro === "Mensagem n√£o √© sobre despesas") {
        await this.sendWhatsAppMessage(userPhone, 
          this.zulMessages.notAboutExpense()
        );
        return;
      }

      // 5. Verificar se √© cart√£o de cr√©dito e precisa de cart√£o/parcelas
      const normalizedMethod = this.normalizePaymentMethod(analysis.metodo_pagamento);
      if (normalizedMethod === 'credit_card' && !analysis.cartao) {
        console.log('üîç [CARD] Detectado cart√£o de cr√©dito, perguntando sobre cart√£o e parcelas');
        await this.askForCardAndInstallments(user, analysis);
        return;
      }

      // 6. Verificar se precisa de confirma√ß√£o
      console.log('üîç [DEBUG] Verificando se precisa confirmar:', analysis.precisa_confirmar);
      if (analysis.precisa_confirmar) {
        console.log('üîç [DEBUG] Chamando handleIncompleteInfo...');
        await this.handleIncompleteInfo(user, analysis);
        console.log('‚úÖ [DEBUG] handleIncompleteInfo conclu√≠do');
      } else {
        console.log('üîç [DEBUG] Chamando handleCompleteInfo...');
        await this.handleCompleteInfo(user, analysis);
        console.log('‚úÖ [DEBUG] handleCompleteInfo conclu√≠do');
      }

    } catch (error) {
      console.error('‚ùå Erro no processamento:', error);
      await this.sendWhatsAppMessage(userPhone, 
        this.zulMessages.genericError()
      );
    }
  }

  /**
   * Buscar conversa em andamento
   */
  async getOngoingConversation(userPhone) {
    try {
      // Primeiro buscar o usu√°rio para obter o user_id
      const user = await this.getUserByPhone(userPhone);
      if (!user) return null;

      const { data, error } = await supabase
        .from('expenses')
        .select('*')
        .eq('user_id', user.id)
        .eq('status', 'pending')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (error && error.code !== 'PGRST116') throw error;
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao buscar conversa em andamento:', error);
      return null;
    }
  }

  /**
   * Continuar conversa em andamento
   */
  async continueConversation(user, ongoingConversation, userResponse) {
    try {
      console.log(`üîÑ Continuando conversa para ${user.phone}`);
      
      const conversationState = ongoingConversation.conversation_state || {};
      const missingFields = conversationState.missing_fields || [];
      
      // Verificar se est√° esperando informa√ß√µes de cart√£o
      if (ongoingConversation.conversation_state?.waiting_for === 'card_info') {
        await this.handleCardInfoResponse(user, ongoingConversation, userResponse);
        return;
      }
      
      // Verificar se est√° esperando respons√°vel (ap√≥s fornecer cart√£o)
      if (ongoingConversation.conversation_state?.waiting_for === 'responsavel') {
        await this.handleResponsavelResponse(user, ongoingConversation, userResponse);
        return;
      }
      
      if (missingFields.length === 0) {
        // Sem campos faltando, finalizar
        await this.finalizeExpense(ongoingConversation, user);
        return;
      }

      // Processar resposta do usu√°rio
      const nextField = missingFields[0];
      console.log('üîç [CONV] Processando campo:', nextField, 'Resposta:', userResponse);
      
      // VALIDA√á√ÉO: Verificar se a resposta √© v√°lida para o campo
      let isValid = true;
      let validatedValue = null;
      
      if (nextField === 'metodo_pagamento') {
        validatedValue = await this.validatePaymentMethod(userResponse);
        if (!validatedValue) {
          isValid = false;
          await this.sendWhatsAppMessage(user.phone, 
            this.zulMessages.invalidPaymentMethod(user.name)
          );
        }
      } else if (nextField === 'responsavel') {
        validatedValue = await this.validateResponsible(userResponse, user.organization_id);
        if (!validatedValue) {
          isValid = false;
          const costCenters = await this.getCostCenters(user.organization_id);
          await this.sendWhatsAppMessage(user.phone, 
            this.zulMessages.invalidResponsible(user.name, costCenters)
          );
        }
      }
      
      // Se n√£o for v√°lido, reperguntar o mesmo campo (n√£o avan√ßar)
      if (!isValid) {
        return;
      }
      
      const updatedAnalysis = await this.processUserResponse(nextField, userResponse, ongoingConversation);
      console.log('üîç [CONV] An√°lise atualizada:', updatedAnalysis);
      
      if (updatedAnalysis) {
        // Atualizar estado da conversa
        const newMissingFields = missingFields.slice(1);
        const updatedState = {
          ...conversationState,
          missing_fields: newMissingFields,
          [nextField]: updatedAnalysis[nextField]
        };

        await supabase
          .from('expenses')
          .update({ 
            conversation_state: updatedState,
            amount: updatedAnalysis.valor,
            description: updatedAnalysis.descricao,
            category: updatedAnalysis.categoria,
            payment_method: updatedAnalysis.metodo_pagamento,
            date: this.parseDate(updatedAnalysis.data)
          })
          .eq('id', ongoingConversation.id);

        // Se acabamos de receber o m√©todo de pagamento e for cr√©dito, PRIORIZE perguntar cart√£o/parcelas agora
        if (nextField === 'metodo_pagamento') {
          const normalized = this.normalizePaymentMethod(updatedAnalysis.metodo_pagamento);
          if (normalized === 'credit_card') {
            const { data: cards } = await supabase
              .from('cards')
              .select('name')
              .eq('organization_id', user.organization_id)
              .eq('is_active', true);
            const cardNames = (cards || []).map(c => c.name).join(', ');
            const message = `üí≥ Qual cart√£o e em quantas parcelas? (${cardNames})`;
            await this.sendWhatsAppMessage(user.phone, message);

            await supabase
              .from('expenses')
              .update({ 
                conversation_state: { ...updatedState, waiting_for: 'card_info' }
              })
              .eq('id', ongoingConversation.id);
            return;
          }
        }

        // Se ainda h√° campos faltando, perguntar o pr√≥ximo
        if (newMissingFields.length > 0) {
          await this.askNextQuestion(user, newMissingFields[0], {
            amount: updatedAnalysis.valor,
            description: updatedAnalysis.descricao,
            isAfterCard: false
          });
        } else {
          // Todos os campos preenchidos, verificar se precisa perguntar sobre cart√£o
          if (updatedState.metodo_pagamento === 'credit_card' && !updatedState.cartao) {
            // Perguntar sobre cart√£o e parcelas
            const { data: cards } = await supabase
              .from('cards')
              .select('name')
              .eq('organization_id', user.organization_id)
              .eq('is_active', true);
            
            const cardNames = cards.map(c => c.name).join(', ');
            const message = `üí≥ Qual cart√£o e em quantas parcelas? (${cardNames})`;
            await this.sendWhatsAppMessage(user.phone, message);
            
            // Atualizar estado para esperar resposta sobre cart√£o
            await supabase
              .from('expenses')
              .update({ 
                conversation_state: { ...updatedState, waiting_for: 'card_info' }
              })
              .eq('id', ongoingConversation.id);
          } else {
            // Finalizar despesa
            await this.finalizeExpense({
              ...ongoingConversation,
              conversation_state: updatedState
            }, user);
          }
        }
      }

    } catch (error) {
      console.error('‚ùå Erro ao continuar conversa:', error);
      await this.sendWhatsAppMessage(user.phone, 
        this.zulMessages.genericError()
      );
      await this.cancelConversation(ongoingConversation.id);
    }
  }

  /**
   * Validar m√©todo de pagamento
   */
  async validatePaymentMethod(userResponse) {
    const input = (userResponse || '').toString().trim().toLowerCase();
    const synonyms = [
      { keys: ['pix'], value: 'pix' },
      { keys: ['dinheiro', '√† vista', 'avista', 'cash', 'esp√©cie', 'especie'], value: 'cash' },
      { keys: ['debito', 'd√©bito', 'cartao de debito', 'cart√£o de d√©bito'], value: 'debit_card' },
      { keys: ['credito', 'cr√©dito', 'cartao', 'cart√£o', 'cartao de credito', 'cart√£o de cr√©dito'], value: 'credit_card' },
      { keys: ['transferencia', 'transfer√™ncia', 'ted', 'pix ted', 'doc', 'bank'], value: 'bank_transfer' },
      { keys: ['boleto'], value: 'boleto' }
    ];
    for (const map of synonyms) {
      if (map.keys.some(k => input.includes(k))) return map.value;
    }
    // fallback normalizer
    const normalized = this.normalizePaymentMethod(userResponse);
    const validMethods = ['credit_card', 'debit_card', 'pix', 'cash', 'bank_transfer', 'boleto', 'other'];
    return validMethods.includes(normalized) ? normalized : null;
  }

  /**
   * Validar respons√°vel
   */
  async validateResponsible(userResponse, organizationId) {
    const costCenters = await this.getCostCenters(organizationId);
    const normalized = this.normalizeName(userResponse);
    
    // Compartilhado √© sempre v√°lido
    if (normalized === 'compartilhado') {
      return 'Compartilhado';
    }
    
    // Buscar nos cost centers
    const found = costCenters.find(cc => this.normalizeName(cc.name) === normalized);
    return found ? found.name : null;
  }

  /**
   * Processar resposta do usu√°rio para um campo espec√≠fico
   */
  async processUserResponse(field, userResponse, ongoingConversation) {
    try {
      // Buscar categorias da organiza√ß√£o para valida√ß√£o
      const { data: expenseData } = await supabase
        .from('expenses')
        .select('organization_id')
        .eq('id', ongoingConversation.id)
        .single();

      let categories = [];
      if (expenseData) {
        categories = await this.getBudgetCategories(expenseData.organization_id);
      }
      
      const categoryNames = categories.map(cat => cat.name).join(', ');

      const prompt = `Analise a resposta do usu√°rio para completar o campo "${field}":

RESPOSTA: "${userResponse}"

CONTEXTO: ${JSON.stringify(ongoingConversation)}

CAMPOS POSS√çVEIS:
- metodo_pagamento: credit_card, debit_card, pix, cash, other
- responsavel: Nomes dos centros de custo da organiza√ß√£o
- categoria: ${categoryNames}
- descricao: texto curto e direto (padaria, farm√°cia, mercado, restaurante, etc.)

Retorne APENAS JSON com o campo atualizado:
{"${field}": "valor_identificado"}`;

      const completion = await this.openai.client.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.1,
        max_tokens: 100,
        response_format: { type: 'json_object' }
      });

      const result = JSON.parse(completion.choices[0].message.content);
      console.log('üîç [PROCESS] Resultado da IA:', result);
      
      // Combinar com an√°lise anterior
      const conversationState = ongoingConversation.conversation_state || {};
      const fullAnalysis = {
        valor: ongoingConversation.amount,
        descricao: ongoingConversation.description,
        categoria: conversationState.categoria || ongoingConversation.category,
        data: ongoingConversation.date,
        responsavel: conversationState.responsavel,
        metodo_pagamento: conversationState.metodo_pagamento,
        ...result
      };
      console.log('üîç [PROCESS] An√°lise completa:', fullAnalysis);

      return fullAnalysis;

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta:', error);
      return null;
    }
  }

  /**
   * Perguntar pr√≥xima quest√£o
   */
  async askNextQuestion(user, field, context = {}) {
    const costCenters = await this.getCostCenters(user.organization_id);
    let message = '';
    
    switch (field) {
      case 'metodo_pagamento':
        message = this.zulMessages.askPaymentMethod(
          context.amount, 
          context.description,
          user.name
        );
        break;
      case 'responsavel':
        message = this.zulMessages.askResponsible(costCenters, context.isAfterCard);
        break;
      case 'descricao':
        message = this.zulMessages.askDescription();
        break;
      case 'categoria':
        const categories = await this.getBudgetCategories(user.organization_id);
        const categoryNames = categories.map(cat => cat.name);
        message = this.zulMessages.askCategory(categoryNames);
        break;
      default:
        message = `‚ùì Por favor, forne√ßa: ${field}`;
    }

    await this.sendConversationalMessage(user.phone, message);
  }

  /**
   * Finalizar despesa
   */
  async finalizeExpense(expense, user) {
    try {
      const costCenters = await this.getCostCenters(user.organization_id);
      const responsibleName = (expense.conversation_state?.responsavel || expense.responsavel || '').toString();
      
      // Verificar se √© despesa compartilhada ANTES de buscar cost center
      const isShared = this.normalizeName(responsibleName) === 'compartilhado';
      
      // Para despesas compartilhadas, n√£o precisa de costCenter
      const costCenter = isShared 
        ? { id: null, name: 'Compartilhado' }
        : costCenters.find(cc => this.normalizeName(cc.name) === this.normalizeName(responsibleName));

      if (!costCenter) {
        await this.sendWhatsAppMessage(user.phone, 
          this.zulMessages.costCenterNotFound(responsibleName || 'indefinido')
        );
        return;
      }

      // Buscar categoria para obter o category_id
      const categories = await this.getBudgetCategories(user.organization_id);
      const categoryName = expense.conversation_state?.categoria || expense.category;
      const budgetCategory = categories.find(cat => 
        cat.name.toLowerCase() === categoryName.toLowerCase()
      );

      // Atualizar despesa como confirmada
      const expenseData = {
        organization_id: user.organization_id,
        user_id: user.id,
        cost_center_id: isShared ? null : costCenter.id,
        split: isShared,
        owner: this.getCanonicalName(responsibleName), // Mapear respons√°vel para owner normalizado
        category_id: budgetCategory?.id || null, // Mapear categoria para category_id
        status: 'confirmed',
        confirmed_at: this.getBrazilDateTime().toISOString(),
        confirmed_by: user.id,
        whatsapp_message_id: `msg_${Date.now()}`,
        source: 'whatsapp'
      };

      console.log(isShared 
        ? '‚úÖ [SPLIT] Despesa compartilhada finalizada com fallback de divis√£o (sem expense_splits)'
        : '‚úÖ Despesa individual finalizada');

      await supabase
        .from('expenses')
        .update(expenseData)
        .eq('id', expense.id);

      // Enviar confirma√ß√£o personalizada do ZUL
      const amount = expense.amount ?? expense.conversation_state?.valor;
      const description = expense.description ?? expense.conversation_state?.descricao;
      const category = expense.category ?? expense.conversation_state?.categoria;
      const paymentMethod = expense.payment_method ?? expense.conversation_state?.metodo_pagamento;
      const dateVal = expense.date ?? this.parseDate(expense.conversation_state?.data);
      const cartao = expense.conversation_state?.cartao;
      const parcelas = expense.conversation_state?.parcelas;

      const confirmationMessage = this.zulMessages.getConfirmation({
        amount,
        description,
        category,
        owner: responsibleName,
        payment_method: paymentMethod,
        date: dateVal,
        cartao,
        parcelas,
        isShared
      }, user.name, costCenters);

      await this.sendWhatsAppMessage(user.phone, confirmationMessage);

      // Limpar a conversa pendente caso ainda exista como status 'pending'
      try {
        await supabase
          .from('expenses')
          .delete()
          .eq('id', expense.id)
          .eq('status', 'pending');
      } catch (_) {}

    } catch (error) {
      console.error('‚ùå Erro ao finalizar despesa:', error);
    }
  }

  /**
   * Cancelar conversa
   */
  async cancelConversation(expenseId) {
    try {
      await supabase
        .from('expenses')
        .delete()
        .eq('id', expenseId);
    } catch (error) {
      console.error('‚ùå Erro ao cancelar conversa:', error);
    }
  }

  /**
   * Lidar com informa√ß√£o incompleta
   */
  async handleIncompleteInfo(user, analysis) {
    const costCenters = await this.getCostCenters(user.organization_id);
    const costCenterNames = costCenters.map(cc => cc.name);

    // Determinar campos faltando (ORDEM IMPORTANTE!)
    const missingFields = [];
    // Perguntar descri√ß√£o PRIMEIRO se ausente ou gen√©rica
    if (!analysis.descricao || /nao especificado|n√£o especificado/i.test(String(analysis.descricao))) {
      missingFields.push('descricao');
    }
    if (!analysis.metodo_pagamento) missingFields.push('metodo_pagamento');
    if (!analysis.responsavel) missingFields.push('responsavel');
    // Perguntar sobre categoria se confian√ßa baixa OU se for "Outros" ou similar
    if (analysis.confianca < 0.7 || !analysis.categoria || analysis.categoria === 'Outros') {
      missingFields.push('categoria');
    }

    console.log('üîç [DEBUG] Campos faltando:', missingFields);
    console.log('üîç [DEBUG] An√°lise completa:', analysis);

    if (missingFields.length > 0) {
      console.log('üîç [DEBUG] Entrando no bloco de campos faltando...');
      // Criar despesa pendente
      const expenseData = {
        organization_id: user.organization_id,
        user_id: user.id,
        amount: analysis.valor,
        description: analysis.descricao,
        category: analysis.categoria,
        date: this.parseDate(analysis.data),
        status: 'pending',
        conversation_state: {
          missing_fields: missingFields,
          metodo_pagamento: analysis.metodo_pagamento,
          responsavel: analysis.responsavel
        },
        source: 'whatsapp',
        whatsapp_message_id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` // ID √∫nico
      };

      console.log('üîç [DEBUG] Inserindo expense pendente:', expenseData);
      
      const { data: pendingExpense, error: insertError } = await supabase
        .from('expenses')
        .insert(expenseData)
        .select()
        .single();

      if (insertError) {
        console.error('‚ùå Erro ao inserir expense pendente:', insertError);
        await this.sendWhatsAppMessage(user.phone, 
          this.zulMessages.saveError()
        );
        return;
      }

      console.log('‚úÖ Expense pendente inserida:', pendingExpense);

      // Perguntar primeiro campo faltando com contexto
      await this.askNextQuestion(user, missingFields[0], {
        amount: analysis.valor,
        description: analysis.descricao,
        isAfterCard: false
      });
    } else {
      console.log('üîç [DEBUG] Nenhum campo faltando, mas precisa confirmar. Chamando handleCompleteInfo...');
      // Se n√£o h√° campos faltando mas ainda precisa confirmar, tratar como informa√ß√£o completa
      await this.handleCompleteInfo(user, analysis);
    }
  }

  /**
   * Lidar com informa√ß√£o completa
   */
  async handleCompleteInfo(user, analysis) {
    const costCenters = await this.getCostCenters(user.organization_id);
    const isShared = this.normalizeName(analysis.responsavel) === 'compartilhado';
    
    // Para despesas compartilhadas, n√£o precisa de costCenter
    const costCenter = isShared 
      ? { id: null, name: 'Compartilhado' } 
      : costCenters.find(cc => this.normalizeName(cc.name) === this.normalizeName(analysis.responsavel));

    if (!costCenter) {
      await this.sendWhatsAppMessage(user.phone, 
        this.zulMessages.costCenterNotFound(analysis.responsavel)
      );
      return;
    }

    // Encontrar categoria id por nome (se existir)
    const categories = await this.getBudgetCategories(user.organization_id);
    const categoryRow = categories.find(c => c.name.toLowerCase() === (analysis.categoria || '').toLowerCase());
    const categoryId = categoryRow?.id || null;

    // Normalizar m√©todo de pagamento
    console.log('üîç [PAYMENT] Antes da normaliza√ß√£o:', analysis.metodo_pagamento);
    const normalizedMethod = this.normalizePaymentMethod(analysis.metodo_pagamento);
    console.log('üîç [PAYMENT] Ap√≥s normaliza√ß√£o:', normalizedMethod);

    // Verificar se √© cart√£o de cr√©dito e tem informa√ß√µes de cart√£o
    if (normalizedMethod === 'credit_card' && analysis.card_id && analysis.parcelas) {
      // Criar parcelas usando fun√ß√£o do banco (capitalizando a descri√ß√£o)
      const normalizedDescription = this.capitalizeDescription(analysis.descricao);
      await this.createInstallments(user, { ...analysis, descricao: normalizedDescription }, costCenter, categoryId);
    } else {
      // Verificar se √© despesa compartilhada
      const isShared = this.normalizeName(analysis.responsavel) === 'compartilhado';

      // Salvar despesa normal (n√£o parcelada)
      const expenseData = {
        organization_id: user.organization_id,
        user_id: user.id,
        cost_center_id: isShared ? null : costCenter.id,
        split: isShared,
        amount: analysis.valor,
        description: this.capitalizeDescription(analysis.descricao),
        payment_method: normalizedMethod,
        category_id: categoryId,
        category: analysis.categoria,
        owner: this.getCanonicalName(analysis.responsavel),
        date: this.parseDate(analysis.data),
        status: 'confirmed',
        confirmed_at: this.getBrazilDateTime().toISOString(),
        confirmed_by: user.id,
        source: 'whatsapp',
        whatsapp_message_id: `msg_${Date.now()}`,
        card_id: analysis.card_id || null,
        conversation_state: {
          valor: analysis.valor,
          descricao: analysis.descricao,
          categoria: analysis.categoria,
          metodo_pagamento: analysis.metodo_pagamento,
          responsavel: analysis.responsavel,
          data: analysis.data,
          confianca: analysis.confianca,
          cartao: analysis.cartao || null,
          parcelas: analysis.parcelas || null,
          missing_fields: []
        }
      };

      const savedExpense = await this.saveExpense(expenseData);

      // Se √© compartilhada, N√ÉO criar expense_splits (usar fallback)
      // O frontend j√° saber√° calcular com base nos split_percentage dos cost_centers
      console.log(isShared 
        ? '‚úÖ [SPLIT] Despesa compartilhada criada com fallback de divis√£o (sem expense_splits)'
        : '‚úÖ Despesa individual criada');
    }

    // Enviar confirma√ß√£o personalizada do ZUL
    const confirmationMessage = this.zulMessages.getConfirmation({
      amount: analysis.valor,
      description: this.capitalizeDescription(analysis.descricao),
      category: analysis.categoria,
      owner: this.getCanonicalName(analysis.responsavel),
      payment_method: normalizedMethod,
      date: this.parseDate(analysis.data),
      cartao: analysis.cartao,
      parcelas: analysis.parcelas,
      isShared
    }, user.name, costCenters);

    await this.sendWhatsAppMessage(user.phone, confirmationMessage);
  }

  /**
   * Adicionar emoji ao nome do respons√°vel
   */
  getOwnerWithEmoji(owner) {
    const normalizedOwner = this.normalizeName(owner);
    if (normalizedOwner === 'compartilhado') return 'üë• Compartilhado';
    return `üë§ ${owner}`; // Emoji gen√©rico para qualquer centro de custo individual
  }

  /**
   * Normalizar descri√ß√£o para iniciar com mai√∫scula
   */
  capitalizeDescription(text) {
    if (!text || typeof text !== 'string') return '';
    const t = text.trim();
    if (t.length === 0) return '';
    return t.charAt(0).toUpperCase() + t.slice(1);
  }

  /**
   * Obter data/hora atual no fuso hor√°rio do Brasil
   */
  getBrazilDateTime() {
    const now = new Date();
    return new Date(now.toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
  }

  /**
   * Converter data com fuso hor√°rio do Brasil (UTC-3)
   */
  parseDate(dateStr) {
    // Obter data atual no fuso hor√°rio do Brasil
    const brazilTime = this.getBrazilDateTime();
    
    if (dateStr === 'hoje') return brazilTime;
    if (dateStr === 'ontem') {
      const yesterday = new Date(brazilTime);
      yesterday.setDate(yesterday.getDate() - 1);
      return yesterday;
    }
    
    // Tentar parsear data espec√≠fica
    const parsed = new Date(dateStr);
    return isNaN(parsed.getTime()) ? brazilTime : parsed;
  }

  /**
   * Nome do m√©todo de pagamento
   */
  getPaymentMethodName(method) {
    const names = {
      'credit_card': 'Cart√£o de Cr√©dito',
      'debit_card': 'Cart√£o de D√©bito',
      'pix': 'PIX',
      'cash': 'Dinheiro',
      'bank_transfer': 'Transfer√™ncia',
      'boleto': 'Boleto',
      'other': 'Outro'
    };
    return names[method] || method;
  }

  /**
   * Extrair nome do cart√£o e n√∫mero de parcelas do texto
   * Ex: "Nubank 3x" -> { cardName: "Nubank", installments: 3 }
   * Ex: "Ita√∫ √† vista" -> { cardName: "Ita√∫", installments: 1 }
   */
  extractCardAndInstallments(text) {
    if (!text || typeof text !== 'string') {
      return { cardName: null, installments: 1 };
    }

    const normalizedText = text.toLowerCase().trim();
    
    // Padr√µes para detectar parcelas
    const installmentPatterns = [
      /(\d+)\s*x\s*$/,  // "3x", "12x"
      /(\d+)\s*parcelas?/,  // "3 parcelas", "12 parcelas"
      /(\d+)\s*vezes/,  // "3 vezes", "duas vezes"
      /(\d+)\s*$/,  // "3", "12" (apenas n√∫mero)
      /duas?\s*vezes?/i,  // "duas vezes", "duas"
      /tr√™s?\s*vezes?/i,  // "tr√™s vezes", "tr√™s"
      /quatro?\s*vezes?/i,  // "quatro vezes", "quatro"
      /cinco?\s*vezes?/i,  // "cinco vezes", "cinco"
      /seis?\s*vezes?/i,  // "seis vezes", "seis"
      /sete?\s*vezes?/i,  // "sete vezes", "sete"
      /oito?\s*vezes?/i,  // "oito vezes", "oito"
      /nove?\s*vezes?/i,  // "nove vezes", "nove"
      /dez?\s*vezes?/i,  // "dez vezes", "dez"
      /onze?\s*vezes?/i,  // "onze vezes", "onze"
      /doze?\s*vezes?/i,  // "doze vezes", "doze"
    ];

    // Padr√µes para detectar √† vista
    const cashPatterns = [
      /√†\s*vista/i,
      /a\s*vista/i,
      /avista/i,
      /1\s*x\s*$/,
      /1\s*parcela/,
    ];

    let installments = 1;
    let cardName = text;

    // Mapeamento de palavras para n√∫meros
    const wordToNumber = {
      'duas': 2, 'dois': 2, 'duas vezes': 2, 'dois vezes': 2,
      'tr√™s': 3, 'tres': 3, 'tr√™s vezes': 3, 'tres vezes': 3,
      'quatro': 4, 'quatro vezes': 4,
      'cinco': 5, 'cinco vezes': 5,
      'seis': 6, 'seis vezes': 6,
      'sete': 7, 'sete vezes': 7,
      'oito': 8, 'oito vezes': 8,
      'nove': 9, 'nove vezes': 9,
      'dez': 10, 'dez vezes': 10,
      'onze': 11, 'onze vezes': 11,
      'doze': 12, 'doze vezes': 12
    };

    // Verificar se √© √† vista
    for (const pattern of cashPatterns) {
      if (pattern.test(normalizedText)) {
        installments = 1;
        cardName = normalizedText.replace(pattern, '').trim();
        break;
      }
    }

    // Se n√£o √© √† vista, verificar parcelas
    if (installments === 1) {
      for (const pattern of installmentPatterns) {
        const match = normalizedText.match(pattern);
        if (match) {
          if (match[1]) {
            // N√∫mero direto
            installments = parseInt(match[1]);
          } else {
            // Palavra convertida para n√∫mero
            const matchedText = match[0].trim();
            installments = wordToNumber[matchedText] || 1;
          }
          cardName = normalizedText.replace(pattern, '').trim();
          break;
        }
      }
    }

    // Limpar nome do cart√£o
    cardName = cardName.replace(/[^\w\s]/g, ' ').replace(/\s+/g, ' ').trim();
    // Remover conectores residuais ao final (ex.: "em", "no", "na", "de", "do", "da")
    cardName = cardName.replace(/\b(em|no|na|de|do|da)\b\s*$/i, '').trim();

    // Se n√£o conseguiu extrair parcelas e o cardName cont√©m n√∫meros, provavelmente √© uma despesa mal formatada
    if (installments === 1 && /\d/.test(cardName)) {
      return { cardName: null, installments: 1 };
    }

    return {
      cardName: cardName || null,
      installments: installments || 1
    };
  }

  /**
   * Buscar cart√£o pelo nome na organiza√ß√£o
   */
  async getCardByName(cardName, organizationId) {
    if (!cardName || !organizationId) return null;

    try {
      const { data, error } = await supabase
        .from('cards')
        .select('*')
        .eq('organization_id', organizationId)
        .eq('is_active', true)
        .ilike('name', `%${cardName}%`);

      if (error) {
        console.error('‚ùå Erro ao buscar cart√£o:', error);
        return null;
      }

      // Retornar o primeiro cart√£o que cont√©m o nome
      return data && data.length > 0 ? data[0] : null;
    } catch (error) {
      console.error('‚ùå Erro ao buscar cart√£o:', error);
      return null;
    }
  }

  /**
   * Perguntar sobre cart√£o e parcelas para despesas de cr√©dito
   */
  async askForCardAndInstallments(user, analysis) {
    try {
      console.log('üîç [CARD] Buscando cart√µes para organiza√ß√£o:', user.organization_id);
      
      // Buscar cart√µes dispon√≠veis na organiza√ß√£o
      const { data: cards, error } = await supabase
        .from('cards')
        .select('name')
        .eq('organization_id', user.organization_id)
        .eq('is_active', true);

      if (error) {
        console.error('‚ùå Erro ao buscar cart√µes:', error);
        await this.sendWhatsAppMessage(user.phone, 
          this.zulMessages.genericError()
        );
        return;
      }

      console.log('üîç [CARD] Cart√µes encontrados:', cards);
      const cardNames = cards.map(c => c.name);
      
      // Determinar campos faltando (exceto cart√£o que ser√° perguntado depois)
      const missingFields = [];
      if (!analysis.responsavel) missingFields.push('responsavel');
      if (!analysis.descricao || /nao especificado|n√£o especificado/i.test(String(analysis.descricao))) {
        missingFields.push('descricao');
      }
      if (analysis.confianca < 0.7 || !analysis.categoria || analysis.categoria === 'Outros') {
        missingFields.push('categoria');
      }

      // Salvar conversa pendente como despesa com status 'pending'
      const { data: pendingExpense, error: convError } = await supabase
        .from('expenses')
        .insert({
          organization_id: user.organization_id,
          user_id: user.id,
          amount: analysis.valor,
          description: analysis.descricao,
          payment_method: 'credit_card',
          category: analysis.categoria,
          owner: analysis.responsavel,
          date: this.parseDate(analysis.data),
          status: 'pending',
          source: 'whatsapp',
          conversation_state: {
            valor: analysis.valor,
            descricao: analysis.descricao,
            categoria: analysis.categoria,
            metodo_pagamento: 'credit_card',
            responsavel: analysis.responsavel,
            data: analysis.data,
            confianca: analysis.confianca,
            missing_fields: missingFields,
            waiting_for: 'card_info'
          }
        })
        .select()
        .single();

      if (convError) {
        console.error('‚ùå Erro ao salvar conversa pendente:', convError);
        await this.sendWhatsAppMessage(user.phone, 
          this.zulMessages.genericError()
        );
        return;
      }

      // SEMPRE perguntar sobre cart√£o primeiro para despesas de cr√©dito
      // Campos faltando (como respons√°vel) ser√£o perguntados ap√≥s o cart√£o
      const message = this.zulMessages.askCardAndInstallments(
        analysis.valor,
        analysis.descricao,
        cardNames
      );
      await this.sendWhatsAppMessage(user.phone, message);

    } catch (error) {
      console.error('‚ùå Erro ao perguntar sobre cart√£o:', error);
      await this.sendWhatsAppMessage(user.phone, 
        this.zulMessages.genericError()
      );
    }
  }

  /**
   * Processar resposta sobre respons√°vel (ap√≥s fornecer cart√£o)
   */
  async handleResponsavelResponse(user, conversation, userResponse) {
    try {
      console.log('üîç [RESPONSAVEL] Processando resposta sobre respons√°vel:', userResponse);
      
      // VALIDAR respons√°vel antes de processar
      const validatedResponsible = await this.validateResponsible(userResponse, user.organization_id);
      if (!validatedResponsible) {
        const costCenters = await this.getCostCenters(user.organization_id);
        await this.sendWhatsAppMessage(user.phone, 
          this.zulMessages.invalidResponsible(user.name, costCenters)
        );
        // N√£o avan√ßar - manter esperando respons√°vel v√°lido
        return;
      }
      
      const updatedState = {
        ...conversation.conversation_state,
        responsavel: validatedResponsible,
        waiting_for: null
      };

      // Atualizar expense com o respons√°vel
      await supabase
        .from('expenses')
        .update({
          conversation_state: updatedState,
          owner: this.getCanonicalName(validatedResponsible)
        })
        .eq('id', conversation.id);

      // Processar despesa completa
      const analysis = {
        valor: conversation.amount ?? updatedState.valor ?? conversation.conversation_state.valor,
        descricao: conversation.description ?? updatedState.descricao ?? conversation.conversation_state.descricao,
        categoria: conversation.category ?? updatedState.categoria ?? conversation.conversation_state.categoria,
        metodo_pagamento: 'credit_card',
        responsavel: validatedResponsible,
        data: conversation.date ?? updatedState.data ?? conversation.conversation_state.data,
        confianca: updatedState.confianca ?? conversation.conversation_state.confianca,
        cartao: updatedState.cartao,
        parcelas: updatedState.parcelas,
        card_id: updatedState.card_id ?? conversation.card_id
      };

      await this.handleCompleteInfo(user, analysis);

      // Limpar pendente ap√≥s finalizar o fluxo
      try {
        await supabase
          .from('expenses')
          .delete()
          .eq('id', conversation.id)
          .eq('status', 'pending');
      } catch (_) {}

    } catch (error) {
      console.error('‚ùå Erro ao processar respons√°vel:', error);
      await this.sendWhatsAppMessage(user.phone, 
        this.zulMessages.genericError()
      );
    }
  }

  /**
   * Processar resposta sobre cart√£o e parcelas
   */
  async handleCardInfoResponse(user, conversation, userResponse) {
    try {
      console.log('üîç [CARD] Processando resposta sobre cart√£o:', userResponse);
      
      // Verificar se √© uma nova despesa em vez de resposta sobre cart√£o
      if (this.isLikelyNewExpenseMessage(userResponse)) {
        console.log('üîç [CARD] Detectada nova despesa, cancelando conversa pendente');
        await this.cancelConversation(conversation.id);
        // Processar como nova despesa
        await this.handleMessage(userResponse, user.phone);
        return;
      }
      
      // Extrair cart√£o e parcelas da resposta
      const { cardName, installments } = this.extractCardAndInstallments(userResponse);
      console.log('üîç [CARD] Extra√≠do:', { cardName, installments });
      
      if (!cardName) {
        await this.sendWhatsAppMessage(user.phone, 
          this.zulMessages.cardInfoError()
        );
        return;
      }

      // Buscar cart√£o no banco
      console.log('üîç [CARD] Buscando cart√£o:', cardName, 'na organiza√ß√£o:', user.organization_id);
      const card = await this.getCardByName(cardName, user.organization_id);
      console.log('üîç [CARD] Cart√£o encontrado:', card);
      
      if (!card) {
        // Buscar cart√µes dispon√≠veis para sugerir
        const { data: availableCards } = await supabase
          .from('cards')
          .select('name')
          .eq('organization_id', user.organization_id)
          .eq('is_active', true);
        
        const cardNames = availableCards ? availableCards.map(c => c.name) : [];
        
        await this.sendWhatsAppMessage(user.phone, 
          this.zulMessages.invalidCard(user.name, cardNames)
        );
        // N√£o retornar - manter a conversa no mesmo estado para reperguntar
        return;
      }

      // Atualizar despesa pendente com informa√ß√µes do cart√£o
      const updatedState = {
        ...conversation.conversation_state,
        cartao: card.name,
        parcelas: installments,
        card_id: card.id,
        waiting_for: null
      };

      // Atualizar somente o estado e o card_id; manter como pending at√© finalizar todos os campos
      await supabase
        .from('expenses')
        .update({
          conversation_state: updatedState,
          card_id: card.id
        })
        .eq('id', conversation.id);

      // Se ainda falta respons√°vel (ou outros campos), perguntar agora; caso contr√°rio, finalizar
      const remainingFields = (updatedState.missing_fields || []).filter(f => f !== 'cartao' && f !== 'parcelas');
      if (!updatedState.responsavel || remainingFields.includes('responsavel')) {
        // Atualizar estado para esperar respons√°vel
        await supabase
          .from('expenses')
          .update({ 
            conversation_state: { ...updatedState, waiting_for: 'responsavel' }
          })
          .eq('id', conversation.id);
        
        await this.askNextQuestion(user, 'responsavel', { isAfterCard: true });
        return;
      }

      // Processar despesa com cart√£o e parcelas (garantindo valores do registro pendente)
      const analysis = {
        valor: conversation.amount ?? updatedState.valor ?? conversation.conversation_state.valor,
        descricao: conversation.description ?? updatedState.descricao ?? conversation.conversation_state.descricao,
        categoria: conversation.category ?? updatedState.categoria ?? conversation.conversation_state.categoria,
        metodo_pagamento: conversation.payment_method ?? updatedState.metodo_pagamento ?? conversation.conversation_state.metodo_pagamento,
        responsavel: conversation.owner ?? updatedState.responsavel ?? conversation.conversation_state.responsavel,
        data: conversation.date ?? updatedState.data ?? conversation.conversation_state.data,
        confianca: updatedState.confianca ?? conversation.conversation_state.confianca,
        cartao: card.name,
        parcelas: installments,
        card_id: card.id
      };

      await this.handleCompleteInfo(user, analysis);

      // Limpar pendente ap√≥s finalizar o fluxo
      try {
        await supabase
          .from('expenses')
          .delete()
          .eq('id', conversation.id)
          .eq('status', 'pending');
      } catch (_) {}

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta de cart√£o:', error);
      await this.sendWhatsAppMessage(user.phone, 
        this.zulMessages.genericError()
      );
    }
  }

  /**
   * Criar parcelas usando fun√ß√£o do banco
   */
  async createInstallments(user, analysis, costCenter, categoryId) {
    try {
      // Verificar se √© compartilhado
      const isShared = this.normalizeName(analysis.responsavel) === 'compartilhado';
      
      console.log('üîç [INSTALLMENTS] Criando parcelas:', {
        amount: analysis.valor,
        installments: analysis.parcelas,
        cardId: analysis.card_id,
        costCenterId: isShared ? null : costCenter.id,
        isShared: isShared,
        categoryId: categoryId,
        organizationId: user.organization_id,
        userId: user.id
      });

      // Gerar um whatsapp_message_id √∫nico para correlacionar a s√©rie
      const whatsappMessageId = `msg_${Date.now()}`;

      // Chamar fun√ß√£o do banco para criar parcelas
      const { data, error } = await supabase.rpc('create_installments', {
        p_amount: analysis.valor,
        p_installments: analysis.parcelas,
        p_description: analysis.descricao,
        p_date: this.parseDate(analysis.data).toISOString().split('T')[0],
        p_card_id: analysis.card_id,
        p_category_id: categoryId,
        p_cost_center_id: isShared ? null : costCenter.id,
        p_owner: this.getCanonicalName(analysis.responsavel),
        p_organization_id: user.organization_id,
        p_user_id: user.id,
        p_whatsapp_message_id: whatsappMessageId
      });

      if (error) {
        console.error('‚ùå Erro ao criar parcelas:', error);
        throw error;
      }

      console.log('‚úÖ [INSTALLMENTS] Parcelas criadas com sucesso:', data);

      // Confirmar imediatamente todas as parcelas (sem cron) e padronizar metadados
      try {
        const parentId = data; // fun√ß√£o retorna UUID do parent
        if (parentId) {
          const nowIso = this.getBrazilDateTime().toISOString();
          const commonUpdate = {
            status: 'confirmed',
            confirmed_at: nowIso,
            confirmed_by: user.id,
            source: 'whatsapp',
            category: analysis.categoria,
            whatsapp_message_id: whatsappMessageId,
          };
          // Filhas
          await supabase
            .from('expenses')
            .update(commonUpdate)
            .eq('parent_expense_id', parentId);
          // Pai
          await supabase
            .from('expenses')
            .update(commonUpdate)
            .eq('id', parentId);
        }
      } catch (confirmErr) {
        console.error('‚ùå Erro ao confirmar parcelas futuras:', confirmErr);
      }

    } catch (error) {
      console.error('‚ùå Erro ao criar parcelas:', error);
      throw error;
    }
  }
}

export default SmartConversation;
