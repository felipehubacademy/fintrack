import OpenAI from 'openai';
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import ZulWebChat from './zulWebChat.js';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

/**
 * ZUL - Assistente Financeiro usando GPT Assistant API
 * 
 * Personalidade: S√°bio Jovem - calmo, claro, curioso e inspirador
 * Tom: Pr√≥ximo, pessoal e respeitoso (muito brasileiro!)
 */
// Cache global para threads (persiste entre requisi√ß√µes no mesmo processo)
const threadCache = new Map(); // userId -> { threadId, lastUsed, userName, userPhone }
const THREAD_CACHE_EXPIRY = 30 * 60 * 1000; // 30 minutos (apenas para limpar cache em mem√≥ria)

class ZulAssistant {
  constructor() {
    this.assistantId = null;
    this.webChat = new ZulWebChat();
  }

  // Normaliza√ß√£o global: min√∫sculas e sem acentos
  normalizeText(str) {
    return (str || '')
      .toString()
      .trim()
      .toLowerCase()
      .normalize('NFD')
      .replace(/\p{Diacritic}+/gu, '');
  }

  // Capitalizar primeira letra da descri√ß√£o (sempre salvar com primeira letra mai√∫scula)
  capitalizeDescription(text) {
    if (!text || typeof text !== 'string') return '';
    const t = text.trim();
    if (t.length === 0) return '';
    return t.charAt(0).toUpperCase() + t.slice(1).toLowerCase();
  }

  // Extrair n√∫cleo descritivo (remove apenas verbos/artigos/preposi√ß√µes comuns)
  // Permite n√∫meros na descri√ß√£o (ex: "2 televis√µes", "5kg de carne", "TV 50 polegadas")
  // Remove apenas quando claramente √© valor monet√°rio no in√≠cio (ex: "150 mercado" -> "mercado")
  extractCoreDescription(text) {
    if (!text) return '';
    let cleaned = text.trim();
    
    // Remover n√∫meros no in√≠cio APENAS se for padr√£o "N√öMERO + palavra √∫nica" e n√∫mero >= 20
    // Isso detecta valores monet√°rios (ex: "150 mercado", "200 farm√°cia")
    // Mas mant√©m quantidades (ex: "2 televis√µes", "5kg de carne", "TV 50 polegadas")
    const match = cleaned.match(/^(\d+)\s+(.+)$/);
    if (match) {
      const number = parseInt(match[1]);
      const rest = match[2].trim();
      
      // Remover APENAS se:
      // 1. N√∫mero >= 20 (valores monet√°rios t√≠picos)
      // 2. Resto √© uma √∫nica palavra (n√£o "2 televis√µes" ou "5kg de carne")
      // 3. N√£o tem palavras relacionadas a quantidade (kg, unidade, etc)
      const quantityWords = /(kg|g|ml|l|unidade|unidades|pacote|pacotes|pe√ßa|pe√ßas|par|pares|polegada|polegadas|tv|televis)/i;
      const isSingleWord = !rest.includes(' ');
      
      if (number >= 20 && isSingleWord && !quantityWords.test(cleaned)) {
        cleaned = rest;
      }
    }
    
    const noAccent = this.normalizeText(cleaned);
    // Remover pontua√ß√£o leve
    const normalized = noAccent.replace(/[.,!?;:]/g, ' ');
    const stopwords = new Set([
      'comprei','paguei','gastei','foi','deu','peguei','compre','comprar','pagando','pagamento',
      'um','uma','uns','umas','o','a','os','as',
      'no','na','nos','nas','num','numa','em','de','do','da','dos','das','para','pra','pro','pela','pelo','por','ao','√†','aos','√†s'
    ]);
    const tokens = normalized.split(/\s+/).filter(Boolean).filter(t => !stopwords.has(t));
    if (tokens.length === 0) return cleaned.trim();
    // Retornar at√© 3 palavras significativas (mantendo n√∫meros se fizerem parte)
    return tokens.slice(0, 3).join(' ');
  }

  /**
   * Escolher varia√ß√£o aleat√≥ria de forma mais determin√≠stica e variada
   * Usa timestamp + string para criar um "seed" variado a cada chamada
   */
  pickVariation(variations, seed = null) {
    if (!variations || variations.length === 0) return '';
    if (variations.length === 1) return variations[0];
    
    // Usar timestamp + seed para criar um √≠ndice mais variado
    const timestamp = Date.now();
    const seedValue = seed ? String(seed).split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) : 0;
    const random = ((timestamp % 1000) + seedValue) % variations.length;
    
    return variations[random];
  }

  /**
   * Obter primeiro nome do usu√°rio do contexto
   */
  getFirstName(context) {
    if (!context || !context.userName) return '';
    return context.userName.split(' ')[0] || '';
  }

  /**
   * Obter o Assistant ZUL (usando ID fixo da env var)
   */
  async getOrCreateAssistant() {
    // Se j√° temos o ID em cache, retornar
    if (this.assistantId) {
      return this.assistantId;
    }

    try {
      // PRIORIDADE 1: Usar ID fixo da vari√°vel de ambiente
      if (process.env.OPENAI_ASSISTANT_ID) {
        console.log('‚úÖ Usando Assistant ID da env var:', process.env.OPENAI_ASSISTANT_ID);
        this.assistantId = process.env.OPENAI_ASSISTANT_ID;
        return this.assistantId;
      }

      console.log('‚ö†Ô∏è OPENAI_ASSISTANT_ID n√£o configurado, tentando criar/recuperar dinamicamente...');

      // Tentar recuperar assistant existente pelo nome
      const assistants = await openai.beta.assistants.list();
      const existingAssistant = assistants.data.find(a => a.name === 'ZUL - MeuAzul√£o');

      if (existingAssistant) {
        console.log('‚úÖ Assistant ZUL encontrado:', existingAssistant.id);
        this.assistantId = existingAssistant.id;
        return this.assistantId;
      }

      // Criar novo assistant
      console.log('üî® Criando novo Assistant ZUL...');
      const assistant = await openai.beta.assistants.create({
        name: 'ZUL - MeuAzul√£o',
        instructions: this.getInstructions(),
        model: 'gpt-4o-mini',
        tools: [
          {
            type: 'function',
            function: {
              name: 'validate_payment_method',
              description: 'Validar se o m√©todo de pagamento informado pelo usu√°rio √© v√°lido',
              parameters: {
                type: 'object',
                properties: {
                  user_input: {
                    type: 'string',
                    description: 'O que o usu√°rio digitou (ex: "d√©bito", "cr√©dito", "pix", "dinheiro")'
                  }
                },
                required: ['user_input']
              }
            }
          },
          {
            type: 'function',
            function: {
              name: 'validate_card',
              description: 'Validar se o cart√£o e parcelas informados s√£o v√°lidos',
              parameters: {
                type: 'object',
                properties: {
                  card_name: {
                    type: 'string',
                    description: 'Nome do cart√£o informado pelo usu√°rio'
                  },
                  installments: {
                    type: 'number',
                    description: 'N√∫mero de parcelas (1 para √† vista)'
                  },
                  available_cards: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Lista de cart√µes dispon√≠veis para o usu√°rio'
                  }
                },
                required: ['card_name', 'installments', 'available_cards']
              }
            }
          },
          {
            type: 'function',
            function: {
              name: 'validate_responsible',
              description: 'Validar se o respons√°vel informado existe',
              parameters: {
                type: 'object',
                properties: {
                  responsible_name: {
                    type: 'string',
                    description: 'Nome do respons√°vel informado pelo usu√°rio'
                  },
                  available_responsibles: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Lista de respons√°veis dispon√≠veis (cost centers + Compartilhado)'
                  }
                },
                required: ['responsible_name', 'available_responsibles']
              }
            }
          },

          {
            type: 'function',
            function: {
              name: 'save_expense',
              description: 'Salvar a despesa no banco de dados quando todas as informa√ß√µes estiverem completas e validadas',
              parameters: {
                type: 'object',
                properties: {
                  amount: {
                    type: 'number',
                    description: 'Valor da despesa em reais'
                  },
                  description: {
                    type: 'string',
                    description: 'Descri√ß√£o da despesa SEM o valor monet√°rio. Exemplos: "mercado" (n√£o "150 mercado"), "farm√°cia", "2 televis√µes", "5kg de carne". Permita n√∫meros de quantidade, mas NUNCA inclua valor monet√°rio.'
                  },
                  payment_method: {
                    type: 'string',
                    enum: ['credit_card', 'debit_card', 'pix', 'cash', 'bank_transfer', 'boleto', 'other'],
                    description: 'M√©todo de pagamento validado'
                  },
                  responsible: {
                    type: 'string',
                    description: 'Nome do respons√°vel validado'
                  },
                  card_name: {
                    type: 'string',
                    description: 'Nome do cart√£o (apenas se payment_method for credit_card)'
                  },
                  installments: {
                    type: 'number',
                    description: 'N√∫mero de parcelas (apenas se payment_method for credit_card)'
                  },
                  category: {
                    type: 'string',
                    description: 'Categoria da despesa identificada automaticamente'
                  }
                },
                required: ['amount', 'description', 'payment_method', 'responsible']
              }
            }
          }
        ]
      });

      console.log('‚úÖ Assistant ZUL criado:', assistant.id);
      this.assistantId = assistant.id;
      return this.assistantId;

    } catch (error) {
      console.error('‚ùå Erro ao criar/recuperar Assistant:', error);
      throw error;
    }
  }

  /**
   * Instru√ß√µes do Assistant ZUL
   */
  getInstructions() {
    return `Voc√™ √© o ZUL, o assistente financeiro do MeuAzul√£o. Seu objetivo prim√°rio √© registrar despesas de forma r√°pida e conversacional via WhatsApp, utilizando as ferramentas de fun√ß√£o dispon√≠veis.

PERSONALIDADE: S√°bio Jovem. Seu tom √© **calmo, claro, genuinamente prestativo e inspirador**. Fale como um amigo inteligente que ajuda a fam√≠lia a ter mais controle financeiro. Use um portugu√™s brasileiro **NATURAL e VARIADO**.

REGRAS CR√çTICAS PARA CONVERSA√á√ÉO FLU√çDA:

1.  **VARIA√á√ÉO RADICAL**: Mude o estilo de cada resposta (direto, casual, formal, contextual). NUNCA repita a mesma frase ou estrutura de pergunta.
2.  **CONCIS√ÉO M√ÅXIMA**: Responda com **1 linha** sempre que poss√≠vel. Use no m√°ximo 2 linhas em casos de confirma√ß√£o ou contexto. O WhatsApp exige rapidez.
3.  **INFER√äNCIA ATIVA**: Se o usu√°rio fornecer informa√ß√µes parciais, use o contexto para inferir e perguntar apenas pela **lacuna CR√çTICA** restante. Ex: Se ele diz "100 no mercado, d√©bito", pergunte apenas "E o respons√°vel?".
4.  **HUMANIZA√á√ÉO LEVE**: Use emojis leves (ü§î, ‚ùì, üí∞) com modera√ß√£o e apenas para humanizar a pergunta ou confirma√ß√£o. N√£o use emojis em excesso.
5.  **MANUTEN√á√ÉO DE CONTEXTO**: NUNCA repita perguntas j√° respondidas ou informa√ß√µes j√° fornecidas.
6.  **FLUXO DE VALIDA√á√ÉO**: A ordem de prioridade para coleta √©: Valor & Descri√ß√£o, Pagamento, Respons√°vel.
7.  **SALVAMENTO AUTOM√ÅTICO**: Chame a fun√ß√£o save_expense **IMEDIATAMENTE** quando tiver: valor, descri√ß√£o, pagamento, e respons√°vel.
8.  **TRATAMENTO DE DESVIO**: Se a mensagem n√£o for uma despesa (ex: sauda√ß√£o, pergunta sobre saldo), responda brevemente, mantenha a personalidade e **redirecione gentilmente** para o foco principal: "Oi, [Nome]! Tudo √≥timo por aqui. Lembre-se que meu foco √© anotar suas despesas rapidinho. Qual foi o gasto de hoje? üòâ"

FUN√á√ïES:
- validate_payment_method
- validate_card
- validate_responsible

- save_expense (chame quando tiver tudo validado)

Seja IMPREVIS√çVEL e NATURAL. Fa√ßa o usu√°rio sentir que est√° falando com um assistente humano e eficiente.`;
  }

  /**
   * Obter ou criar thread para um usu√°rio
   * MELHORADO: Sempre busca do banco primeiro, cache apenas para performance
   */
  async getOrCreateThread(userId, userPhone) {
    const now = Date.now();
    
    // 1. SEMPRE buscar do banco primeiro (robustez em cold starts)
    console.log(`üîç Buscando thread no banco para ${userId}...`);
    const savedThread = await this.loadThreadFromDB(userPhone);
    
    if (savedThread && savedThread.threadId) {
      // Validar que thread ainda existe no OpenAI
      const isValid = await this.validateThread(savedThread.threadId);
      
      if (isValid) {
        console.log(`‚úÖ Thread v√°lida recuperada do banco: ${savedThread.threadId}`);
        // Preencher cache para performance
        threadCache.set(userId, {
          threadId: savedThread.threadId,
          lastUsed: now,
          userName: savedThread.userName,
          userPhone: userPhone
        });
        return savedThread.threadId;
      } else {
        console.log(`‚ö†Ô∏è Thread inv√°lida encontrada, criando nova...`);
      }
    }

    // 2. Criar nova thread
    try {
      console.log(`üÜï Criando nova thread para ${userId}...`);
      const thread = await openai.beta.threads.create();
      
      // Salvar no cache
      threadCache.set(userId, {
        threadId: thread.id,
        lastUsed: now,
        userPhone: userPhone
      });
      
      console.log(`‚úÖ Nova thread criada: ${userId} -> ${thread.id}`);
      return thread.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar thread:', error);
      throw error;
    }
  }

  /**
   * Validar se thread ainda existe no OpenAI
   */
  async validateThread(threadId) {
    try {
      const thread = await openai.beta.threads.retrieve(threadId);
      return !!thread;
    } catch (error) {
      console.error('‚ùå Thread inv√°lida:', error.message);
      return false;
    }
  }

  /**
   * Carregar thread do banco de dados
   */
  async loadThreadFromDB(userPhone) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      const { data, error } = await supabase
        .from('conversation_state')
        .select('*')
        .eq('user_phone', normalizedPhone)
        .neq('state', 'idle')
        .single();

      if (error || !data) {
        return null;
      }

      const threadId = data.temp_data?.assistant_thread_id;
      if (!threadId) {
        return null;
      }

      console.log(`üíæ Thread recuperada do banco para ${normalizedPhone}`);
      return {
        threadId,
        userName: data.temp_data?.user_name,
        conversationData: data.temp_data
      };
    } catch (error) {
      console.error('‚ùå Erro ao carregar thread do banco:', error);
      return null;
    }
  }

  /**
   * Normalizar telefone (sempre sem +)
   */
  normalizePhone(phone) {
    if (!phone) return null;
    const cleanPhone = String(phone).replace(/\D/g, ''); // Remove n√£o-d√≠gitos
    return cleanPhone; // Sempre sem + (WhatsApp n√£o usa)
  }

  /**
   * Salvar thread no banco de dados
   */
  async saveThreadToDB(userPhone, threadId, state = 'awaiting_payment_method', extraData = {}) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      const { error } = await supabase
        .from('conversation_state')
        .upsert({
          user_phone: normalizedPhone,
          state: state,
          temp_data: {
            assistant_thread_id: threadId,
            ...extraData
          },
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'user_phone'
        });

      if (error) {
        console.error('‚ùå Erro ao salvar thread no banco:', error);
      } else {
        console.log(`üíæ Thread salva no banco: ${normalizedPhone} -> ${threadId}`);
      }
    } catch (error) {
      console.error('‚ùå Erro ao salvar thread:', error);
    }
  }

  /**
   * Limpar thread do usu√°rio (ap√≥s finalizar conversa com sucesso)
   */
  async clearThread(userId, userPhone) {
    // Limpar do cache
    if (threadCache.has(userId)) {
      console.log(`üóëÔ∏è Thread removida do cache: ${userId}`);
      threadCache.delete(userId);
    }

    // Limpar do banco (marcar como idle)
    if (userPhone) {
      try {
        const normalizedPhone = this.normalizePhone(userPhone);
        
        await supabase
          .from('conversation_state')
          .update({ 
            state: 'idle',
            temp_data: {}
          })
          .eq('user_phone', normalizedPhone);
        console.log(`üíæ Thread limpa no banco: ${normalizedPhone}`);
      } catch (error) {
        console.error('‚ùå Erro ao limpar thread do banco:', error);
      }
    }
  }

  /**
   * Enviar mensagem conversacional usando GPT-4 Chat Completion (N√ÉO Assistant API)
   */
  async sendConversationalMessage(userId, userMessage, context = {}, userPhone) {
    // Garantir que context tem saveExpense
    if (!context.saveExpense) {
      console.log('‚ö†Ô∏è Context sem saveExpense, adicionando implementa√ß√£o completa');
      context.saveExpense = async (args) => {
        console.log('üíæ [SAVE] Salvando despesa com args:', args);
        
        try {
          // Normalizar payment_method (case/acento) + sin√¥nimos
          const nm = this.normalizeText(args.payment_method);
          let paymentMethod = 'other';
          if (nm.includes('pix')) paymentMethod = 'pix';
          else if (nm.includes('dinheir') || nm.includes('cash') || nm.includes('especie')) paymentMethod = 'cash';
          else if (nm.includes('deb')) paymentMethod = 'debit_card';
          else if (nm.includes('cred')) paymentMethod = 'credit_card';
          else if (nm.includes('boleto')) paymentMethod = 'boleto';
          else if (nm.includes('transfer')) paymentMethod = 'bank_transfer';
          
          // Extrair valor
          const amount = parseFloat(args.amount);
          
          // Determinar owner (se "eu", usar nome do contexto). N√£o fazer fallback silencioso.
          let owner = args.responsible;
          let ownerNorm = this.normalizeText(owner);
          if (ownerNorm === 'eu' || ownerNorm.includes('eu')) {
            owner = context.userName || context.firstName || owner;
            // Recalcular normalizado ap√≥s mapear "eu" para o nome do usu√°rio
            ownerNorm = this.normalizeText(owner);
          }
          
          // Buscar cost_center_id se owner n√£o for "Compartilhado"  
          let costCenterId = null;
          const isShared = ownerNorm.includes('compartilhado');

          if (!isShared && owner) {
            // Matching normalizado (case/acento) com suporte a primeiro nome e desambigua√ß√£o
            const { data: centers } = await supabase
              .from('cost_centers')
              .select('id, name')
              .eq('organization_id', context.organizationId);

            if (centers && centers.length) {
              const byNorm = new Map();
              for (const c of centers) byNorm.set(this.normalizeText(c.name), c);

              // 1) Match exato normalizado
              const exact = byNorm.get(ownerNorm);
              if (exact) {
                costCenterId = exact.id;
                owner = exact.name; // padroniza capitaliza√ß√£o
              } else {
                // 2) Match parcial (substring)
                let matches = centers.filter(c => {
                  const n = this.normalizeText(c.name);
                  return n.includes(ownerNorm) || ownerNorm.includes(n);
                });

                // 3) Se usu√°rio passou apenas o primeiro nome, tentar por primeiro token
                if (!matches.length) {
                  const firstToken = ownerNorm.split(/\s+/)[0];
                  matches = centers.filter(c => {
                    const tokens = this.normalizeText(c.name).split(/\s+/);
                    return tokens[0] === firstToken; // primeiro nome igual
                  });
                }

                if (matches.length === 1) {
                  costCenterId = matches[0].id;
                  owner = matches[0].name;
                } else if (matches.length > 1) {
                  const options = matches.map(m => m.name).join(', ');
                  const firstName = this.getFirstName(context);
                  const namePart = firstName ? ` ${firstName}` : '';
                  
                  const disambiguationMessages = [
                    `Encontrei mais de um respons√°vel com esse primeiro nome${namePart}. Qual deles? ${options}`,
                    `Tem mais de um ${owner} aqui${namePart}. Qual? ${options}`,
                    `Achei v√°rios com esse nome${namePart}. Qual foi? ${options}`,
                    `Qual desses${namePart}? ${options}`,
                    `Tem mais de um com esse nome${namePart}. Qual voc√™ quer? ${options}`,
                    `Preciso que voc√™ escolha${namePart}: ${options}`,
                    `Qual desses foi${namePart}? ${options}`,
                    `Tem v√°rios com esse nome${namePart}. Qual? ${options}`
                  ];
                  return {
                    success: false,
                    message: this.pickVariation(disambiguationMessages, owner)
                  };
                }
              }
            }
          }

          // Se n√£o foi poss√≠vel determinar respons√°vel/centro, pedir explicitamente
          if (!isShared && (!owner || !costCenterId)) {
            const firstName = this.getFirstName(context);
            const namePart = firstName ? ` ${firstName}` : '';
            
            const questions = [
              `Quem pagou${namePart}?`,
              `Foi voc√™ ou algu√©m espec√≠fico${namePart}?`,
              `Me diz quem pagou${namePart}?`,
              `Quem foi o respons√°vel${namePart}?`,
              `Quem pagou essa${namePart}?`,
              `Foi voc√™${namePart}?`,
              `Me conta quem pagou${namePart}?`,
              `Quem foi${namePart}?`,
              `Preciso saber quem pagou${namePart}`,
              `Quem arcou com essa${namePart}?`
            ];
            return {
              success: false,
              message: this.pickVariation(questions, owner || 'responsavel')
            };
          }
          
          // Normalizar/limpar descri√ß√£o para salvar e inferir
          if (args.description) {
            const core = this.extractCoreDescription(args.description);
            if (core) {
              args.description = core;
            }
          }

          // Se categoria n√£o vier, tentar inferir pela descri√ß√£o (sin√¥nimos/keywords)
          if (!args.category && args.description) {
            const norm = (s) => (s || '').toString().toLowerCase();
            const d = norm(args.description);
            const catHints = [
              // Casa (supermercados, mercado livre, eletrodom√©sticos, etc)
              { keys: ['mercado', 'supermercado', 'super', 'hiper', 'atacado', 'atacarejo', 'mercadolivre', 'magalu', 'amazon', 'casas bahia', 'tokstok', 'leroy', 'decoracao', 'decora√ß√£o', 'limpeza', 'material limpeza'], target: 'Casa' },
              // Eletrodom√©sticos/Eletroport√°teis ‚Üí Casa
              { keys: ['ventilador', 'ar condicionado', 'microondas', 'micro-ondas', 'geladeira', 'freezer', 'liquidificador', 'batedeira', 'cafeteira', 'aspirador', 'ferro', 'maquina lavar', 'fogao', 'fog√£o', 'forno'], target: 'Casa' },
              // Eletr√¥nicos de uso dom√©stico ‚Üí Casa
              { keys: ['tv', 'televisao', 'televis√£o', 'som', 'home theater', 'notebook', 'tablet', 'monitor', 'mouse', 'teclado', 'computador', 'computadores', 'pc', 'desktop', 'laptop'], target: 'Casa' },
              // Alimenta√ß√£o (padarias, restaurantes, delivery, etc)
              { keys: ['padaria', 'padarias', 'restaurante', 'lanche', 'lanches', 'pizza', 'ifood', 'ubereats', 'rappi', 'sushi', 'a√ßai', 'acai', 'cafeteria', 'cafe', 'almo√ßo', 'almoco', 'jantar', 'delivery', 'pedido', 'comida', 'esfiha', 'hamburguer', 'hamb√∫rguer', 'hot dog', 'cerveja', 'cervejas', 'bebida', 'bebidas', 'refrigerante', 'suco', 'agua', '√°gua', 'coquinha', 'pepsi', 'guarana', 'vitamina', 'smoothie', 'milk shake', 'milkshake', 'sorvete', 'doces', 'doce', 'bombom', 'chocolate', 'salgado', 'salgados', 'coxinha', 'pastel', 'empada', 'torta', 'bolo', 'pao', 'p√£o', 'baguete', 'croissant', 'massa', 'macarrao', 'macarr√£o', 'arroz', 'feijao', 'feij√£o', 'carne', 'frango', 'peixe', 'verdura', 'legume', 'fruta', 'frutas', 'acougue', 'a√ßougue', 'peixaria', 'quitanda', 'hortifruti', 'frios', 'laticinios', 'latic√≠nios', 'leite', 'queijo', 'iogurte', 'manteiga', 'margarina', 'pao de acucar', 'pao de a√ß√∫car', 'atacadao', 'atacad√£o', 'extra', 'carrefour', 'walmart', 'pipoca', 'pipocas'], target: 'Alimenta√ß√£o' },
              // Transporte
              { keys: ['posto', 'gasolina', 'etanol', 'combustivel', 'combust√≠vel', 'uber', '99', 'taxi', 't√°xi', '√¥nibus', 'onibus', 'metro', 'metr√¥', 'estacionamento', 'ipva', 'rodizio', 'rod√≠zio', 'manutencao', 'manuten√ß√£o', 'lava rapido', 'lava-r√°pido', 'oficina', 'seguro carro', 'pedagio', 'ped√°gio'], target: 'Transporte' },
              // Sa√∫de
              { keys: ['farm√°cia', 'farmacia', 'rem√©dio', 'remedio', 'remedios', 'medicamento', 'medicamentos', 'm√©dico', 'medico', 'dentista', 'hospital', 'clinica', 'cl√≠nica', 'exame', 'consulta', 'laboratorio', 'laborat√≥rio', 'optica', '√≥ptica', 'oculos', '√≥culos', 'academia', 'smartfit', 'gympass', 'suplemento', 'suplementos', 'fisioterapia', 'fonoaudiologia'], target: 'Sa√∫de' },
              // Contas
              { keys: ['aluguel', 'condominio', 'condom√≠nio', 'agua', '√°gua', 'luz', 'energia', 'g√°s', 'gas', 'internet', 'net', 'vivo', 'claro', 'tim', 'oi', 'telefone', 'celular', 'conta', 'boletos', 'iptu', 'ir', 'imposto', 'taxa', 'multas', 'detran'], target: 'Contas' },
              // Educa√ß√£o
              { keys: ['curso', 'cursos', 'faculdade', 'escola', 'livro', 'livraria', 'udemy', 'curso online', 'pluralsight', 'alura', 'material escolar', 'mensalidade'], target: 'Educa√ß√£o' },
              // Lazer (bar, balada, entretenimento, etc)
              { keys: ['cinema', 'teatro', 'show', 'balada', 'bar', 'parque', 'viagem', 'hotel', 'airbnb', 'ingresso', 'ingressos', 'netflix', 'spotify', 'prime', 'disney', 'hbo', 'globoplay', 'youtube premium', 'assinatura', 'streaming'], target: 'Lazer' },
              // Beleza
              { keys: ['cabelo', 'barbearia', 'barbeiro', 'manicure', 'pedicure', 'estetica', 'est√©tica', 'cosmetico', 'cosm√©tico', 'cosmeticos', 'cosm√©ticos', 'maquiagem', 'sal√£o', 'salao'], target: 'Beleza' },
              // Vestu√°rio
              { keys: ['roupa', 'roupas', 'sapato', 'sapatos', 'tenis', 't√™nis', 'camisa', 'camiseta', 'calca', 'cal√ßa', 'vestido', 'renner', 'riachuelo', 'cea', 'c&a', 'zara', 'h&m', 'nike', 'adidas', 'puma'], target: 'Vestu√°rio' },
              // Pets
              { keys: ['petshop', 'pet shop', 'ra√ß√£o', 'racao', 'veterinario', 'veterin√°rio', 'banho tosa', 'banho e tosa', 'pet'], target: 'Pets' }
            ];
            for (const hint of catHints) {
              if (hint.keys.some(k => d.includes(k))) {
                args.category = hint.target;
                break;
              }
            }
          }

          // Buscar category_id se tiver categoria (org + globais) com normaliza√ß√£o e sin√¥nimos
          let categoryId = null;
          if (args.category) {
            const normalize = (s) => (s || '')
              .toString()
              .trim()
              .toLowerCase()
              .normalize('NFD')
              .replace(/\p{Diacritic}+/gu, '');

            const inputCategory = normalize(args.category);

            // 1) Tentativa direta case-insensitive na org
            const { data: catCI } = await supabase
              .from('budget_categories')
              .select('id, name')
              .ilike('name', args.category)
              .eq('organization_id', context.organizationId)
              .maybeSingle();

            if (catCI) {
              categoryId = catCI.id;
              // Usar nome can√¥nico (capitaliza√ß√£o correta)
              args.category = catCI.name;
            } else {
              // 2) Tentativa nas globais (case-insensitive)
              const { data: globalCatCI } = await supabase
                .from('budget_categories')
                .select('id, name')
                .ilike('name', args.category)
                .is('organization_id', null)
                .maybeSingle();

              if (globalCatCI) {
                categoryId = globalCatCI.id;
                // Usar nome can√¥nico (capitaliza√ß√£o correta)
                args.category = globalCatCI.name;
              } else {
                // 3) Carregar todas as categorias v√°lidas (org + globais) e fazer matching inteligente
                const [{ data: orgCatsAll }, { data: globalCatsAll }] = await Promise.all([
                  supabase
                    .from('budget_categories')
                    .select('id, name')
                    .eq('organization_id', context.organizationId)
                    .or('type.eq.expense,type.eq.both'),
                  supabase
                    .from('budget_categories')
                    .select('id, name')
                    .is('organization_id', null)
                    .or('type.eq.expense,type.eq.both')
                ]);

                const allCats = [...(orgCatsAll || []), ...(globalCatsAll || [])];
                const byNormalizedName = new Map();
                for (const c of allCats) {
                  byNormalizedName.set(normalize(c.name), c);
                }

                // Sin√¥nimos ‚Üí categoria can√¥nica (dicion√°rio expandido para cobertura m√°xima)
                const synonyms = [
                  // Sa√∫de
                  { keywords: ['farmacia', 'farmacia', 'remedio', 'remedios', 'remedio', 'medicamento', 'medicamentos', 'medico', 'medico', 'dentista', 'hospital', 'clinica', 'clinica', 'exame', 'consulta', 'laboratorio', 'laboratorio', 'optica', 'optica', 'oculos', 'oculos', 'academia', 'smartfit', 'gympass', 'suplemento', 'suplementos', 'fisioterapia', 'fonoaudiologia', 'psicologo', 'psic√≥logo', 'psiquiatra', 'remedio para', 'comprei remedio', 'fui na farmacia'], target: 'Sa√∫de' },
                  // Alimenta√ß√£o (expandido MUITO para cobrir todas possibilidades)
                  { keywords: ['mercado', 'supermercado', 'super', 'hiper', 'padaria', 'padarias', 'lanche', 'lanches', 'restaurante', 'pizza', 'ifood', 'ubereats', 'rappi', 'iFood', 'sushi', 'a√ßai', 'acai', 'cafeteria', 'cafe', 'almo√ßo', 'almoco', 'jantar', 'delivery', 'pedido', 'comida', 'esfiha', 'hamburguer', 'hamburguer', 'hot dog', 'mcdonalds', 'mcdonald', 'burger king', 'subway', 'dominos', 'dominos pizza', 'bobs', 'habibs', 'bebida', 'bebidas', 'refrigerante', 'suco', 'cerveja', 'cervejas', 'agua', '√°gua', 'coquinha', 'pepsi', 'guarana', 'antartica', 'antarctica', 'vitamina', 'smoothie', 'milk shake', 'milkshake', 'sorvete', 'sorvetes', 'doces', 'doce', 'bombom', 'chocolate', 'chocolates', 'salgado', 'salgados', 'coxinha', 'coxinhas', 'pastel', 'pasteis', 'empada', 'empadas', 'torta', 'tortas', 'bolo', 'bolos', 'pao', 'p√£o', 'paes', 'p√£es', 'baguete', 'baguetes', 'croissant', 'massa', 'massas', 'macarrao', 'macarr√£o', 'arroz', 'feijao', 'feij√£o', 'carne', 'carnes', 'frango', 'peixe', 'peixes', 'verdura', 'verduras', 'legume', 'legumes', 'fruta', 'frutas', 'acougue', 'a√ßougue', 'peixaria', 'quitanda', 'hortifruti', 'frios', 'laticinios', 'latic√≠nios', 'leite', 'queijo', 'queijos', 'iogurte', 'iogurtes', 'manteiga', 'margarina', 'pao de acucar', 'pao de a√ß√∫car', 'atacadao', 'atacad√£o', 'extra', 'carrefour', 'walmart', 'big', 'copacabana', 'assai', 'atacarejo', 'makro', 'savegnago', 'comper', 'prezunic', 'zona sul', 'st marche', 'emporio sao paulo', 'emporio s√£o paulo', 'pao de acucar', 'pao de a√ß√∫car', 'drogasil', 'raia', 'pague menos', 'drograria', 'farm√°cia', 'drogaria', 'balcao', 'balc√£o', 'lanchonete', 'chopperia', 'pizzaria', 'churrascaria', 'rodizio', 'rod√≠zio', 'self service', 'buffet', 'fast food', 'cafeteria', 'caf√©', 'cafe', 'confeteira', 'confeitaria', 'doceria', 'sorveteria', 'sorvete', 'taco bell', 'kfc', 'popeyes', 'outback', 'texas', 'applebees', 'chilli', 'olive garden', 'red lobster', 'buffalo wild wings', 'pipoca', 'pipocas'], target: 'Alimenta√ß√£o' },
                  // Transporte
                  { keywords: ['gasolina', 'combustivel', 'combustivel', 'posto', 'etanol', 'diesel', 'uber', '99', 'taxi', 'taxi', 'onibus', 'onibus', 'metro', 'metro', 'estacionamento', 'ipva', 'rodizio', 'rodizio', 'manutencao', 'manutencao', 'manutencao carro', 'manutencao carro', 'lava rapido', 'lava-rapido', 'oficina', 'seguro carro', 'pedagio', 'pedagio', 'mecanico', 'mec√¢nico', 'guincho', 'reboque', 'combustivel', 'abasteci', 'enchi o tanque'], target: 'Transporte' },
                  // Contas (fixas)
                  { keywords: ['aluguel', 'condominio', 'condominio', 'agua', 'agua', 'luz', 'energia', 'g√°s', 'gas', 'internet', 'net', 'vivo', 'claro', 'tim', 'oi', 'telefone', 'celular', 'conta', 'boletos', 'iptu', 'ipva', 'ir', 'imposto', 'taxa', 'multas', 'detran', 'dar', 'financiamento', 'prestacao', 'presta√ß√£o', 'cartao', 'cart√£o', 'fatura'], target: 'Contas' },
                  // Casa
                  { keywords: ['casa', 'lar', 'mercadolivre', 'magalu', 'casas bahia', 'tokstok', 'tok&stok', 'leroy', 'ferramenta', 'decoracao', 'decora√ß√£o', 'limpeza', 'material limpeza', 'ventilador', 'ar condicionado', 'microondas', 'geladeira', 'tv', 'televisao', 'notebook', 'tablet', 'computador', 'computadores', 'pc', 'desktop', 'laptop'], target: 'Casa' },
                  // Educa√ß√£o
                  { keywords: ['curso', 'cursos', 'faculdade', 'escola', 'livro', 'livraria', 'udemy', 'curso online', 'pluralsight', 'alura', 'material escolar', 'mensalidade', 'universidade', 'escola', 'faculdade', 'apostila', 'caneta', 'caderno'], target: 'Educa√ß√£o' },
                  // Lazer
                  { keywords: ['cinema', 'teatro', 'show', 'balada', 'parque', 'viagem', 'hotel', 'airbnb', 'ingresso', 'ingressos', 'netflix', 'spotify', 'prime', 'disney', 'hbo', 'globoplay', 'youtube premium', 'assinatura', 'streaming', 'festa', 'aniversario', 'anivers√°rio', 'bar', 'balada', 'clube'], target: 'Lazer' },
                  // Beleza
                  { keywords: ['cabelo', 'barbearia', 'barbeiro', 'manicure', 'pedicure', 'estetica', 'estetica', 'cosmetico', 'cosmetico', 'cosmeticos', 'cosmeticos', 'maquiagem', 'sal√£o', 'salao', 'corte', 'pintar cabelo', 'make'], target: 'Beleza' },
                  // Vestu√°rio
                  { keywords: ['roupa', 'roupas', 'sapato', 'sapatos', 'tenis', 'tenis', 'camisa', 'camiseta', 'calca', 'cal√ßa', 'vestido', 'renner', 'riachuelo', 'cea', 'c&a', 'zara', 'h&m', 'nike', 'adidas', 'puma', 'shopping', 'loja'], target: 'Vestu√°rio' },
                  // Pets
                  { keywords: ['petshop', 'pet shop', 'ra√ß√£o', 'racao', 'veterinario', 'veterinario', 'banho tosa', 'banho e tosa', 'pet', 'gato', 'cachorro', 'animal'], target: 'Pets' },
                  // Assinaturas/Streaming (j√° est√° em Lazer, mas refor√ßa)
                  { keywords: ['netflix', 'spotify', 'prime', 'disney', 'hbo', 'globoplay', 'youtube premium', 'assinatura', 'streaming', 'disney+'], target: 'Lazer' },
                  // Fitness (j√° est√° em Sa√∫de)
                  { keywords: ['academia', 'smartfit', 'gympass', 'suplemento', 'suplementos', 'treino', 'personal'], target: 'Sa√∫de' },
                  // Impostos e taxas (j√° est√° em Contas)
                  { keywords: ['iptu', 'ipva', 'ir', 'imposto', 'taxa', 'multas', 'detran', 'dar', 'licenciamento'], target: 'Contas' },
                  // Presentes/Doa√ß√µes
                  { keywords: ['presente', 'presentes', 'doacao', 'doa√ß√£o', 'vaquinha', 'aniversario', 'anivers√°rio'], target: 'Outros' }
                ];

                // 3a) Tentar sin√¥nimos pelo texto informado
                let resolvedName = null;
                for (const group of synonyms) {
                  if (group.keywords.some(k => inputCategory.includes(k))) {
                    const targetNorm = normalize(group.target);
                    if (byNormalizedName.has(targetNorm)) {
                      resolvedName = byNormalizedName.get(targetNorm).name;
                      categoryId = byNormalizedName.get(targetNorm).id;
                      break;
                    }
                  }
                }

                // 3b) Caso espec√≠fico: "farmacia" sem "Sa√∫de" dispon√≠vel ‚Üí cair para "Casa" se existir
                if (!categoryId && inputCategory.includes('farmacia')) {
                  const casa = byNormalizedName.get(normalize('Casa'));
                  if (casa) {
                    categoryId = casa.id;
                    resolvedName = casa.name;
                  }
                }

                // 3c) Matching por similaridade simples (substring) entre nomes normalizados
                if (!categoryId) {
                  const match = allCats.find(c => normalize(c.name).includes(inputCategory) || inputCategory.includes(normalize(c.name)));
                  if (match) {
                    categoryId = match.id;
                    resolvedName = match.name;
                  }
                }

                // 3d) Se ainda n√£o achou, n√£o perguntar novamente ‚Äî use "Outros" se existir
                if (!categoryId) {
                  const outros = byNormalizedName.get(normalize('Outros'))
                    || byNormalizedName.get(normalize('Outras'));
                  if (outros) {
                    categoryId = outros.id;
                    resolvedName = outros.name;
                  }
                }

                // Atualizar args.category para refletir a resolu√ß√£o, se houver
                if (categoryId && resolvedName) {
                  args.category = resolvedName;
                }

                // Se mesmo assim n√£o encontrou, manter null (sem quebrar o fluxo)
              }
            }
          }
          
          // VALIDA√á√ÉO OBRIGAT√ìRIA: categoria √© obrigat√≥ria - n√£o pode salvar sem categoria
          if (!args.category || !categoryId) {
            // Tentar usar "Outros" como fallback apenas se existir
            if (!categoryId) {
              const normalize = (s) => (s || '')
                .toString()
                .trim()
                .toLowerCase()
                .normalize('NFD')
                .replace(/\p{Diacritic}+/gu, '');
              
              const [{ data: orgCats }, { data: globalCats }] = await Promise.all([
                supabase
                  .from('budget_categories')
                  .select('id, name')
                  .eq('organization_id', context.organizationId)
                  .or('type.eq.expense,type.eq.both'),
                supabase
                  .from('budget_categories')
                  .select('id, name')
                  .is('organization_id', null)
                  .or('type.eq.expense,type.eq.both')
              ]);
              
              const allCats = [...(orgCats || []), ...(globalCats || [])];
              const byNorm = new Map();
              for (const c of allCats) {
                byNorm.set(normalize(c.name), c);
              }
              
              const outros = byNorm.get(normalize('Outros')) || byNorm.get(normalize('Outras'));
              
              if (outros) {
                categoryId = outros.id;
                args.category = outros.name;
              } else {
                // Se n√£o existe "Outros", PERGUNTAR categoria (obrigat√≥ria)
                const categoryNames = allCats.map(c => c.name).filter(Boolean);
                const firstName = this.getFirstName(context);
                const namePart = firstName ? ` ${firstName}` : '';
                
                const categoryQuestions = [
                  `Preciso saber a categoria${namePart}. Qual √©?`,
                  `Qual categoria${namePart}?`,
                  `Me diz a categoria${namePart}?`,
                  `Categoria${namePart}?`
                ];
                
                return {
                  success: false,
                  message: `${this.pickVariation(categoryQuestions, 'categoria')}${categoryNames.length > 0 ? `\n\nDispon√≠veis: ${categoryNames.slice(0, 10).join(', ')}${categoryNames.length > 10 ? '...' : ''}` : ''}`
                };
              }
            }
          }
          
          // Subfluxo de cart√£o de cr√©dito: exigir cart√£o e parcelas antes de salvar
          let cardId = null;
          if (paymentMethod === 'credit_card') {
            // Se n√£o informou o cart√£o ainda, perguntar primeiro
            if (!args.card_name || String(args.card_name).trim() === '') {
              const firstName = this.getFirstName(context);
              const namePart = firstName ? ` ${firstName}` : '';
              
              const cardQuestions = [
                `Beleza${namePart}! Qual cart√£o?`,
                `Show${namePart}! Qual foi o cart√£o?`,
                `Qual cart√£o voc√™ usou${namePart}?`,
                `Me diz qual cart√£o${namePart}?`,
                `Qual cart√£o${namePart}?`,
                `Me fala qual cart√£o${namePart}?`,
                `Preciso saber qual cart√£o${namePart}`,
                `Foi em qual cart√£o${namePart}?`,
                `Qual cart√£o voc√™ usou${namePart}?`,
                `Me conta qual cart√£o${namePart}?`
              ];
              return {
                success: false,
                message: this.pickVariation(cardQuestions, 'cartao')
              };
            }

            // Se n√£o informou parcelas, perguntar em seguida
            if (!args.installments || Number(args.installments) < 1) {
              const firstName = this.getFirstName(context);
              const namePart = firstName ? ` ${firstName}` : '';
              
              const installmentQuestions = [
                `E em quantas parcelas${namePart}?`,
                `Quantas vezes${namePart}?`,
                `Foi parcelado${namePart}? Quantas vezes?`,
                `Me diz quantas parcelas${namePart}?`,
                `Quantas parcelas foram${namePart}?`,
                `Foi √† vista ou parcelado${namePart}?`,
                `Me fala quantas vezes${namePart}?`,
                `Quantas parcelas${namePart}?`,
                `Foi parcelado em quantas vezes${namePart}?`,
                `Preciso saber quantas parcelas${namePart}`,
                `Quantas vezes voc√™ parcelou${namePart}?`,
                `Foi em quantas vezes${namePart}?`
              ];
              return {
                success: false,
                message: this.pickVariation(installmentQuestions, args.card_name || 'parcelas')
              };
            }

            const { data: cards } = await supabase
              .from('cards')
              .select('id, name')
              .eq('organization_id', context.organizationId)
              .eq('is_active', true);

            const cardNorm = this.normalizeText(args.card_name);
            let foundCard = null;
            if (cards && cards.length) {
              const byNorm = new Map();
              for (const c of cards) byNorm.set(this.normalizeText(c.name), c);
              foundCard = byNorm.get(cardNorm);
              if (!foundCard) {
                foundCard = cards.find(c => {
                  const n = this.normalizeText(c.name);
                  return n.includes(cardNorm) || cardNorm.includes(n);
                });
              }
            }

            if (foundCard) {
              cardId = foundCard.id;
              args.card_name = foundCard.name;
            } else {
              // Cart√£o n√£o encontrado - listar op√ß√µes dispon√≠veis
              const { data: allActiveCards } = await supabase
                .from('cards')
                .select('name')
                .eq('organization_id', context.organizationId)
                .eq('is_active', true);

              const cardsList = allActiveCards?.map(c => c.name).join(', ') || 'nenhum cart√£o cadastrado';
              const firstName = this.getFirstName(context);
              const namePart = firstName ? ` ${firstName}` : '';
              
              const errorMessages = [
                `N√£o encontrei esse cart√£o${namePart}. Dispon√≠veis: ${cardsList}. Qual cart√£o?`,
                `Esse cart√£o n√£o t√° cadastrado${namePart}. Tenho aqui: ${cardsList}. Qual foi?`,
                `Hmm, n√£o achei esse cart√£o${namePart}. Os dispon√≠veis s√£o: ${cardsList}. Qual voc√™ usou?`,
                `Esse cart√£o n√£o existe aqui${namePart}. Tenho: ${cardsList}. Qual foi?`,
                `N√£o reconheci esse cart√£o${namePart}. Dispon√≠veis: ${cardsList}. Qual?`,
                `N√£o achei esse cart√£o no sistema${namePart}. Os que tenho s√£o: ${cardsList}. Qual voc√™ usou?`,
                `Esse cart√£o n√£o t√° no cadastro${namePart}. Aqui tem: ${cardsList}. Qual foi?`,
                `Cart√£o n√£o encontrado${namePart}. Dispon√≠veis: ${cardsList}. Qual?`
              ];
              return {
                success: false,
                message: this.pickVariation(errorMessages, args.card_name || 'erro_cartao')
              };
            }
          }
          
          // Extrair n√∫mero de parcelas se for cr√©dito
          const installments = paymentMethod === 'credit_card' && args.installments 
            ? Number(args.installments) 
            : 1;
          
          // Se for parcelada (>1), calcular valor da parcela
          const installmentAmount = installments > 1 
            ? Math.round((amount / installments) * 100) / 100 
            : amount;
          
          // Preparar installment_info se for parcelada
          let installmentInfo = null;
          if (paymentMethod === 'credit_card' && installments > 1) {
            installmentInfo = {
              total_installments: installments,
              current_installment: 1,
              installment_amount: installmentAmount,
              total_amount: amount
            };
          }
          
          // Valida√ß√£o final: garantir que nunca salve sem categoria
          if (!args.category || !categoryId) {
            console.error('‚ùå [SAVE] Tentativa de salvar sem categoria!', { category: args.category, categoryId });
            return {
              success: false,
              message: 'Ops! Preciso saber a categoria. Qual √©?'
            };
          }
          
          const expenseData = {
            amount: installmentAmount, // Valor da parcela se parcelado, sen√£o valor total
            description: this.capitalizeDescription(args.description),
            date: new Date().toISOString().split('T')[0],
            category: args.category, // J√° validado - n√£o pode ser null
            category_id: categoryId, // J√° validado - n√£o pode ser null
            owner: owner,
            cost_center_id: costCenterId,
            payment_method: paymentMethod,
            card_id: cardId,
            organization_id: context.organizationId,
            user_id: context.userId || userId,
            status: 'confirmed',
            is_shared: isShared || false,
            confirmed_at: new Date().toISOString(),
            confirmed_by: context.userId || userId,
            source: 'whatsapp',
            whatsapp_message_id: `msg_${Date.now()}`,
            installment_info: installmentInfo,
            parent_expense_id: null // Ser√° atualizado se houver parcelas futuras
          };
          
          console.log('üíæ [SAVE] Salvando despesa com dados:', JSON.stringify(expenseData, null, 2));
          
          const { data, error } = await supabase
            .from('expenses')
            .insert(expenseData)
            .select()
            .single();
          
          if (error) {
            console.error('‚ùå Erro ao salvar:', error);
            throw error;
          }
          
          console.log('‚úÖ Despesa salva:', data.id);

          // Se for parcelada (>1), atualizar parent_expense_id e criar parcelas futuras
          if (paymentMethod === 'credit_card' && installments > 1 && data.id) {
            // Atualizar parent_expense_id da primeira parcela para referenciar a si mesma
            await supabase
              .from('expenses')
              .update({ parent_expense_id: data.id })
              .eq('id', data.id);
            
            // Criar parcelas futuras (2 at√© installments)
            const baseDate = new Date(expenseData.date + 'T00:00:00');
            const futureInstallments = [];
            
            for (let i = 2; i <= installments; i++) {
              const installmentDate = new Date(baseDate);
              installmentDate.setMonth(installmentDate.getMonth() + (i - 1));
              
              futureInstallments.push({
                amount: installmentAmount,
                description: this.capitalizeDescription(args.description),
                date: installmentDate.toISOString().split('T')[0],
                category: args.category || null,
                category_id: categoryId,
                owner: owner,
                cost_center_id: costCenterId,
                payment_method: paymentMethod,
                card_id: cardId,
                organization_id: context.organizationId,
                user_id: context.userId || userId,
                status: 'pending',
                is_shared: isShared || false,
                source: 'whatsapp',
                whatsapp_message_id: `msg_${Date.now()}_${i}`,
                installment_info: {
                  total_installments: installments,
                  current_installment: i,
                  installment_amount: installmentAmount,
                  total_amount: amount
                },
                parent_expense_id: data.id
              });
            }
            
            // Inserir parcelas futuras em batch
            if (futureInstallments.length > 0) {
              const { error: installmentsError } = await supabase
                .from('expenses')
                .insert(futureInstallments);
              
              if (installmentsError) {
                console.error('‚ùå Erro ao criar parcelas futuras:', installmentsError);
                // N√£o falha o processo, apenas loga o erro
              } else {
                console.log(`‚úÖ ${futureInstallments.length} parcelas futuras criadas`);
              }
            }
          }

          const amountFormatted = Number(amount).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
          const paymentDisplayMap = {
            'credit_card': 'Cart√£o de Cr√©dito',
            'debit_card': 'D√©bito',
            'pix': 'Pix',
            'cash': 'Dinheiro',
            'bank_transfer': 'Transfer√™ncia',
            'boleto': 'Boleto',
            'other': 'Outro'
          };
          // Adicionar informa√ß√µes de parcelas ao paymentDisplay se for parcelada
          let paymentDisplay = paymentDisplayMap[paymentMethod] || paymentMethod;
          if (paymentMethod === 'credit_card' && installments > 1) {
            const cardName = args.card_name || 'Cart√£o';
            paymentDisplay = `${paymentDisplay} ‚Ä¢ ${cardName} ${installments}x`;
          }

          // Data formatada (pt-BR). Usa a data salva na despesa (yyyy-mm-dd)
          const savedDate = expenseData.date;
          const dateObj = new Date(savedDate + 'T00:00:00');
          const isToday = (() => {
            const today = new Date();
            return dateObj.toDateString() === today.toDateString();
          })();
          const dateDisplay = isToday ? 'Hoje' : dateObj.toLocaleDateString('pt-BR');

          // Gerar mensagem de confirma√ß√£o variada e conversacional
          const greetings = [
            'Anotado! ‚úÖ',
            'Registrado! ‚úÖ',
            'Tudo certo! ‚úÖ',
            'Pronto! ‚úÖ',
            'Beleza, anotei! ‚úÖ',
            'Show, registrei! ‚úÖ',
            'Joia, t√° salvo! ‚úÖ'
          ];
          
          const firstName = context.userName ? context.userName.split(' ')[0] : '';
          const greeting = greetings[Math.floor(Math.random() * greetings.length)];
          
          // Criar mensagem mais natural e leg√≠vel (com quebras de linha)
          const confirmationMsg = `${greeting}\nR$ ${amountFormatted} - ${args.description}\n${args.category || 'Sem categoria'}\n${paymentDisplay}\n${owner}\n${dateDisplay}`;

          return {
            success: true,
            message: confirmationMsg,
            expense_id: data.id
          };
        } catch (error) {
          console.error('‚ùå Erro ao salvar despesa:', error);
          const firstName = this.getFirstName(context);
          const namePart = firstName ? ` ${firstName}` : '';
          
          const errorMessages = [
            `Ops${namePart}! Tive um problema ao salvar. üòÖ`,
            `Eita${namePart}, algo deu errado aqui. üòÖ`,
            `Poxa${namePart}, tive um erro ao registrar. üòÖ`,
            `Ops${namePart}, algo deu errado. üòÖ`,
            `Eita${namePart}, tive um problema aqui. üòÖ`,
            `Poxa${namePart}, n√£o consegui salvar. üòÖ`,
            `Desculpa${namePart}, algo deu errado. üòÖ`,
            `Ops${namePart}, erro ao registrar. üòÖ`
          ];
          return {
            success: false,
            message: this.pickVariation(errorMessages, 'erro')
          };
        }
      };
    }
    try {
      console.log('üí¨ [GPT-4] Iniciando conversa...');
      
      // Carregar hist√≥rico da conversa do banco
      const history = await this.loadConversationHistory(userPhone);
      
      // Extrair informa√ß√µes j√° coletadas do hist√≥rico
      const collectedInfo = this.extractCollectedInfo(history);
      console.log('üìä [GPT-4] Informa√ß√µes coletadas:', JSON.stringify(collectedInfo));
      
      // Detectar primeira mensagem (hist√≥rico vazio ou muito antigo)
      const isFirstMessage = history.length === 0;
      
      // Adicionar contexto de informa√ß√µes coletadas ao system message
      let systemMessage = this.getConversationalInstructions(context);
      
      if (isFirstMessage) {
        systemMessage += `\n\nüåÖ PRIMEIRA MENSAGEM: Cumprimente ${context.userName?.split(' ')[0] || 'o usu√°rio'} de forma calorosa antes de come√ßar!`;
      }
      
      // Se tiver informa√ß√µes coletadas, dizer ao GPT para verificar
      if (Object.keys(collectedInfo).length > 0) {
        systemMessage += `\n\nüìù INFORMA√á√ïES J√Å COLETADAS NESTA CONVERSA:\n`;
        if (collectedInfo.amount) systemMessage += `- Valor: R$ ${collectedInfo.amount}\n`;
        if (collectedInfo.description) systemMessage += `- Descri√ß√£o: ${collectedInfo.description}\n`;
        if (collectedInfo.payment_method) systemMessage += `- Pagamento: ${collectedInfo.payment_method}\n`;
        if (collectedInfo.responsible) systemMessage += `- Respons√°vel: ${collectedInfo.responsible}\n`;
        if (collectedInfo.card) systemMessage += `- Cart√£o: ${collectedInfo.card}\n`;
        if (collectedInfo.installments) systemMessage += `- Parcelas: ${collectedInfo.installments}\n`;
        
        const missing = [];
        if (!collectedInfo.amount) missing.push('valor');
        if (!collectedInfo.description) missing.push('descri√ß√£o');
        if (!collectedInfo.payment_method) missing.push('pagamento');
        if (!collectedInfo.responsible) missing.push('respons√°vel');
        
        if (missing.length > 0) {
          systemMessage += `\n‚ö†Ô∏è FALTA: ${missing.join(', ')}`;
        } else {
          systemMessage += `\n‚úÖ TUDO COLETADO! Chame save_expense AGORA!`;
        }
      }
      
      // Preparar mensagens para GPT-4
      const messages = [
        {
          role: 'system',
          content: systemMessage
        },
        ...history,
        {
          role: 'user',
          content: userMessage
        }
      ];
      
      console.log('üí¨ [GPT-4] Hist√≥rico carregado:', history.length, 'mensagens');
      console.log('üí¨ [GPT-4] Hist√≥rico completo:', JSON.stringify(history, null, 2));
      
      // Chamar GPT-4 com function calling
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: messages,
        functions: this.getFunctions(),
        function_call: 'auto',
        temperature: 0.6, // Natural e consistente
        top_p: 1.0,
        frequency_penalty: 0.25, // Evita repeti√ß√£o
        presence_penalty: 0.05,
        max_tokens: 150 // Aumentado para permitir function calls
      });
      
      const assistantMessage = completion.choices[0].message;
      
      // Se chamou fun√ß√£o
      if (assistantMessage.function_call) {
        console.log('üîß [GPT-4] Function call:', assistantMessage.function_call.name);
        
        const functionName = assistantMessage.function_call.name;
        const functionArgs = JSON.parse(assistantMessage.function_call.arguments);
        
        const functionResult = await this.handleFunctionCall(functionName, functionArgs, context);
        
        // Se salvou despesa ou entrada, limpar hist√≥rico e retornar APENAS mensagem da fun√ß√£o
        if (functionName === 'save_expense' || functionName === 'save_income' || functionName === 'save_bill') {
          await this.clearConversationHistory(userPhone);
          
          // Retornar APENAS a mensagem da fun√ß√£o (ignorar qualquer texto que o GPT escreveu)
          return functionResult.message || (functionName === 'save_income' ? 'Entrada registrada! ‚úÖ' : 'Anotado! ‚úÖ');
        }
        
        // Fun√ß√µes de resumo/consulta: retornar mensagem sem limpar hist√≥rico (permite continuar conversa)
        if (functionName === 'get_expenses_summary' || functionName === 'get_category_summary' || functionName === 'get_account_balance') {
          return functionResult.message || 'N√£o consegui buscar a informa√ß√£o. üòÖ';
        }
        
        // Outras fun√ß√µes: n√£o deveriam acontecer aqui
        return functionResult.message || 'Funcionou!';
      }
      
      // Resposta normal sem function call
      const response = assistantMessage.content;
      
      // Filtrar mensagens t√©cnicas que o GPT √†s vezes escreve
      const cleanedResponse = response.replace(/\[CHAMANDO.*?\]/gi, '').replace(/\[.*?AGORA.*?\]/gi, '').trim();
      
      // Salvar no hist√≥rico
      console.log('üíæ [GPT-4] Salvando no hist√≥rico: user="' + userMessage + '", assistant="' + cleanedResponse + '"');
      await this.saveToHistory(userPhone, userMessage, cleanedResponse);
      
      return cleanedResponse || response;
      
    } catch (error) {
      console.error('‚ùå [GPT-4] Erro:', error);
      throw error;
    }
  }

  /**
   * Extrair informa√ß√µes j√° coletadas do hist√≥rico
   */
  extractCollectedInfo(history) {
    const info = {};
    
    // Considerar apenas a √∫ltima mensagem do usu√°rio, para evitar infer√™ncias antigas
    const lastUserMsg = [...history].reverse().find(m => m.role === 'user');
    const conversationText = (lastUserMsg?.content || '').toLowerCase();
    
    // Extrair valor
    const amountMatch = conversationText.match(/(?:gastei|paguei|foi|valor)?\s*(?:r\$)?\s*(\d+(?:[.,]\d{1,2})?)/i);
    if (amountMatch) {
      info.amount = parseFloat(amountMatch[1].replace(',', '.'));
    }
    
    // Extrair descri√ß√£o: usar n√∫cleo descritivo da √∫ltima mensagem
    const core = this.extractCoreDescription(conversationText);
    if (core) {
      info.description = this.capitalizeDescription(core);
    }
    
    // Extrair forma de pagamento
    if (conversationText.includes('pix')) info.payment_method = 'pix';
    else if (conversationText.includes('dinheiro') || conversationText.includes('cash')) info.payment_method = 'dinheiro';
    else if (conversationText.includes('d√©bito') || conversationText.includes('debito')) info.payment_method = 'd√©bito';
    else if (conversationText.includes('cr√©dito') || conversationText.includes('credito')) info.payment_method = 'cr√©dito';
    
    // Extrair respons√°vel apenas se explicitamente citado na √∫ltima mensagem
    if (conversationText.match(/\b(eu|eu mesmo|fui eu)\b/)) {
      info.responsible = 'eu';
    } else if (conversationText.includes('compartilhado')) {
      info.responsible = 'Compartilhado';
    }
    
    return info;
  }

  /**
   * Carregar hist√≥rico da conversa
   */
  async loadConversationHistory(userPhone) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      const { data } = await supabase
        .from('conversation_state')
        .select('temp_data')
        .eq('user_phone', normalizedPhone)
        .neq('state', 'idle')
        .single();
      
      if (data?.temp_data?.messages) {
        return data.temp_data.messages;
      }
      
      return [];
    } catch (error) {
      return [];
    }
  }

  /**
   * Salvar mensagem no hist√≥rico
   */
  async saveToHistory(userPhone, userMessage, assistantResponse) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      console.log('üíæ [saveToHistory] Phone:', normalizedPhone);
      
      const history = await this.loadConversationHistory(userPhone);
      console.log('üíæ [saveToHistory] Hist√≥rico atual:', history.length, 'mensagens');
      
      history.push(
        { role: 'user', content: userMessage },
        { role: 'assistant', content: assistantResponse }
      );
      
      console.log('üíæ [saveToHistory] Hist√≥rico ap√≥s push:', history.length, 'mensagens');
      
      // Limitar hist√≥rico a √∫ltimas 10 mensagens
      const limitedHistory = history.slice(-10);
      
      const result = await supabase
        .from('conversation_state')
        .upsert({
          user_phone: normalizedPhone,
          state: 'awaiting_confirmation', // Estado gen√©rico para conversa ativa
          temp_data: {
            messages: limitedHistory,
            last_message: userMessage,
            timestamp: new Date().toISOString()
          },
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'user_phone'
        });
      
      console.log('üíæ [saveToHistory] Upsert result:', JSON.stringify(result));
      console.log('üíæ [GPT-4] Hist√≥rico salvo com', limitedHistory.length, 'mensagens');
    } catch (error) {
      console.error('‚ùå Erro ao salvar hist√≥rico:', error);
    }
  }

  /**
   * Limpar hist√≥rico da conversa
   */
  async clearConversationHistory(userPhone) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      await supabase
        .from('conversation_state')
        .update({
          state: 'idle',
          temp_data: {}
        })
        .eq('user_phone', normalizedPhone);
      
      console.log('üóëÔ∏è [GPT-4] Hist√≥rico limpo');
    } catch (error) {
      console.error('‚ùå Erro ao limpar hist√≥rico:', error);
    }
  }

  /**
   * Instru√ß√µes conversacionais (system message)
   */
  getConversationalInstructions(context) {
    const { userName, organizationId, availableCards } = context;
    const firstName = userName ? userName.split(' ')[0] : 'voc√™';
    const cardsList = availableCards?.join(', ') || 'Nubank, C6';
    
    return `Voc√™ √© o ZUL, o assistente financeiro do MeuAzul√£o. Seu objetivo prim√°rio √© registrar despesas de forma r√°pida e conversacional via WhatsApp, utilizando as ferramentas de fun√ß√£o dispon√≠veis.

PERSONALIDADE: S√°bio Jovem. Seu tom √© **calmo, claro, genuinamente prestativo e inspirador**. Fale como um amigo inteligente que ajuda a fam√≠lia a ter mais controle financeiro. Use um portugu√™s brasileiro **NATURAL e VARIADO**.

REGRAS CR√çTICAS PARA CONVERSA√á√ÉO FLU√çDA:

1.  **VARIA√á√ÉO RADICAL**: Mude o estilo de cada resposta (direto, casual, formal, contextual). NUNCA repita a mesma frase ou estrutura de pergunta.
2.  **CONCIS√ÉO M√ÅXIMA**: Responda com **1 linha** sempre que poss√≠vel. Use no m√°ximo 2 linhas em casos de confirma√ß√£o ou contexto. O WhatsApp exige rapidez.
3.  **INFER√äNCIA ATIVA**: Se o usu√°rio fornecer informa√ß√µes parciais, use o contexto para inferir e perguntar apenas pela **lacuna CR√çTICA** restante. Ex: Se ele diz "100 no mercado, d√©bito", pergunte apenas "E o respons√°vel?".
4.  **SEM EMOJIS NAS PERGUNTAS**: NUNCA use emojis nas perguntas. Emojis apenas na confirma√ß√£o final (que vem automaticamente da fun√ß√£o save_expense).
5.  **MANUTEN√á√ÉO DE CONTEXTO**: NUNCA repita perguntas j√° respondidas ou informa√ß√µes j√° fornecidas.
6.  **INFER√äNCIA DE CATEGORIA**: INFIRA automaticamente quando tiver CERTEZA:
   - Alimenta√ß√£o: padaria, restaurante, lanche, pizza, ifood, delivery, comida, bebida, cerveja, suco, a√ßougue, peixaria, frutas, verduras, pipoca
   - Sa√∫de: rem√©dio, farm√°cia, m√©dico, dentista, hospital, consulta, exame, laborat√≥rio, √≥culos, academia, suplemento
   - Transporte: posto, gasolina, combust√≠vel, uber, taxi, √¥nibus, metro, estacionamento, ipva, oficina, manuten√ß√£o
   - Casa: mercado/supermercado (compras), eletrodom√©sticos, eletr√¥nicos (tv, notebook, computador, tablet), m√≥veis, decora√ß√£o, limpeza
   - Contas: aluguel, condom√≠nio, √°gua, luz, energia, internet, telefone, iptu, imposto
   - Lazer: cinema, teatro, show, balada, **bar**, parque, viagem, hotel, netflix, spotify, streaming
   - Beleza: cabelo, barbearia, manicure, pedicure, sal√£o, cosm√©tico
   - Vestu√°rio: roupa, sapato, t√™nis, camisa
   - Educa√ß√£o: curso, faculdade, escola, livro
   - Pets: petshop, ra√ß√£o, veterin√°rio
   - Se N√ÉO TIVER CERTEZA, OBRIGATORIAMENTE PERGUNTE (categoria √© obrigat√≥ria - nunca salve sem)
7.  **SALVAMENTO AUTOM√ÅTICO**: Chame a fun√ß√£o save_expense **IMEDIATAMENTE** quando tiver: valor, descri√ß√£o, pagamento, e respons√°vel. N√ÉO ESCREVA NADA al√©m da chamada da fun√ß√£o.
8.  **SUBFLUXO DE CR√âDITO**: Se pagamento = cr√©dito ‚Üí OBRIGAT√ìRIO perguntar nome do cart√£o e parcelas ANTES de chamar save_expense.
9.  **RESPOSTAS NATURAIS**: Responda naturalmente a agradecimentos ("obrigado", "valeu", "brigado"), confirma√ß√µes ("entendi", "ok", "beleza"), e conversas casuais. N√ÉO redirecione agradecimentos - apenas responda calorosamente: "Por nada, ${firstName}!", "Tamo junto!", "Disponha!", etc.
10. **PERGUNTAS CASUAIS**: Use linguagem descontra√≠da e VARIE muito:
   - Para pagamento: "Pagou como?", "Como foi o pagamento?", "De que forma pagou?", "Como voc√™ pagou?"
   - **N√ÉO liste op√ß√µes na primeira pergunta de pagamento** (ex: "Foi pix, dinheiro ou cart√£o?") - pergunte apenas de forma aberta
   - Liste op√ß√µes APENAS se o usu√°rio perguntar explicitamente (ex: "quais temos?") ou ap√≥s resposta inv√°lida
   - Para respons√°vel: "Quem pagou?", "Foi voc√™?", "Quem foi?", "Pra quem foi essa?", "Foi voc√™ ou algu√©m?", "Quem arcou com essa?"
   - EVITE frases formais como "E quem foi o respons√°vel pela despesa?" - seja mais casual e direto
   - **NUNCA use emojis nas perguntas** - emojis apenas na confirma√ß√£o final (que vem da fun√ß√£o)
11. **VARIA√á√ÉO DE SAUDA√á√ÉO INICIAL**: Se o usu√°rio chamar pelo nome ("Zul", "Oi Zul"), VARIE completamente a resposta: "E a√≠, ${firstName}!", "Opa, ${firstName}! Tudo certo?", "Oi, ${firstName}! O que t√° pegando?", "E a√≠! Como posso ajudar?", "Tudo certo, ${firstName}?", "Opa! Precisa de alguma coisa?", "Oi! Tudo bem?", "E a√≠! Qual foi o gasto hoje?", etc.
12. **TRATAMENTO DE DESVIO**: Se a mensagem for totalmente fora de contexto (ex: pergunta sobre clima, pol√≠tica, etc.) e voc√™ n√£o souber responder, a√≠ sim redirecione gentilmente: "Opa, ${firstName}! N√£o tenho acesso a isso, mas to aqui pra te ajudar com as despesas. Gastei algo hoje?"
13. **SOBRE VOC√ä**: Se perguntarem "quem √© voc√™?", "o que voc√™ faz?", "como voc√™ pode ajudar?", etc., responda naturalmente: "Sou o Zul, assistente financeiro do MeuAzul√£o! To aqui pra te ajudar a organizar suas despesas rapidinho pelo WhatsApp."
${process.env.USE_INCOME_FEATURE === 'true' ? `
14. **REGISTRAR ENTRADAS/RECEITAS**: Quando o usu√°rio mencionar valores recebidos (ex: "recebi comiss√£o de 200 reais", "sal√°rio", "freelance", "comiss√£o", "venda"), chame a fun√ß√£o save_income. INFIRA automaticamente quando poss√≠vel:
   - Valor: sempre extrair da mensagem se mencionado (ex: "500 reais" ‚Üí 500)
   - Descri√ß√£o: extrair automaticamente da mensagem (ex: "recebi bonus" ‚Üí "bonus", "sal√°rio" ‚Üí "sal√°rio", "comiss√£o de 200" ‚Üí "comiss√£o")
   - Respons√°vel: se o usu√°rio disse "recebi", "eu recebi", "minha", j√° INFERE que foi o pr√≥prio usu√°rio (mapear para "eu")
   - Conta banc√°ria (OBRIGAT√ìRIO - sempre perguntar "Qual conta adiciono?" ou "Em qual conta foi recebido?" se n√£o mencionado)
   - M√©todo de recebimento (OPCIONAL - pix, dinheiro, dep√≥sito, transfer√™ncia. Se n√£o mencionado e conta banc√°ria informada, assume dep√≥sito)
   - Categoria ser√° inferida automaticamente da descri√ß√£o quando poss√≠vel

Exemplos de INFER√äNCIA AUTOM√ÅTICA:
- "recebi comiss√£o de 200" ‚Üí INFERE: amount=200, description="comiss√£o", responsible="eu" ‚Üí Pergunta apenas: conta banc√°ria
- "sal√°rio de 5000 na nubank" ‚Üí INFERE: amount=5000, description="sal√°rio", account_name="nubank" ‚Üí Pergunta apenas: respons√°vel (ou infere "eu" se contexto indicar)
- "recebi bonus de 500, coloca na conta nubank" ‚Üí INFERE: amount=500, description="bonus", account_name="nubank", responsible="eu" ‚Üí Chama save_income direto (sem perguntar nada)` : ''}

${process.env.USE_INCOME_FEATURE === 'true' ? '15' : '14'}. **REGISTRAR CONTAS A PAGAR**: Quando o usu√°rio mencionar valores a pagar futuramente (ex: "tenho que pagar aluguel de 1500 no dia 5", "conta de luz vence dia 10", "aluguel de 2000 no dia 1", "internet mensal de 150", "condom√≠nio"), chame a fun√ß√£o save_bill. INFIRA automaticamente quando poss√≠vel:
   - Valor: sempre extrair da mensagem se mencionado (ex: "1500 reais" ‚Üí 1500)
   - Descri√ß√£o: extrair automaticamente da mensagem (ex: "aluguel", "conta de luz", "internet", "condom√≠nio")
   - Data de vencimento (OBRIGAT√ìRIO): calcular a data a partir de "dia X", "X de novembro", "pr√≥ximo dia 5", etc. Se mencionar apenas o dia (ex: "dia 5"), assumir m√™s atual se ainda n√£o passou, sen√£o pr√≥ximo m√™s
   - Categoria: ser√° inferida automaticamente da descri√ß√£o quando poss√≠vel (aluguel/condom√≠nio ‚Üí Casa, luz/internet ‚Üí Servi√ßos)
   - Respons√°vel: se n√£o informado, ser√° compartilhada. Se mencionar "eu pago", "minha", j√° INFERE respons√°vel
   - M√©todo de pagamento e recorr√™ncia s√£o opcionais

Exemplos de INFER√äNCIA AUTOM√ÅTICA:
- "tenho que pagar aluguel de 1500 no dia 5" ‚Üí INFERE: amount=1500, description="aluguel", due_date (calcular dia 5), category ser√° "Contas" automaticamente ‚Üí Chama save_bill
- "conta de luz vence dia 10, 300 reais" ‚Üí INFERE: amount=300, description="conta de luz", due_date (calcular dia 10), category ser√° "Contas" automaticamente ‚Üí Chama save_bill
- "aluguel mensal de 2000 no dia 1" ‚Üí INFERE: amount=2000, description="aluguel", due_date (calcular dia 1), is_recurring=true, recurrence_frequency="monthly", category ser√° "Contas" automaticamente ‚Üí Chama save_bill

${process.env.USE_INCOME_FEATURE === 'true' ? '16' : '15'}. **RESUMOS E CONSULTAS**: Quando o usu√°rio perguntar sobre gastos (ex: "quanto gastei?", "resumo de despesas", "quanto j√° gastei de alimenta√ß√£o esse m√™s?", "resumo esse m√™s", "quanto foi em transporte hoje?"), chame as fun√ß√µes apropriadas:
   - "quanto gastei?" / "resumo de despesas" / "resumo esse m√™s" / "quanto j√° gastei esse m√™s?" ‚Üí get_expenses_summary (period: este_mes) - se n√£o mencionar per√≠odo, assume "este_mes"
   - "quanto gastei de X?" / "quanto j√° gastei de alimenta√ß√£o esse m√™s?" / "resumo de alimenta√ß√£o" ‚Üí get_category_summary (category: X, period: este_mes)
   - "quanto gastei hoje?" ‚Üí get_expenses_summary (period: hoje)
   - "quanto gastei essa semana?" ‚Üí get_expenses_summary (period: esta_semana)
   - "quanto gastei no m√™s passado?" ‚Üí get_expenses_summary (period: mes_anterior)
   - Se mencionar per√≠odo espec√≠fico (hoje, semana, m√™s, m√™s passado), use o per√≠odo correto
   - N√ÉO pergunte nada - INFIRA o per√≠odo e categoria da mensagem do usu√°rio e chame a fun√ß√£o diretamente

${process.env.USE_INCOME_FEATURE === 'true' ? '17' : '16'}. **CONSULTAR SALDO**: Quando o usu√°rio perguntar sobre saldo (ex: "qual meu saldo?", "quanto tenho na conta?", "saldo da nubank", "quanto tem na conta X?", "meu saldo"), chame get_account_balance:
   - "qual meu saldo?" / "quanto tenho?" / "meu saldo" ‚Üí get_account_balance (sem account_name) - retorna todas as contas
   - "saldo da nubank" / "quanto tem na nubank?" / "saldo nubank" ‚Üí get_account_balance (account_name: "Nubank")
   - INFIRA o nome da conta quando mencionado e chame a fun√ß√£o diretamente

FUN√á√ïES DISPON√çVEIS:
- validate_payment_method (opcional - fun√ß√£o j√° valida internamente)
- validate_card (opcional - fun√ß√£o j√° valida internamente)
- validate_responsible (opcional - fun√ß√£o j√° valida internamente)
- save_expense (chame quando tiver: valor, descri√ß√£o, categoria, pagamento, respons√°vel. Se for cr√©dito: cart√£o e parcelas tamb√©m)
${process.env.USE_INCOME_FEATURE === 'true' ? '- save_income (chame quando usu√°rio mencionar valores recebidos: comiss√£o, sal√°rio, freelance, venda, etc. Precisa: valor, descri√ß√£o, respons√°vel, conta banc√°ria. Opcional: categoria)' : ''}
- save_bill (chame quando usu√°rio mencionar valores a pagar futuramente: "tenho que pagar aluguel de 1500 no dia 5", "conta de luz vence dia 10", etc. Precisa: valor, descri√ß√£o, data de vencimento. Opcional: categoria, respons√°vel, m√©todo de pagamento, recorr√™ncia)
- get_expenses_summary (chame quando usu√°rio perguntar sobre gastos totais: "quanto gastei?", "resumo de despesas", etc. Par√¢metros: period (hoje, esta_semana, este_mes, mes_anterior), category (opcional))
- get_category_summary (chame quando usu√°rio perguntar sobre gastos por categoria: "quanto gastei de X?", etc. Par√¢metros: category, period)
- get_account_balance (chame quando usu√°rio perguntar sobre saldo: "qual meu saldo?", "saldo da X", etc. Par√¢metros: account_name (opcional))

FLUXO DE EXEMPLO (√™nfase na fluidez e varia√ß√£o):

| Usu√°rio | ZUL - Varia√ß√µes (escolha uma, nunca repita) |
| :--- | :--- |
| Zul | "E a√≠, ${firstName}!", "Opa, ${firstName}! Tudo certo?", "Oi, ${firstName}! O que t√° pegando?", "E a√≠! Como posso ajudar?" |
| 150 no mercado | "Pagou como?", "Como foi o pagamento?", "De que forma pagou?", "Como voc√™ pagou?" |
| Cr√©dito Latam 3x | "Quem pagou?", "Foi voc√™?", "Pra quem foi essa?", "Quem foi?" |
| Felipe | [save_expense] Fun√ß√£o retorna mensagem automaticamente |

IMPORTANTE SOBRE DESCRI√á√ÉO:
- N√ÉO inclua valor na descri√ß√£o! Ex: "mercado" (n√£o "150 mercado")
- Permita n√∫meros de quantidade: "2 televis√µes", "5kg de carne"
- A fun√ß√£o j√° extrai o core da descri√ß√£o automaticamente

Seja IMPREVIS√çVEL e NATURAL. Fa√ßa o usu√°rio sentir que est√° falando com um assistente humano e eficiente.
${context.isFirstMessage ? `\n\nüåÖ PRIMEIRA MENSAGEM: Cumprimente ${firstName} de forma calorosa: "E a√≠, ${firstName}!" ou "Opa, ${firstName}! Tudo certo?" ou "Oi, ${firstName}! Como vai?"` : ''}`;
  }

  /**
   * Definir fun√ß√µes dispon√≠veis para GPT-4
   */
  getFunctions() {
    const functions = [
      {
        name: 'save_expense',
        description: 'Salvar despesa quando tiver TODAS as informa√ß√µes (valor, descri√ß√£o, pagamento, respons√°vel). Valida√ß√£o acontece automaticamente dentro da fun√ß√£o.',
        parameters: {
          type: 'object',
          properties: {
            amount: { 
              type: 'number',
              description: 'Valor num√©rico da despesa'
            },
            description: { 
              type: 'string',
              description: 'Descri√ß√£o da despesa SEM o valor monet√°rio. Exemplos corretos: "mercado" (n√£o "150 mercado"), "farm√°cia", "2 televis√µes", "5kg de carne", "TV 50 polegadas". Permita n√∫meros relacionados a quantidade (2, 5kg, etc) mas NUNCA inclua o valor monet√°rio na descri√ß√£o.'
            },
            payment_method: { 
              type: 'string',
              description: 'Forma de pagamento que o usu√°rio disse (pix, dinheiro, d√©bito, cr√©dito, etc)'
            },
            responsible: { 
              type: 'string',
              description: 'Quem pagou: nome exato (ex: "Felipe", "Let√≠cia") ou "eu" (ser√° mapeado automaticamente)'
            },
            card_name: { 
              type: 'string',
              description: 'Nome do cart√£o (OBRIGAT√ìRIO se payment_method for cr√©dito)' 
            },
            installments: { 
              type: 'number',
              description: 'N√∫mero de parcelas (OBRIGAT√ìRIO se payment_method for cr√©dito, default: 1)' 
            },
            category: { 
              type: 'string',
              description: 'Categoria (opcional, ser√° inferida automaticamente)' 
            }
          },
          required: ['amount', 'description', 'payment_method', 'responsible']
        }
      }
    ];

    // ‚úÖ FEATURE FLAG: Registrar Entradas/Receitas (Incomes)
    if (process.env.USE_INCOME_FEATURE === 'true') {
      functions.push({
        name: 'save_income',
        description: 'Registrar entrada/receita quando o usu√°rio mencionar valores recebidos (ex: "recebi comiss√£o de 200 reais", "sal√°rio", "freelance", "comiss√£o").',
        parameters: {
          type: 'object',
          properties: {
            amount: {
              type: 'number',
              description: 'Valor num√©rico da entrada/receita'
            },
            description: {
              type: 'string',
              description: 'Descri√ß√£o da entrada (ex: "comiss√£o", "sal√°rio", "freelance", "venda", "bonus")'
            },
            category: {
              type: 'string',
              description: 'Categoria da entrada (ex: "Sal√°rio", "Comiss√£o", "Freelance", "Venda", "B√¥nus"). Se n√£o informado, ser√° inferido da descri√ß√£o.'
            },
            account_name: {
              type: 'string',
              description: 'Nome da conta banc√°ria onde o dinheiro foi recebido (ex: "Nubank", "C6"). OBRIGAT√ìRIO - se n√£o informado, perguntar ao usu√°rio qual conta.'
            },
            payment_method: {
              type: 'string',
              description: 'M√©todo de recebimento (opcional, ser√° inferido automaticamente se n√£o informado): "pix" (PIX), "cash" (Dinheiro), "deposit" (Dep√≥sito em conta), "bank_transfer" (Transfer√™ncia banc√°ria/TED/DOC), "boleto" (Boleto), "other" (Outros). Se conta banc√°ria for informada, default ser√° "deposit".'
            },
            responsible: {
              type: 'string',
              description: 'Quem recebeu: nome exato (ex: "Felipe", "Let√≠cia") ou "eu" (ser√° mapeado automaticamente)'
            },
            date: {
              type: 'string',
              description: 'Data da entrada no formato YYYY-MM-DD (opcional, default: hoje)'
            }
          },
          required: ['amount', 'description', 'responsible', 'account_name']
        }
      });
    }

    // ‚úÖ NOVA FUN√á√ÉO: Resumo de Despesas
    functions.push({
      name: 'get_expenses_summary',
      description: 'Obter resumo de despesas quando o usu√°rio perguntar "quanto gastei?", "resumo de despesas", "quanto j√° gastei esse m√™s?", "resumo esse m√™s", etc.',
      parameters: {
        type: 'object',
        properties: {
          period: {
            type: 'string',
            description: 'Per√≠odo para o resumo: "hoje", "esta_semana", "este_mes", "mes_anterior"',
            enum: ['hoje', 'esta_semana', 'este_mes', 'mes_anterior']
          },
          category: {
            type: 'string',
            description: 'Categoria espec√≠fica para filtrar (opcional, ex: "Alimenta√ß√£o", "Transporte"). Se n√£o informado, retorna todas as categorias.'
          }
        },
        required: ['period']
      }
    });

    // ‚úÖ NOVA FUN√á√ÉO: Registrar Conta a Pagar
    functions.push({
      name: 'save_bill',
      description: 'Registrar conta a pagar quando o usu√°rio mencionar valores a pagar futuramente (ex: "tenho que pagar aluguel de 1500 no dia 5", "conta de luz vence dia 10", "aluguel de 2000 no dia 1"). Precisa: valor, descri√ß√£o, data de vencimento. Opcional: categoria, respons√°vel, m√©todo de pagamento, recorr√™ncia.',
      parameters: {
        type: 'object',
        properties: {
          amount: {
            type: 'number',
            description: 'Valor num√©rico da conta a pagar'
          },
          description: {
            type: 'string',
            description: 'Descri√ß√£o da conta (ex: "aluguel", "conta de luz", "internet", "telefone", "condom√≠nio")'
          },
          due_date: {
            type: 'string',
            description: 'Data de vencimento (OBRIGAT√ìRIO). Pode ser: formato YYYY-MM-DD, apenas o dia (ex: "5", "dia 5"), ou formato relativo (ex: "5 de novembro"). Se informar apenas o dia (ex: "dia 5"), a fun√ß√£o calcular√° automaticamente se √© m√™s atual ou pr√≥ximo baseado na data de hoje.'
          },
          category: {
            type: 'string',
            description: 'Categoria da conta (opcional, ser√° inferida automaticamente quando poss√≠vel). Ex: "Casa", "Servi√ßos", "Transporte"'
          },
          responsible: {
            type: 'string',
            description: 'Quem √© respons√°vel por pagar: nome exato (ex: "Felipe", "Let√≠cia") ou "eu" (ser√° mapeado automaticamente). Se n√£o informado, ser√° compartilhada.'
          },
          payment_method: {
            type: 'string',
            description: 'M√©todo de pagamento previsto (opcional): "pix", "credit_card", "debit_card", "boleto", "bank_transfer", "cash", "other"'
          },
          card_name: {
            type: 'string',
            description: 'Nome do cart√£o (OBRIGAT√ìRIO se payment_method for credit_card)'
          },
          is_recurring: {
            type: 'boolean',
            description: 'Se a conta √© recorrente (opcional, default: false). Ex: aluguel mensal, internet mensal'
          },
          recurrence_frequency: {
            type: 'string',
            description: 'Frequ√™ncia da recorr√™ncia se is_recurring for true (opcional): "monthly" (mensal), "weekly" (semanal), "yearly" (anual). Default: "monthly"'
          }
        },
        required: ['amount', 'description', 'due_date']
      }
    });

    // ‚úÖ NOVA FUN√á√ÉO: Resumo por Categoria
    functions.push({
      name: 'get_category_summary',
      description: 'Obter resumo de despesas por categoria quando o usu√°rio perguntar "quanto gastei de X?", "quanto j√° gastei de alimenta√ß√£o esse m√™s?", "resumo de alimenta√ß√£o", etc.',
      parameters: {
        type: 'object',
        properties: {
          category: {
            type: 'string',
            description: 'Nome da categoria (ex: "Alimenta√ß√£o", "Transporte", "Sa√∫de", "Lazer", "Casa")'
          },
          period: {
            type: 'string',
            description: 'Per√≠odo para o resumo: "hoje", "esta_semana", "este_mes", "mes_anterior"',
            enum: ['hoje', 'esta_semana', 'este_mes', 'mes_anterior']
          }
        },
        required: ['category', 'period']
      }
    });

    // ‚úÖ NOVA FUN√á√ÉO: Consultar Saldo de Contas
    functions.push({
      name: 'get_account_balance',
      description: 'Consultar saldo de contas banc√°rias quando o usu√°rio perguntar "qual meu saldo?", "quanto tenho na conta?", "saldo da nubank", "quanto tem na conta?", etc.',
      parameters: {
        type: 'object',
        properties: {
          account_name: {
            type: 'string',
            description: 'Nome da conta banc√°ria espec√≠fica para consultar (opcional, ex: "Nubank", "C6"). Se n√£o informado, retorna saldo de todas as contas ativas.'
          }
        },
        required: []
      }
    });

    return functions;
  }

  /**
   * Enviar mensagem para o Assistant e obter resposta (ANTIGO - mantido para compatibilidade)
   */
  async sendMessage(userId, userMessage, context = {}) {
    try {
      console.log(`üì§ [ASSISTANT] Enviando mensagem para usu√°rio ${userId}`);
      console.log(`üì§ [ASSISTANT] Mensagem: "${userMessage}"`);
      console.log(`üì§ [ASSISTANT] Context:`, JSON.stringify(context, null, 2));
      
      const assistantId = await this.getOrCreateAssistant();
      if (!assistantId) {
        throw new Error('Falha ao obter/criar Assistant ID');
      }
      console.log(`‚úÖ [ASSISTANT] Assistant ID: ${assistantId}`);
      
      const threadId = await this.getOrCreateThread(userId, context.userPhone);
      if (!threadId) {
        throw new Error('Falha ao obter/criar Thread ID');
      }
      console.log(`‚úÖ [ASSISTANT] Thread ID: ${threadId}`);

      // Atualizar cache com informa√ß√µes do usu√°rio
      const cached = threadCache.get(userId);
      if (cached && context.userName) {
        cached.userName = context.userName;
        cached.userPhone = context.userPhone;
      }

      // üíæ Salvar thread no banco para persist√™ncia
      if (context.userPhone) {
        await this.saveThreadToDB(
          context.userPhone, 
          threadId, 
          'awaiting_payment_method',
          {
            user_name: context.userName,
            last_message: userMessage,
            timestamp: new Date().toISOString()
          }
        );
      }

      // Adicionar contexto do usu√°rio na primeira mensagem (se thread √© nova)
      const isNewThread = !threadCache.has(userId) || threadCache.get(userId).threadId === threadId;
      let messageContent = userMessage;
      if (context.userName && isNewThread) {
        messageContent = `[CONTEXTO: Usu√°rio: ${context.userName}]\n\n${userMessage}`;
      }

      // Adicionar mensagem do usu√°rio
      console.log(`üìù [ASSISTANT] Adicionando mensagem √† thread...`);
      await openai.beta.threads.messages.create(threadId, {
        role: 'user',
        content: messageContent
      });
      console.log(`‚úÖ [ASSISTANT] Mensagem adicionada`);

      // Executar o Assistant
      console.log(`üèÉ [ASSISTANT] Criando run...`);
      const run = await openai.beta.threads.runs.create(threadId, {
        assistant_id: assistantId
      });
      console.log(`‚úÖ [ASSISTANT] Run criado: ${run.id} (status: ${run.status})`);

      // Aguardar conclus√£o e processar
      console.log(`‚è≥ [ASSISTANT] Aguardando conclus√£o do run...`);
      const result = await this.waitForCompletion(threadId, run.id, context);
      console.log(`‚úÖ [ASSISTANT] Run completado, retornando resposta`);
      return result;

    } catch (error) {
      console.error('‚ùå [ASSISTANT] Erro ao enviar mensagem:', error);
      console.error('‚ùå [ASSISTANT] Error stack:', error.stack);
      throw error;
    }
  }

  /**
   * Aguardar conclus√£o do run e processar function calls
   */
  async waitForCompletion(threadId, runId, context) {
    console.log(`‚è≥ [ASSISTANT] Iniciando waitForCompletion - threadId: ${threadId}, runId: ${runId}`);
    
    let run = await openai.beta.threads.runs.retrieve(runId, { thread_id: threadId });
    console.log(`üìä [ASSISTANT] Status inicial: ${run.status}`);
    
    let attempts = 0;
    const maxAttempts = 60; // 60 segundos timeout (aumentado para debug)
    
    while (run.status === 'in_progress' || run.status === 'queued') {
      if (attempts >= maxAttempts) {
        console.error(`‚ùå [ASSISTANT] Timeout ap√≥s ${maxAttempts} tentativas`);
        throw new Error('Timeout aguardando resposta do Assistant');
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
      run = await openai.beta.threads.runs.retrieve(runId, { thread_id: threadId });
      attempts++;
      console.log(`‚è≥ [ASSISTANT] Status: ${run.status} (tentativa ${attempts}/${maxAttempts})`);
    }
    
    console.log(`üìä [ASSISTANT] Status final: ${run.status}`);

    // Se precisar de function calls
    if (run.status === 'requires_action') {
      const toolCalls = run.required_action.submit_tool_outputs.tool_calls;
      const toolOutputs = [];

      for (const toolCall of toolCalls) {
        const functionName = toolCall.function.name;
        const args = JSON.parse(toolCall.function.arguments);
        
        console.log(`üîß Function call: ${functionName}`, args);
        
        const output = await this.handleFunctionCall(functionName, args, context);
        toolOutputs.push({
          tool_call_id: toolCall.id,
          output: JSON.stringify(output)
        });
      }

      // Submeter os resultados das fun√ß√µes
      await openai.beta.threads.runs.submitToolOutputs(runId, {
        thread_id: threadId,
        tool_outputs: toolOutputs
      });

      // Aguardar nova conclus√£o
      return await this.waitForCompletion(threadId, runId, context);
    }

    // Se completou com sucesso, pegar a √∫ltima mensagem
    if (run.status === 'completed') {
      const messages = await openai.beta.threads.messages.list(threadId);
      const lastMessage = messages.data[0];
      
      if (lastMessage.role === 'assistant') {
        const response = lastMessage.content[0].text.value;
        console.log(`‚úÖ [ASSISTANT] Resposta: ${response.substring(0, 100)}...`);
        return response;
      }
    }

    // Se falhou, logar detalhes
    if (run.status === 'failed') {
      console.error(`‚ùå [ASSISTANT] Run falhou:`, run.last_error);
    }

    throw new Error(`Run finalizado com status: ${run.status}`);
  }

  /**
   * Processar chamadas de fun√ß√£o
   */
  async handleFunctionCall(functionName, args, context) {
    console.log(`üîß [FUNCTION_CALL] Executing: ${functionName}`);
    let output = {};

    try {
        if (functionName === 'validate_payment_method') {
            output = { success: true, isValid: true };
        } else if (functionName === 'validate_card') {
            output = { success: true, isValid: true };
        } else if (functionName === 'validate_responsible') {
            output = { success: true, isValid: true };

        } else if (functionName === 'save_expense') {
            output = await context.saveExpense(args);
        } else if (functionName === 'save_income') {
            // ‚úÖ FEATURE FLAG: Registrar Entradas/Receitas
            if (process.env.USE_INCOME_FEATURE === 'true') {
                output = await this.saveIncome(args, context);
            } else {
                output = { success: false, error: 'Feature save_income is disabled' };
            }
        } else if (functionName === 'save_bill') {
            // ‚úÖ NOVA FUN√á√ÉO: Registrar Conta a Pagar
            output = await this.saveBill(args, context);
        } else if (functionName === 'get_expenses_summary') {
            // ‚úÖ NOVA FUN√á√ÉO: Resumo de Despesas
            output = await this.getExpensesSummary(args, context);
        } else if (functionName === 'get_category_summary') {
            // ‚úÖ NOVA FUN√á√ÉO: Resumo por Categoria
            output = await this.getCategorySummary(args, context);
        } else if (functionName === 'get_account_balance') {
            // ‚úÖ NOVA FUN√á√ÉO: Consultar Saldo de Contas
            output = await this.getAccountBalance(args, context);
        } else {
            output = { success: false, error: `Unknown function: ${functionName}` };
        }
    } catch (error) {
        console.error(`‚ùå Error in handleFunctionCall for ${functionName}:`, error);
        output = { success: false, error: error.message };
    }

    console.log(`  -> Result for ${functionName}:`, output);
    return output;
  }

  /**
   * Salvar entrada/receita (income)
   * ‚úÖ FEATURE FLAG: USE_INCOME_FEATURE
   */
  async saveIncome(args, context) {
    try {
      console.log('üíæ [INCOME] Salvando entrada com args:', args);
      
      const { amount, description, category, account_name, responsible, date } = args;
      
      // Validar campos obrigat√≥rios
      if (!amount || !description || !responsible) {
        return {
          success: false,
          message: 'Ops! Preciso do valor, descri√ß√£o e quem recebeu.'
        };
      }
      
      // Normalizar owner (mapear "eu" para nome do usu√°rio)
      let owner = responsible;
      let ownerNorm = this.normalizeText(owner);
      if (ownerNorm === 'eu' || ownerNorm.includes('eu')) {
        owner = context.userName || context.firstName || owner;
        ownerNorm = this.normalizeText(owner);
      }
      
      // Buscar cost_center_id
      let costCenterId = null;
      const isShared = ownerNorm.includes('compartilhado');
      
      if (!isShared && owner) {
        const { data: centers } = await supabase
          .from('cost_centers')
          .select('id, name')
          .eq('organization_id', context.organizationId);
        
        if (centers && centers.length) {
          const byNorm = new Map();
          for (const c of centers) byNorm.set(this.normalizeText(c.name), c);
          
          // Match exato normalizado
          const exact = byNorm.get(ownerNorm);
          if (exact) {
            costCenterId = exact.id;
            owner = exact.name;
          } else {
            // Match parcial (substring)
            let matches = centers.filter(c => {
              const n = this.normalizeText(c.name);
              return n.includes(ownerNorm) || ownerNorm.includes(n);
            });
            
            // Se usu√°rio passou apenas o primeiro nome
            if (!matches.length) {
              const firstToken = ownerNorm.split(/\s+/)[0];
              matches = centers.filter(c => {
                const tokens = this.normalizeText(c.name).split(/\s+/);
                return tokens[0] === firstToken;
              });
            }
            
            if (matches.length === 1) {
              costCenterId = matches[0].id;
              owner = matches[0].name;
            } else if (matches.length > 1) {
              // Desambigua√ß√£o necess√°ria
              const options = matches.map(m => m.name).join(', ');
              const firstName = this.getFirstName(context);
              const namePart = firstName ? ` ${firstName}` : '';
              
              const disambiguationMessages = [
                `Encontrei mais de um respons√°vel com esse nome${namePart}. Qual deles? ${options}`,
                `Tem mais de um ${owner} aqui${namePart}. Qual? ${options}`,
                `Preciso que voc√™ escolha${namePart}: ${options}`
              ];
              
              return {
                success: false,
                message: this.pickVariation(disambiguationMessages, owner)
              };
            }
          }
        }
      }
      
      // Se n√£o foi poss√≠vel determinar respons√°vel, perguntar
      if (!isShared && (!owner || !costCenterId)) {
        const firstName = this.getFirstName(context);
        const namePart = firstName ? ` ${firstName}` : '';
        
        const questions = [
          `Quem recebeu${namePart}?`,
          `Foi voc√™ ou algu√©m espec√≠fico${namePart}?`,
          `Me diz quem recebeu${namePart}?`
        ];
        
        return {
          success: false,
          message: this.pickVariation(questions, owner || 'responsavel')
        };
      }
      
      // Inferir categoria se n√£o informada
      let finalCategory = category;
      if (!finalCategory && description) {
        const descNorm = this.normalizeText(description);
        const categoryHints = [
          { keys: ['salario', 'sal√°rio', 'proventos'], target: 'Sal√°rio' },
          { keys: ['comissao', 'comiss√£o', 'comiss√µes'], target: 'Comiss√£o' },
          { keys: ['freelance', 'freela', 'projeto'], target: 'Freelance' },
          { keys: ['venda', 'vendas'], target: 'Venda' },
          { keys: ['bonus', 'b√¥nus', 'gratificacao', 'gratifica√ß√£o'], target: 'B√¥nus' },
          { keys: ['investimento', 'dividendo', 'juros'], target: 'Investimento' }
        ];
        
        for (const hint of categoryHints) {
          if (hint.keys.some(k => descNorm.includes(k))) {
            finalCategory = hint.target;
            break;
          }
        }
      }
      
      // Buscar bank_account_id (OBRIGAT√ìRIO para entradas)
      let bankAccountId = null;
      let finalAccountName = account_name;
      
      // Buscar todas as contas ativas da organiza√ß√£o
      const { data: accounts } = await supabase
        .from('bank_accounts')
        .select('id, name')
        .eq('organization_id', context.organizationId)
        .eq('is_active', true);
      
      if (!accounts || accounts.length === 0) {
        return {
          success: false,
          message: 'Ops! N√£o encontrei nenhuma conta banc√°ria cadastrada. Cadastre uma conta primeiro.'
        };
      }
      
      // Se account_name foi informado, buscar a conta espec√≠fica
      if (account_name) {
        const accountNorm = this.normalizeText(account_name);
        const byNorm = new Map();
        for (const a of accounts) byNorm.set(this.normalizeText(a.name), a);
        
        const found = byNorm.get(accountNorm);
        if (found) {
          bankAccountId = found.id;
          finalAccountName = found.name;
        } else {
          // Tentar match parcial
          const match = accounts.find(a => {
            const n = this.normalizeText(a.name);
            return n.includes(accountNorm) || accountNorm.includes(n);
          });
          
          if (match) {
            bankAccountId = match.id;
            finalAccountName = match.name;
          } else {
            // Conta n√£o encontrada - listar op√ß√µes
            const accountsList = accounts.map(a => a.name).join(', ');
            const firstName = this.getFirstName(context);
            const namePart = firstName ? ` ${firstName}` : '';
            
            return {
              success: false,
              message: `N√£o encontrei essa conta${namePart}. Dispon√≠veis: ${accountsList}. Qual conta?`
            };
          }
        }
      } else {
        // Se n√£o informou conta, PERGUNTAR (obrigat√≥rio)
        const accountsList = accounts.map(a => a.name).join(', ');
        const firstName = this.getFirstName(context);
        const namePart = firstName ? ` ${firstName}` : '';
        
        const accountQuestions = [
          `Qual conta adiciono${namePart}?`,
          `Em qual conta foi recebido${namePart}?`,
          `Qual conta${namePart}?`,
          `Me diz qual conta${namePart}?`
        ];
        
        return {
          success: false,
          message: `${this.pickVariation(accountQuestions, 'conta')}\n\nDispon√≠veis: ${accountsList}`
        };
      }
      
      // Normalizar m√©todo de recebimento (para incomes: cash, pix, deposit, bank_transfer, boleto, other)
      let paymentMethod = 'deposit'; // Default: dep√≥sito em conta
      
      // Se o usu√°rio mencionou o m√©todo de recebimento, normalizar
      if (args.payment_method) {
        const pmNorm = this.normalizeText(args.payment_method);
        if (pmNorm.includes('pix')) paymentMethod = 'pix';
        else if (pmNorm.includes('dinheir') || pmNorm.includes('cash') || pmNorm.includes('especie')) paymentMethod = 'cash';
        else if (pmNorm.includes('deposito') || pmNorm.includes('dep√≥sito')) paymentMethod = 'deposit';
        else if (pmNorm.includes('transfer') || pmNorm.includes('ted') || pmNorm.includes('doc')) paymentMethod = 'bank_transfer';
        else if (pmNorm.includes('boleto')) paymentMethod = 'boleto';
        else paymentMethod = 'other';
      } else {
        // Se n√£o informou e foi via conta banc√°ria, assumir dep√≥sito
        if (bankAccountId) {
          paymentMethod = 'deposit';
        }
      }
      
      // Preparar dados da entrada (bank_account_id e payment_method s√£o obrigat√≥rios)
      const incomeData = {
        amount: parseFloat(amount),
        description: description,
        date: date || new Date().toISOString().split('T')[0],
        category: finalCategory || null,
        cost_center_id: costCenterId,
        bank_account_id: bankAccountId, // ‚úÖ OBRIGAT√ìRIO
        payment_method: paymentMethod, // ‚úÖ M√©todo de recebimento (cash, pix, deposit, bank_transfer, boleto, other)
        organization_id: context.organizationId,
        user_id: context.userId,
        status: 'confirmed',
        is_shared: isShared || false,
        source: 'whatsapp'
      };
      
      console.log('üíæ [INCOME] Dados preparados:', incomeData);
      
      // Salvar entrada
      const { data, error } = await supabase
        .from('incomes')
        .insert(incomeData)
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå Erro ao salvar entrada:', error);
        throw error;
      }
      
      console.log('‚úÖ Entrada salva:', data.id);
      
      // Atualizar saldo da conta usando RPC (sempre, pois bank_account_id √© obrigat√≥rio)
      if (bankAccountId) {
        try {
          // Usar fun√ß√£o RPC para criar transa√ß√£o banc√°ria (atualiza saldo automaticamente via trigger)
          const { data: transactionData, error: transError } = await supabase.rpc('create_bank_transaction', {
            p_bank_account_id: bankAccountId,
            p_transaction_type: 'income_deposit',
            p_amount: parseFloat(amount),
            p_description: description,
            p_date: incomeData.date,
            p_organization_id: context.organizationId,
            p_user_id: context.userId,
            p_expense_id: null,
            p_bill_id: null,
            p_income_id: data.id,
            p_related_account_id: null
          });
          
          if (transError) {
            console.error('‚ö†Ô∏è Erro ao criar transa√ß√£o banc√°ria:', transError);
            // Se RPC falhar, tentar atualiza√ß√£o manual como fallback
            const { data: account } = await supabase
              .from('bank_accounts')
              .select('current_balance')
              .eq('id', bankAccountId)
              .single();
            
            if (account) {
              const currentBalance = parseFloat(account.current_balance) || 0;
              const newBalance = currentBalance + parseFloat(amount);
              
              await supabase
                .from('bank_accounts')
                .update({ current_balance: newBalance })
                .eq('id', bankAccountId);
              
              console.log('‚úÖ Saldo atualizado manualmente (fallback)');
            }
          } else {
            console.log('‚úÖ Transa√ß√£o banc√°ria criada e saldo atualizado via RPC:', transactionData);
          }
        } catch (accountError) {
          // Se erro na atualiza√ß√£o de conta, apenas logar (n√£o falhar o salvamento)
          console.error('‚ö†Ô∏è Erro ao atualizar saldo da conta:', accountError);
        }
      }
      
      // Formatar resposta
      const amountFormatted = Number(amount).toLocaleString('pt-BR', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      
      const dateObj = new Date(incomeData.date + 'T00:00:00');
      const isToday = dateObj.toDateString() === new Date().toDateString();
      const dateDisplay = isToday ? 'Hoje' : dateObj.toLocaleDateString('pt-BR');
      
      const greetings = [
        'Entrada registrada! ‚úÖ',
        'Receita anotada! ‚úÖ',
        'Pronto! ‚úÖ',
        'Beleza, anotei! ‚úÖ'
      ];
      
      const greeting = greetings[Math.floor(Math.random() * greetings.length)];
      
      let response = `${greeting}\nR$ ${amountFormatted} - ${description}`;
      
      if (finalCategory) {
        response += `\n${finalCategory}`;
      }
      
      if (finalAccountName) {
        response += `\n${finalAccountName}`;
      }
      
      response += `\n${owner}\n${dateDisplay}`;
      
      return {
        success: true,
        message: response,
        income_id: data.id
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao salvar entrada:', error);
      const firstName = this.getFirstName(context);
      const namePart = firstName ? ` ${firstName}` : '';
      
      const errorMessages = [
        `Ops${namePart}! Tive um problema ao registrar a entrada. üòÖ`,
        `Eita${namePart}, algo deu errado aqui. üòÖ`,
        `Poxa${namePart}, tive um erro. üòÖ`
      ];
      
      return {
        success: false,
        message: this.pickVariation(errorMessages, 'erro')
      };
    }
  }

  /**
   * Parsear e calcular data de vencimento
   * Aceita: YYYY-MM-DD, apenas dia (ex: "5"), ou formato relativo
   */
  parseDueDate(dateStr) {
    if (!dateStr) return null;
    
    console.log('üìÖ [PARSE_DUE_DATE] Input:', dateStr);
    
    // Tentar parse direto como YYYY-MM-DD
    if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
      // Extrair ano ANTES de fazer parse para comparar diretamente
      const parts = dateStr.split('-');
      const inputYear = parseInt(parts[0]);
      const inputMonth = parseInt(parts[1]);
      const inputDay = parseInt(parts[2]);
      
      const today = new Date();
      const currentYear = today.getFullYear();
      
      console.log(`üìÖ [PARSE_DUE_DATE] Input: ${dateStr}, inputYear=${inputYear}, currentYear=${currentYear}`);
      
      // Se o ano √© menor que o atual, SEMPRE recalcular (independente de diffDays)
      if (inputYear < currentYear) {
        console.warn(`‚ö†Ô∏è [PARSE_DUE_DATE] Ano incorreto detectado ANTES do parse: ${inputYear} < ${currentYear}`);
        console.warn('‚ö†Ô∏è [PARSE_DUE_DATE] Recalculando data com ano correto...');
        
        // Usar m√™s e dia do input, mas recalcular ano
        const currentDay = today.getDate();
        const currentMonth = today.getMonth() + 1; // JavaScript usa 0-11, converter para 1-12
          
        // Se o m√™s/dia j√° passou neste ano, usar pr√≥ximo ano
        // Comparar: se m√™s < m√™s atual OU (m√™s == m√™s atual E dia < dia atual)
        let targetYear = currentYear;
        if (inputMonth < currentMonth || (inputMonth === currentMonth && inputDay < currentDay)) {
          // Data j√° passou neste ano - usar pr√≥ximo ano
          targetYear = currentYear + 1;
          console.log(`üìÖ [PARSE_DUE_DATE] M√™s/dia j√° passou, usando pr√≥ximo ano: ${inputDay}/${inputMonth}/${targetYear}`);
        } else {
          // Data ainda n√£o passou neste ano
          console.log(`üìÖ [PARSE_DUE_DATE] M√™s/dia ainda n√£o passou, usando ano atual: ${inputDay}/${inputMonth}/${targetYear}`);
        }
        
        // Garantir que o dia existe no m√™s
        const daysInMonth = new Date(targetYear, inputMonth, 0).getDate();
        const finalDay = Math.min(inputDay, daysInMonth);
        
        const monthStr = String(inputMonth).padStart(2, '0');
        const dayStr = String(finalDay).padStart(2, '0');
        
        const result = `${targetYear}-${monthStr}-${dayStr}`;
        console.log(`‚úÖ [PARSE_DUE_DATE] Recalculado (corrigido): ${result}`);
        return result;
      }
      
      // Se chegou aqui, ano est√° correto ou igual ao atual
      // Validar se data n√£o est√° muito no passado (mais de 1 ano)
      const parsed = new Date(dateStr + 'T00:00:00');
      if (!isNaN(parsed.getTime())) {
        const todayOnly = new Date();
        todayOnly.setHours(0, 0, 0, 0);
        const parsedDateOnly = new Date(parsed);
        parsedDateOnly.setHours(0, 0, 0, 0);
        const diffDays = (todayOnly - parsedDateOnly) / (1000 * 60 * 60 * 24);
        
        if (diffDays > 365) {
          console.warn(`‚ö†Ô∏è [PARSE_DUE_DATE] Data muito no passado (${diffDays} dias), recalculando...`);
          // Recalcular similar ao caso anterior
          const currentDay = todayOnly.getDate();
          const currentMonth = todayOnly.getMonth() + 1;
          
          let targetYear2 = currentYear;
          if (inputMonth < currentMonth || (inputMonth === currentMonth && inputDay < currentDay)) {
            targetYear2 = currentYear + 1;
          }
          
          const daysInMonth2 = new Date(targetYear2, inputMonth, 0).getDate();
          const finalDay2 = Math.min(inputDay, daysInMonth2);
          
          const result2 = `${targetYear2}-${String(inputMonth).padStart(2, '0')}-${String(finalDay2).padStart(2, '0')}`;
          console.log(`‚úÖ [PARSE_DUE_DATE] Recalculado (diffDays): ${result2}`);
          return result2;
        }
        
        console.log('‚úÖ [PARSE_DUE_DATE] Data v√°lida:', dateStr);
        return dateStr;
      }
    }
    
    // Tentar extrair apenas o dia (ex: "5", "dia 5", "5 de novembro")
    const dayMatch = dateStr.match(/(\d{1,2})/);
    if (dayMatch) {
      const day = parseInt(dayMatch[1]);
      if (day >= 1 && day <= 31) {
        const today = new Date();
        const currentDay = today.getDate();
        const currentMonth = today.getMonth();
        const currentYear = today.getFullYear();
        
        console.log(`üìÖ [PARSE_DUE_DATE] Hoje: ${currentDay}/${currentMonth + 1}/${currentYear}, Dia solicitado: ${day}`);
        
        // Se o dia j√° passou neste m√™s, usar pr√≥ximo m√™s
        // Sen√£o, usar m√™s atual
        let targetMonth = currentMonth;
        let targetYear = currentYear;
        
        if (day < currentDay) {
          // Dia j√° passou - usar pr√≥ximo m√™s
          targetMonth = currentMonth + 1;
          if (targetMonth > 11) {
            targetMonth = 0;
            targetYear = currentYear + 1;
          }
          console.log(`üìÖ [PARSE_DUE_DATE] Dia j√° passou, usando pr√≥ximo m√™s: ${day}/${targetMonth + 1}/${targetYear}`);
        } else {
          console.log(`üìÖ [PARSE_DUE_DATE] Dia ainda n√£o passou, usando m√™s atual: ${day}/${targetMonth + 1}/${targetYear}`);
        }
        
        // Garantir que o dia existe no m√™s (ex: 31 de fevereiro ‚Üí 28/29)
        const daysInMonth = new Date(targetYear, targetMonth + 1, 0).getDate();
        const finalDay = Math.min(day, daysInMonth);
        
        const monthStr = String(targetMonth + 1).padStart(2, '0');
        const dayStr = String(finalDay).padStart(2, '0');
        
        const result = `${targetYear}-${monthStr}-${dayStr}`;
        console.log('‚úÖ [PARSE_DUE_DATE] Resultado:', result);
        return result;
      }
    }
    
    // Se n√£o conseguiu parsear, tentar Date nativo
    const parsed = new Date(dateStr);
    if (!isNaN(parsed.getTime())) {
      const year = parsed.getFullYear();
      const month = parsed.getMonth() + 1;
      const day = parsed.getDate();
      
      // Validar se n√£o est√° muito no passado OU se ano √© menor que atual
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const parsedDateOnly = new Date(parsed);
      parsedDateOnly.setHours(0, 0, 0, 0);
      
      const currentYear = today.getFullYear();
      const diffDays = (today - parsedDateOnly) / (1000 * 60 * 60 * 24);
      
      console.log(`üìÖ [PARSE_DUE_DATE] Date nativo: year=${year}, currentYear=${currentYear}, diffDays=${diffDays}`);
      
      if (year < currentYear || diffDays > 365) {
        console.warn(`‚ö†Ô∏è [PARSE_DUE_DATE] Date nativo retornou data incorreta (ano=${year}), recalculando...`);
        // Recalcular usando dia e m√™s mas com ano correto
        const currentDay = today.getDate();
        const currentMonth = today.getMonth() + 1;
        
        let targetMonth = month;
        let finalYear = currentYear;
        
        // Se m√™s/dia j√° passou, usar pr√≥ximo ano
        if (month < currentMonth || (month === currentMonth && day < currentDay)) {
          finalYear = currentYear + 1;
        }
        
        const daysInMonth = new Date(finalYear, month, 0).getDate();
        const finalDay = Math.min(day, daysInMonth);
        
        const result = `${finalYear}-${String(month).padStart(2, '0')}-${String(finalDay).padStart(2, '0')}`;
        console.log(`‚úÖ [PARSE_DUE_DATE] Recalculado (Date nativo): ${result}`);
        return result;
      }
      
      const result = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
      console.log('‚úÖ [PARSE_DUE_DATE] Resultado (Date nativo):', result);
      return result;
    }
    
    console.warn('‚ùå [PARSE_DUE_DATE] N√£o conseguiu parsear:', dateStr);
    return null;
  }

  /**
   * Salvar conta a pagar (bill)
   */
  async saveBill(args, context) {
    try {
      console.log('üíæ [BILL] Salvando conta a pagar com args:', JSON.stringify(args, null, 2));
      console.log('üíæ [BILL] due_date recebido do GPT:', args.due_date);
      
      const { amount, description, due_date, category, responsible, payment_method, card_name, is_recurring, recurrence_frequency } = args;
      
      // Validar campos obrigat√≥rios
      if (!amount || !description || !due_date) {
        return {
          success: false,
          message: 'Ops! Preciso do valor, descri√ß√£o e data de vencimento.'
        };
      }
      
      // Parsear e calcular data de vencimento
      console.log('üìÖ [BILL] Chamando parseDueDate com:', due_date);
      const parsedDueDate = this.parseDueDate(due_date);
      console.log('üìÖ [BILL] Data parseada:', parsedDueDate);
      
      if (!parsedDueDate) {
        return {
          success: false,
          message: 'N√£o consegui entender a data de vencimento. Pode informar no formato "dia 5" ou "YYYY-MM-DD"?'
        };
      }
      
      // Validar data de vencimento
      const dueDateObj = new Date(parsedDueDate + 'T00:00:00');
      if (isNaN(dueDateObj.getTime())) {
        return {
          success: false,
          message: 'A data de vencimento est√° inv√°lida.'
        };
      }
      
      console.log('‚úÖ [BILL] Data de vencimento v√°lida:', parsedDueDate);
      
      // Normalizar owner (mapear "eu" para nome do usu√°rio)
      let owner = responsible;
      let costCenterId = null;
      let isShared = false;
      
      if (responsible) {
        let ownerNorm = this.normalizeText(owner);
        if (ownerNorm === 'eu' || ownerNorm.includes('eu')) {
          owner = context.userName || context.firstName || owner;
          ownerNorm = this.normalizeText(owner);
        }
        
        // Verificar se √© compartilhado
        isShared = ownerNorm.includes('compartilhado');
        
        if (!isShared && owner) {
          const { data: centers } = await supabase
            .from('cost_centers')
            .select('id, name')
            .eq('organization_id', context.organizationId);
          
          if (centers && centers.length) {
            const byNorm = new Map();
            for (const c of centers) byNorm.set(this.normalizeText(c.name), c);
            
            // Match exato normalizado
            const exact = byNorm.get(ownerNorm);
            if (exact) {
              costCenterId = exact.id;
              owner = exact.name;
            } else {
              // Match parcial (substring)
              let matches = centers.filter(c => {
                const n = this.normalizeText(c.name);
                return n.includes(ownerNorm) || ownerNorm.includes(n);
              });
              
              // Se usu√°rio passou apenas o primeiro nome
              if (!matches.length) {
                const firstToken = ownerNorm.split(/\s+/)[0];
                matches = centers.filter(c => {
                  const tokens = this.normalizeText(c.name).split(/\s+/);
                  return tokens[0] === firstToken;
                });
              }
              
              if (matches.length === 1) {
                costCenterId = matches[0].id;
                owner = matches[0].name;
              } else if (matches.length > 1) {
                // Desambigua√ß√£o necess√°ria
                const options = matches.map(m => m.name).join(', ');
                const firstName = this.getFirstName(context);
                const namePart = firstName ? ` ${firstName}` : '';
                
                return {
                  success: false,
                  message: `Encontrei mais de um respons√°vel com esse nome${namePart}. Qual deles? ${options}`
                };
              }
            }
          }
        } else if (isShared) {
          owner = context.organizationName || 'Compartilhado';
        }
      } else {
        // Se n√£o informou respons√°vel, considerar compartilhado
        isShared = true;
        owner = context.organizationName || 'Compartilhado';
      }
      
      // ‚úÖ SEMPRE usar categoria "Contas" para contas a pagar (fixo)
      // Buscar categoria "Contas" nas categorias da organiza√ß√£o ou globais
      const normalize = (s) => (s || '')
        .toString()
        .trim()
        .toLowerCase()
        .normalize('NFD')
        .replace(/\p{Diacritic}+/gu, '');
      
      const [{ data: orgCats }, { data: globalCats }] = await Promise.all([
        supabase
          .from('budget_categories')
          .select('id, name')
          .eq('organization_id', context.organizationId)
          .or('type.eq.expense,type.eq.both'),
        supabase
          .from('budget_categories')
          .select('id, name')
          .is('organization_id', null)
          .or('type.eq.expense,type.eq.both')
      ]);
      
      const allCats = [...(orgCats || []), ...(globalCats || [])];
      const byNorm = new Map();
      for (const c of allCats) {
        byNorm.set(normalize(c.name), c);
      }
      
      // Buscar "Contas" como categoria padr√£o
      let categoryId = null;
      let categoryName = null;
      
      const contasNorm = normalize('Contas');
      const foundContas = byNorm.get(contasNorm);
      
      if (foundContas) {
        categoryId = foundContas.id;
        categoryName = foundContas.name;
        console.log('‚úÖ [BILL] Usando categoria "Contas" (padr√£o):', categoryName);
      } else {
        // Se n√£o encontrar "Contas", usar "Outros" como fallback
        const outrosNorm = normalize('Outros');
        const foundOutros = byNorm.get(outrosNorm);
        
        if (foundOutros) {
          categoryId = foundOutros.id;
          categoryName = foundOutros.name;
          console.log('‚ö†Ô∏è [BILL] Categoria "Contas" n√£o encontrada, usando "Outros":', categoryName);
        } else {
          console.warn('‚ùå [BILL] Nenhuma categoria padr√£o (Contas/Outros) encontrada');
          // Ainda assim tentar qualquer categoria dispon√≠vel como √∫ltimo recurso
          if (allCats.length > 0) {
            categoryId = allCats[0].id;
            categoryName = allCats[0].name;
            console.log('‚ö†Ô∏è [BILL] Usando primeira categoria dispon√≠vel:', categoryName);
          }
        }
      }
      
      // Garantir que sempre tenha categoria
      if (!categoryId) {
        return {
          success: false,
          message: 'Ops! N√£o encontrei nenhuma categoria no sistema. Cadastre uma categoria primeiro.'
        };
      }
      
      // Normalizar m√©todo de pagamento
      let finalPaymentMethod = null;
      let cardId = null;
      
      if (payment_method) {
        const pmNorm = this.normalizeText(payment_method);
        if (pmNorm.includes('credito') || pmNorm.includes('cr√©dito') || pmNorm.includes('cartao') || pmNorm.includes('cart√£o')) {
          finalPaymentMethod = 'credit_card';
          
          // Se for cr√©dito, buscar card_id
          if (card_name) {
            const { data: cards } = await supabase
              .from('cards')
              .select('id, name')
              .eq('organization_id', context.organizationId)
              .eq('is_active', true);
            
            if (cards && cards.length) {
              const cardNorm = this.normalizeText(card_name);
              const byNorm = new Map();
              for (const c of cards) byNorm.set(this.normalizeText(c.name), c);
              
              const found = byNorm.get(cardNorm);
              if (found) {
                cardId = found.id;
              } else {
                // Tentar match parcial
                const match = cards.find(c => {
                  const n = this.normalizeText(c.name);
                  return n.includes(cardNorm) || cardNorm.includes(n);
                });
                
                if (match) {
                  cardId = match.id;
                } else {
                  // Listar cart√µes dispon√≠veis
                  const cardsList = cards.map(c => c.name).join(', ');
                  const firstName = this.getFirstName(context);
                  const namePart = firstName ? ` ${firstName}` : '';
                  
                  return {
                    success: false,
                    message: `N√£o encontrei esse cart√£o${namePart}. Dispon√≠veis: ${cardsList}. Qual cart√£o?`
                  };
                }
              }
            } else {
              return {
                success: false,
                message: 'N√£o encontrei cart√µes cadastrados. Cadastre um cart√£o primeiro.'
              };
            }
          }
        } else if (pmNorm.includes('debito') || pmNorm.includes('d√©bito')) {
          finalPaymentMethod = 'debit_card';
        } else if (pmNorm.includes('pix')) {
          finalPaymentMethod = 'pix';
        } else if (pmNorm.includes('boleto')) {
          finalPaymentMethod = 'boleto';
        } else if (pmNorm.includes('transfer') || pmNorm.includes('ted') || pmNorm.includes('doc')) {
          finalPaymentMethod = 'bank_transfer';
        } else if (pmNorm.includes('dinheir') || pmNorm.includes('cash') || pmNorm.includes('especie')) {
          finalPaymentMethod = 'cash';
        } else {
          finalPaymentMethod = 'other';
        }
      }
      
      // Preparar dados da conta a pagar
      // SEMPRE for√ßar status 'pending' (GPT n√£o deve definir status)
      const billData = {
        description: this.capitalizeDescription(description),
        amount: parseFloat(amount),
        due_date: parsedDueDate,
        category_id: categoryId,
        cost_center_id: costCenterId,
        is_shared: isShared,
        payment_method: finalPaymentMethod,
        card_id: cardId,
        is_recurring: is_recurring || false,
        recurrence_frequency: (is_recurring && recurrence_frequency) ? recurrence_frequency : null,
        organization_id: context.organizationId,
        user_id: context.userId,
        status: 'pending' // ‚úÖ SEMPRE 'pending' ao criar conta (nunca 'paid')
      };
      
      console.log('üíæ [BILL] billData antes de salvar:', JSON.stringify(billData, null, 2));
      
      console.log('üíæ [BILL] Dados preparados:', billData);
      
      // Salvar conta a pagar
      const { data, error } = await supabase
        .from('bills')
        .insert(billData)
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå Erro ao salvar conta a pagar:', error);
        throw error;
      }
      
      console.log('‚úÖ Conta a pagar salva:', data.id);
      
      // Formatar resposta
      const amountFormatted = Number(amount).toLocaleString('pt-BR', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const dueDateOnly = new Date(dueDateObj);
      dueDateOnly.setHours(0, 0, 0, 0);
      
      const daysUntil = Math.ceil((dueDateOnly - today) / (1000 * 60 * 60 * 24));
      let dateDisplay = dueDateObj.toLocaleDateString('pt-BR');
      
      if (daysUntil === 0) {
        dateDisplay = 'Vence hoje';
      } else if (daysUntil === 1) {
        dateDisplay = 'Vence amanh√£';
      } else if (daysUntil < 0) {
        dateDisplay = `Venceu h√° ${Math.abs(daysUntil)} ${Math.abs(daysUntil) === 1 ? 'dia' : 'dias'}`;
      } else {
        dateDisplay = `Vence em ${daysUntil} ${daysUntil === 1 ? 'dia' : 'dias'}`;
      }
      
      const greetings = [
        'Conta registrada! ‚úÖ',
        'Conta anotada! ‚úÖ',
        'Pronto! ‚úÖ',
        'Beleza, anotei! ‚úÖ',
        'Anotado! ‚úÖ'
      ];
      
      const greeting = this.pickVariation(greetings, description);
      
      const confirmationParts = [];
      confirmationParts.push(`R$ ${amountFormatted} - ${description}`);
      
      if (categoryName) {
        confirmationParts.push(categoryName);
      }
      
      if (finalPaymentMethod) {
        const paymentLabels = {
          'credit_card': 'Cart√£o de Cr√©dito',
          'debit_card': 'Cart√£o de D√©bito',
          'pix': 'PIX',
          'boleto': 'Boleto',
          'bank_transfer': 'Transfer√™ncia',
          'cash': 'Dinheiro',
          'other': 'Outro'
        };
        confirmationParts.push(paymentLabels[finalPaymentMethod] || finalPaymentMethod);
      }
      
      confirmationParts.push(owner);
      confirmationParts.push(dateDisplay);
      
      if (is_recurring) {
        const freqLabels = {
          'monthly': 'Mensal',
          'weekly': 'Semanal',
          'yearly': 'Anual'
        };
        confirmationParts.push(`Recorrente: ${freqLabels[recurrence_frequency] || 'Mensal'}`);
      }
      
      const response = `${greeting}\n${confirmationParts.join('\n')}`;
      
      return {
        success: true,
        message: response,
        bill_id: data.id
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao salvar conta a pagar:', error);
      const firstName = this.getFirstName(context);
      const namePart = firstName ? ` ${firstName}` : '';
      
      const errorMessages = [
        `Ops${namePart}! Tive um problema ao registrar a conta. üòÖ`,
        `Eita${namePart}, algo deu errado aqui. üòÖ`,
        `Poxa${namePart}, tive um erro. üòÖ`
      ];
      
      return {
        success: false,
        message: this.pickVariation(errorMessages, 'erro')
      };
    }
  }

  /**
   * Obter resumo de despesas
   */
  async getExpensesSummary(args, context) {
    try {
      console.log('üìä [SUMMARY] Buscando resumo de despesas:', args);
      
      const { period, category } = args;
      
      if (!period) {
        return {
          success: false,
          message: 'Preciso saber o per√≠odo para buscar o resumo (hoje, esta semana, este m√™s, m√™s anterior)'
        };
      }
      
      // Calcular datas baseado no per√≠odo
      const today = new Date();
      let startDate, endDate;
      
      switch (period) {
        case 'hoje':
          startDate = new Date(today);
          endDate = new Date(today);
          break;
        case 'esta_semana':
          const dayOfWeek = today.getDay();
          startDate = new Date(today);
          startDate.setDate(today.getDate() - dayOfWeek);
          startDate.setHours(0, 0, 0, 0);
          endDate = new Date(today);
          endDate.setHours(23, 59, 59, 999);
          break;
        case 'este_mes':
          startDate = new Date(today.getFullYear(), today.getMonth(), 1);
          // Usar primeiro dia do pr√≥ximo m√™s para compara√ß√£o com '<' (igual ao frontend)
          endDate = new Date(today.getFullYear(), today.getMonth() + 1, 1);
          break;
        case 'mes_anterior':
          startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);
          endDate = new Date(today.getFullYear(), today.getMonth(), 0);
          endDate.setHours(23, 59, 59, 999);
          break;
        default:
          startDate = new Date(today.getFullYear(), today.getMonth(), 1);
          endDate = new Date(today);
      }
      
      // Construir query (usar mesmo filtro do frontend: confirmed, paid ou null)
      let query = supabase
        .from('expenses')
        .select('amount, category')
        .eq('organization_id', context.organizationId)
        .or('status.eq.confirmed,status.eq.paid,status.is.null')
        .gte('date', startDate.toISOString().split('T')[0]);
      
      // Para 'este_mes', usar '<' no endDate (primeiro dia do pr√≥ximo m√™s) para consist√™ncia com frontend
      // Para outros per√≠odos, usar '<='
      if (period === 'este_mes') {
        query = query.lt('date', endDate.toISOString().split('T')[0]);
      } else {
        query = query.lte('date', endDate.toISOString().split('T')[0]);
      }
      
      // Filtrar por categoria se fornecida
      if (category) {
        // Buscar categoria normalizada
        const { data: categories } = await supabase
          .from('budget_categories')
          .select('id, name')
          .eq('organization_id', context.organizationId);
        
        if (categories && categories.length) {
          const categoryNorm = this.normalizeText(category);
          const matchedCat = categories.find(c => {
            const catNorm = this.normalizeText(c.name);
            return catNorm === categoryNorm || catNorm.includes(categoryNorm) || categoryNorm.includes(catNorm);
          });
          
          if (matchedCat) {
            query = query.eq('category', matchedCat.name);
          } else {
            query = query.eq('category', category);
          }
        } else {
          query = query.eq('category', category);
        }
      }
      
      const { data: expenses, error } = await query;
      
      if (error) {
        console.error('‚ùå Erro ao buscar despesas:', error);
        throw error;
      }
      
      if (!expenses || expenses.length === 0) {
        const periodLabel = this.formatPeriod(period);
        return {
          success: true,
          message: `üí∞ Nenhuma despesa encontrada ${periodLabel.toLowerCase()}.`
        };
      }
      
      // Calcular total
      const total = expenses.reduce((sum, e) => sum + parseFloat(e.amount || 0), 0);
      const totalFormatted = total.toLocaleString('pt-BR', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      });
      
      // Formatar resposta
      let response = `üí∞ *Resumo de Despesas* (${this.formatPeriod(period)})\n\n`;
      
      if (category) {
        // Resumo de categoria espec√≠fica
        response += `*Total em ${category}:* R$ ${totalFormatted}\n`;
        response += `(${expenses.length} despesa${expenses.length !== 1 ? 's' : ''})`;
      } else {
        // Agrupar por categoria
        const byCategory = {};
        expenses.forEach(e => {
          const cat = e.category || 'Sem categoria';
          byCategory[cat] = (byCategory[cat] || 0) + parseFloat(e.amount || 0);
        });
        
        response += `*Total: R$ ${totalFormatted}*\n\n`;
        
        // Ordenar por valor (maior primeiro)
        const sorted = Object.entries(byCategory)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 10); // Top 10
        
        sorted.forEach(([cat, value]) => {
          const valueFormatted = value.toLocaleString('pt-BR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
          });
          const percent = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
          response += `‚Ä¢ ${cat}: R$ ${valueFormatted} (${percent}%)\n`;
        });
        
        response += `\n(${expenses.length} despesa${expenses.length !== 1 ? 's' : ''} no total)`;
      }
      
      return {
        success: true,
        message: response
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar resumo:', error);
      const firstName = this.getFirstName(context);
      const namePart = firstName ? ` ${firstName}` : '';
      
      return {
        success: false,
        message: `Ops${namePart}! Tive um problema ao buscar o resumo. üòÖ`
      };
    }
  }

  /**
   * Obter resumo por categoria
   */
  async getCategorySummary(args, context) {
    try {
      console.log('üìä [CATEGORY_SUMMARY] Buscando resumo por categoria:', args);
      
      const { category, period } = args;
      
      if (!category || !period) {
        return {
          success: false,
          message: 'Preciso da categoria e do per√≠odo para buscar o resumo'
        };
      }
      
      // Reutilizar l√≥gica de getExpensesSummary
      const summaryResult = await this.getExpensesSummary({ period, category }, context);
      
      if (!summaryResult.success) {
        return summaryResult;
      }
      
      // Personalizar mensagem para resumo por categoria
      let response = summaryResult.message;
      
      // Se a mensagem come√ßa com "Total em", personalizar
      if (response.includes(`*Total em ${category}:*`)) {
        response = response.replace(
          `*Total em ${category}:*`,
          `*Voc√™ gastou em ${category}:*`
        );
      }
      
      return {
        success: true,
        message: response
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar resumo por categoria:', error);
      const firstName = this.getFirstName(context);
      const namePart = firstName ? ` ${firstName}` : '';
      
      return {
        success: false,
        message: `Ops${namePart}! Tive um problema ao buscar o resumo. üòÖ`
      };
    }
  }

  /**
   * Consultar saldo de contas banc√°rias
   */
  async getAccountBalance(args, context) {
    try {
      console.log('üí∞ [BALANCE] Consultando saldo:', args);
      
      const { account_name } = args;
      
      // Buscar contas banc√°rias
      let query = supabase
        .from('bank_accounts')
        .select('id, name, bank, current_balance, account_type')
        .eq('organization_id', context.organizationId)
        .eq('is_active', true);
      
      // Se especificou conta, filtrar
      if (account_name) {
        const { data: accounts } = await supabase
          .from('bank_accounts')
          .select('id, name, bank')
          .eq('organization_id', context.organizationId)
          .eq('is_active', true);
        
        if (accounts && accounts.length) {
          const accountNorm = this.normalizeText(account_name);
          const matchedAccount = accounts.find(a => {
            const nameNorm = this.normalizeText(a.name);
            const bankNorm = this.normalizeText(a.bank || '');
            return nameNorm.includes(accountNorm) || accountNorm.includes(nameNorm) || 
                   bankNorm.includes(accountNorm) || accountNorm.includes(bankNorm);
          });
          
          if (matchedAccount) {
            query = query.eq('id', matchedAccount.id);
          } else {
            // Conta n√£o encontrada, retornar todas
            console.log('‚ö†Ô∏è Conta n√£o encontrada, retornando todas');
          }
        }
      }
      
      const { data: accounts, error } = await query.order('name');
      
      if (error) {
        console.error('‚ùå Erro ao buscar contas:', error);
        throw error;
      }
      
      if (!accounts || accounts.length === 0) {
        return {
          success: true,
          message: 'üí∞ Nenhuma conta banc√°ria cadastrada.'
        };
      }
      
      // Formatar resposta
      let response = 'üí∞ *Saldo das Contas*\n\n';
      
      if (accounts.length === 1) {
        // Uma conta espec√≠fica
        const account = accounts[0];
        const balance = parseFloat(account.current_balance || 0);
        const balanceFormatted = balance.toLocaleString('pt-BR', {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        });
        const accountTypeLabel = account.account_type === 'checking' ? 'Conta Corrente' : 'Poupan√ßa';
        
        response += `*${account.name}*\n`;
        if (account.bank) {
          response += `${account.bank} - `;
        }
        response += `${accountTypeLabel}\n`;
        response += `Saldo: *R$ ${balanceFormatted}*`;
      } else {
        // M√∫ltiplas contas
        let total = 0;
        
        accounts.forEach(account => {
          const balance = parseFloat(account.current_balance || 0);
          total += balance;
          const balanceFormatted = balance.toLocaleString('pt-BR', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
          });
          const accountTypeLabel = account.account_type === 'checking' ? 'CC' : 'PP';
          const bankPart = account.bank ? ` (${account.bank})` : '';
          
          response += `‚Ä¢ ${account.name}${bankPart} ${accountTypeLabel}: R$ ${balanceFormatted}\n`;
        });
        
        const totalFormatted = total.toLocaleString('pt-BR', {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        });
        
        response += `\n*Total: R$ ${totalFormatted}*`;
      }
      
      return {
        success: true,
        message: response
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao consultar saldo:', error);
      const firstName = this.getFirstName(context);
      const namePart = firstName ? ` ${firstName}` : '';
      
      return {
        success: false,
        message: `Ops${namePart}! Tive um problema ao consultar o saldo. üòÖ`
      };
    }
  }

  /**
   * Formatar per√≠odo para exibi√ß√£o
   */
  formatPeriod(period) {
    const map = {
      'hoje': 'Hoje',
      'esta_semana': 'Esta Semana',
      'este_mes': 'Este M√™s',
      'mes_anterior': 'M√™s Anterior'
    };
    return map[period] || period;
  }

  /**
   * Processar mensagem do usu√°rio (m√©todo principal)
   */
  async processMessage(message, userId, userName, userPhone, context = {}) {
    try {
      console.log(`üì® [ZUL] Processando mensagem de ${userName} (${userId})`);
      console.log(`üì® [ZUL] Mensagem: "${message}"`);
      console.log(`üì® [ZUL] Context recebido:`, JSON.stringify(context, null, 2));
      
      // Se for do chat web (sem userPhone), usar vers√£o web
      if (!userPhone) {
        console.log('üíª [ZUL] Chat web detectado - usando assistente financeiro geral');
        const response = await this.sendWebChatMessage(
          userId, 
          message, 
          { userName, ...context }
        );
        
        return {
          message: response,
          threadId: null
        };
      }
      
      // Se for WhatsApp (com userPhone), usar m√©todo conversacional original
      console.log('üì± [ZUL] WhatsApp detectado - usando registrador de despesas');
      const response = await this.sendConversationalMessage(
        userId, 
        message, 
        { userName, organizationId: context.organizationId, ...context }, 
        userPhone
      );
      
      return {
        message: response,
        threadId: null // GPT-4 n√£o usa threads
      };
      
    } catch (error) {
      console.error('‚ùå [ZUL] Erro ao processar mensagem:', error);
      throw error;
    }
  }

  /**
   * Enviar mensagem para chat web (assistente financeiro geral)
   */
  async sendWebChatMessage(userId, userMessage, context = {}) {
    return await this.webChat.sendWebChatMessage(userId, userMessage, context);
  }
}


export default ZulAssistant;

