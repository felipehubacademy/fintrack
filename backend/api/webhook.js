import dotenv from 'dotenv';
import { parseButtonReply, sendConfirmationMessage } from '../services/whatsapp.js';
import TransactionService from '../services/transactionService.js';

dotenv.config();

const transactionService = new TransactionService();

/**
 * Vercel Serverless Function for WhatsApp Webhook
 * Updated: 2025-10-09 21:00 with template confirmation
 */
export default function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'GET') {
    // Webhook verification
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];

    const VERIFY_TOKEN = process.env.WHATSAPP_VERIFY_TOKEN || 'fintrack_whatsapp_2024';

    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
      console.log('‚úÖ Webhook verified');
      return res.status(200).send(challenge);
    } else {
      console.log('‚ùå Webhook verification failed');
      return res.status(403).send('Forbidden');
    }
  }

  if (req.method === 'POST') {
    // Webhook event handler
    const body = req.body;
    console.log('üì© Received webhook:', JSON.stringify(body, null, 2));
    
    // Process webhook data BEFORE responding (Vercel kills connection after response!)
    processWebhookAsync(body)
      .then(() => {
        console.log('‚úÖ Webhook processed successfully');
        res.status(200).send('OK');
      })
      .catch(error => {
        console.error('‚ùå Error processing webhook:', error);
        res.status(200).send('OK'); // Still respond OK to avoid retries
      });
  } else {
    res.status(405).send('Method Not Allowed');
  }
}

/**
 * Process webhook asynchronously
 */
async function processWebhookAsync(body) {
  try {
    console.log('üîÑ Starting processWebhookAsync...');
    
    const buttonReply = parseButtonReply(body);
    
    if (!buttonReply || !buttonReply.owner) {
      console.log('‚ö†Ô∏è No valid button reply found');
      return;
    }

    console.log(`üîò Button clicked: ${buttonReply.buttonText} ‚Üí Owner: ${buttonReply.owner}`);
    console.log(`üìß Message ID: ${buttonReply.messageId}`);
    
    console.log('üîç Buscando transa√ß√£o no Supabase...');
    console.log(`   Message ID para buscar: ${buttonReply.messageId}`);
    
    // Buscar transa√ß√£o real no Supabase
    const transaction = await transactionService.getTransactionByWhatsAppId(buttonReply.messageId);
    
    if (!transaction) {
      console.log('‚ö†Ô∏è Transa√ß√£o n√£o encontrada para esse Message ID');
      return;
    }

    console.log(`üí∞ Transa√ß√£o encontrada: ${transaction.description} - R$ ${transaction.amount}`);
    
    // Confirmar transa√ß√£o no Supabase
    console.log('üíæ Confirmando transa√ß√£o no Supabase...');
    const confirmedTransaction = await transactionService.confirmTransaction(
      transaction.id,
      buttonReply.owner
    );
    
    console.log('‚úÖ Transa√ß√£o confirmada no Supabase!');
    console.log('üìä Calculando totais do m√™s...');
    
    // Calcular totais reais do m√™s
    const monthlyTotal = await transactionService.getMonthlyTotal(buttonReply.owner);
    
    console.log(`üí∞ Totais calculados: ${JSON.stringify(monthlyTotal)}`);
    console.log('üì± Enviando confirma√ß√£o WhatsApp...');
    
    // Enviar mensagem de confirma√ß√£o com timeout
    try {
      const confirmPromise = sendConfirmationMessage(buttonReply.owner, confirmedTransaction, monthlyTotal);
      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('WhatsApp confirmation timeout (8s)')), 8000)
      );
      
      await Promise.race([confirmPromise, timeoutPromise]);
      console.log(`‚úÖ Confirma√ß√£o enviada com sucesso!`);
    } catch (whatsappError) {
      console.error('‚ùå ERRO ao enviar confirma√ß√£o WhatsApp:', whatsappError.message);
      console.error('Stack:', whatsappError.stack);
      // N√£o lan√ßar erro - j√° processamos a transa√ß√£o
    }
    
    console.log(`‚úÖ Transa√ß√£o processada com sucesso para ${buttonReply.owner}`);
    
  } catch (error) {
    console.error('‚ùå Error in processWebhookAsync:', error);
    console.error('Stack trace:', error.stack);
    throw error;
  }
}

