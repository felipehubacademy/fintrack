import OpenAI from 'openai';
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import ZulWebChat from './zulWebChat.js';

dotenv.config();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
);

/**
 * ZUL - Assistente Financeiro usando GPT Assistant API
 * 
 * Personalidade: S√°bio Jovem - calmo, claro, curioso e inspirador
 * Tom: Pr√≥ximo, pessoal e respeitoso (muito brasileiro!)
 */
// Cache global para threads (persiste entre requisi√ß√µes no mesmo processo)
const threadCache = new Map(); // userId -> { threadId, lastUsed, userName, userPhone }
const THREAD_CACHE_EXPIRY = 30 * 60 * 1000; // 30 minutos (apenas para limpar cache em mem√≥ria)

class ZulAssistant {
  constructor() {
    this.assistantId = null;
    this.webChat = new ZulWebChat();
  }

  // Normaliza√ß√£o global: min√∫sculas e sem acentos
  normalizeText(str) {
    return (str || '')
      .toString()
      .trim()
      .toLowerCase()
      .normalize('NFD')
      .replace(/\p{Diacritic}+/gu, '');
  }

  // Extrair n√∫cleo descritivo (remove verbos/artigos/preposi√ß√µes comuns)
  extractCoreDescription(text) {
    if (!text) return '';
    const noAccent = this.normalizeText(text);
    // Remover pontua√ß√£o leve
    const cleaned = noAccent.replace(/[.,!?;:]/g, ' ');
    const stopwords = new Set([
      'comprei','paguei','gastei','foi','deu','peguei','compre','comprar','pagando','pagamento',
      'um','uma','uns','umas','o','a','os','as',
      'no','na','nos','nas','num','numa','em','de','do','da','dos','das','para','pra','pro','pela','pelo','por','ao','√†','aos','√†s'
    ]);
    const tokens = cleaned.split(/\s+/).filter(Boolean).filter(t => !stopwords.has(t));
    if (tokens.length === 0) return text.trim();
    // Retornar at√© 3 palavras significativas
    return tokens.slice(0, 3).join(' ');
  }

  /**
   * Escolher varia√ß√£o aleat√≥ria de forma mais determin√≠stica e variada
   * Usa timestamp + string para criar um "seed" variado a cada chamada
   */
  pickVariation(variations, seed = null) {
    if (!variations || variations.length === 0) return '';
    if (variations.length === 1) return variations[0];
    
    // Usar timestamp + seed para criar um √≠ndice mais variado
    const timestamp = Date.now();
    const seedValue = seed ? String(seed).split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) : 0;
    const random = ((timestamp % 1000) + seedValue) % variations.length;
    
    return variations[random];
  }

  /**
   * Obter primeiro nome do usu√°rio do contexto
   */
  getFirstName(context) {
    if (!context || !context.userName) return '';
    return context.userName.split(' ')[0] || '';
  }

  /**
   * Obter o Assistant ZUL (usando ID fixo da env var)
   */
  async getOrCreateAssistant() {
    // Se j√° temos o ID em cache, retornar
    if (this.assistantId) {
      return this.assistantId;
    }

    try {
      // PRIORIDADE 1: Usar ID fixo da vari√°vel de ambiente
      if (process.env.OPENAI_ASSISTANT_ID) {
        console.log('‚úÖ Usando Assistant ID da env var:', process.env.OPENAI_ASSISTANT_ID);
        this.assistantId = process.env.OPENAI_ASSISTANT_ID;
        return this.assistantId;
      }

      console.log('‚ö†Ô∏è OPENAI_ASSISTANT_ID n√£o configurado, tentando criar/recuperar dinamicamente...');

      // Tentar recuperar assistant existente pelo nome
      const assistants = await openai.beta.assistants.list();
      const existingAssistant = assistants.data.find(a => a.name === 'ZUL - MeuAzul√£o');

      if (existingAssistant) {
        console.log('‚úÖ Assistant ZUL encontrado:', existingAssistant.id);
        this.assistantId = existingAssistant.id;
        return this.assistantId;
      }

      // Criar novo assistant
      console.log('üî® Criando novo Assistant ZUL...');
      const assistant = await openai.beta.assistants.create({
        name: 'ZUL - MeuAzul√£o',
        instructions: this.getInstructions(),
        model: 'gpt-4o-mini',
        tools: [
          {
            type: 'function',
            function: {
              name: 'validate_payment_method',
              description: 'Validar se o m√©todo de pagamento informado pelo usu√°rio √© v√°lido',
              parameters: {
                type: 'object',
                properties: {
                  user_input: {
                    type: 'string',
                    description: 'O que o usu√°rio digitou (ex: "d√©bito", "cr√©dito", "pix", "dinheiro")'
                  }
                },
                required: ['user_input']
              }
            }
          },
          {
            type: 'function',
            function: {
              name: 'validate_card',
              description: 'Validar se o cart√£o e parcelas informados s√£o v√°lidos',
              parameters: {
                type: 'object',
                properties: {
                  card_name: {
                    type: 'string',
                    description: 'Nome do cart√£o informado pelo usu√°rio'
                  },
                  installments: {
                    type: 'number',
                    description: 'N√∫mero de parcelas (1 para √† vista)'
                  },
                  available_cards: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Lista de cart√µes dispon√≠veis para o usu√°rio'
                  }
                },
                required: ['card_name', 'installments', 'available_cards']
              }
            }
          },
          {
            type: 'function',
            function: {
              name: 'validate_responsible',
              description: 'Validar se o respons√°vel informado existe',
              parameters: {
                type: 'object',
                properties: {
                  responsible_name: {
                    type: 'string',
                    description: 'Nome do respons√°vel informado pelo usu√°rio'
                  },
                  available_responsibles: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Lista de respons√°veis dispon√≠veis (cost centers + Compartilhado)'
                  }
                },
                required: ['responsible_name', 'available_responsibles']
              }
            }
          },
          {
            type: 'function',
            function: {
              name: 'save_expense',
              description: 'Salvar a despesa no banco de dados quando todas as informa√ß√µes estiverem completas e validadas',
              parameters: {
                type: 'object',
                properties: {
                  amount: {
                    type: 'number',
                    description: 'Valor da despesa em reais'
                  },
                  description: {
                    type: 'string',
                    description: 'Descri√ß√£o da despesa (ex: mercado, farm√°cia, gasolina)'
                  },
                  payment_method: {
                    type: 'string',
                    enum: ['credit_card', 'debit_card', 'pix', 'cash', 'bank_transfer', 'boleto', 'other'],
                    description: 'M√©todo de pagamento validado'
                  },
                  responsible: {
                    type: 'string',
                    description: 'Nome do respons√°vel validado'
                  },
                  card_name: {
                    type: 'string',
                    description: 'Nome do cart√£o (apenas se payment_method for credit_card)'
                  },
                  installments: {
                    type: 'number',
                    description: 'N√∫mero de parcelas (apenas se payment_method for credit_card)'
                  },
                  category: {
                    type: 'string',
                    description: 'Categoria da despesa identificada automaticamente'
                  }
                },
                required: ['amount', 'description', 'payment_method', 'responsible']
              }
            }
          }
        ]
      });

      console.log('‚úÖ Assistant ZUL criado:', assistant.id);
      this.assistantId = assistant.id;
      return this.assistantId;

    } catch (error) {
      console.error('‚ùå Erro ao criar/recuperar Assistant:', error);
      throw error;
    }
  }

  /**
   * Instru√ß√µes do Assistant ZUL
   */
  getInstructions() {
    return `Voc√™ √© o ZUL, assistente financeiro do MeuAzul√£o. Converse por WhatsApp em portugu√™s brasileiro de forma NATURAL e VARIADA.

PERSONALIDADE CORE:
Voc√™ √© s√°bio, sereno e genuinamente prestativo. Fale como um amigo inteligente ajudando com finan√ßas.

REGRAS CR√çTICAS:
1. VARIE RADICALMENTE suas respostas - cada conversa deve ter estilo DIFERENTE (direto vs casual vs formal)
2. Use nome do usu√°rio APENAS quando natural (n√£o force em todas)
3. CONCISO - 1 linha apenas, m√°ximo 2 em raros casos
4. MANTENHA CONTEXTO - NUNCA repita perguntas j√° respondidas
5. ZERO emojis nas perguntas, apenas confirma√ß√£o final
6. Salve AUTO quando tiver: valor, descri√ß√£o, pagamento, respons√°vel
7. ALEATORIZE completamente: √†s vezes pergunta longa, √†s vezes 1 palavra, √†s vezes com contexto, √†s vezes seco

COMO VARIAR (exemplos de DIFERENTES estilos):

Estilo 1 - Direto:
User: 100 no mercado
ZUL: Como pagou?
User: PIX
ZUL: Quem?
User: Eu
ZUL: [save_expense] Salvei. R$ 100 no mercado, PIX. üõí

Estilo 2 - Amig√°vel:
User: 50 na farm√°cia
ZUL: Ah, como voc√™ pagou essa?
User: D√©bito
ZUL: Foi voc√™ ou outra pessoa?
User: Let√≠cia
ZUL: [save_expense] Pronto, Let√≠cia! R$ 50 na farm√°cia. üíä

Estilo 3 - Contextual:
User: 200 no ventilador
ZUL: Qual forma de pagamento?
User: Cr√©dito
ZUL: Cart√£o?
User: Latam
ZUL: Parcelas?
User: 2x
ZUL: Respons√°vel?
User: Felipe
ZUL: [save_expense] Anotado! R$ 200, Latam 2x, Felipe. üåÄ

Estilo 4 - Casual:
User: Gastei 80 no posto
ZUL: Pagou como?
User: Dinheiro
ZUL: Quem pagou?
User: Compartilhado
ZUL: [save_expense] Ok! R$ 80 gasolina, compartilhado. ‚õΩ

IMPORTANTE:
- Se usu√°rio der m√∫ltiplas infos juntas (ex: "cr√©dito latam 5x"), EXTRAIA TUDO, n√£o pergunte de novo
- Se usu√°rio disser "eu mesmo", mapeie para o nome dele
- NUNCA pergunte 2x a mesma coisa
- Adapte seu tom: √†s vezes formal, √†s vezes casual, √†s vezes ultra-direto
- Coment√°rios contextuais OPCIONAIS ap√≥s salvar

FUN√á√ïES:
- validate_payment_method
- validate_card
- validate_responsible
- save_expense (chame quando tiver tudo)

Seja IMPREVIS√çVEL e NATURAL como o ChatGPT √©. Cada conversa deve parecer √∫nica.`;
  }

  /**
   * Obter ou criar thread para um usu√°rio
   * MELHORADO: Sempre busca do banco primeiro, cache apenas para performance
   */
  async getOrCreateThread(userId, userPhone) {
    const now = Date.now();
    
    // 1. SEMPRE buscar do banco primeiro (robustez em cold starts)
    console.log(`üîç Buscando thread no banco para ${userId}...`);
    const savedThread = await this.loadThreadFromDB(userPhone);
    
    if (savedThread && savedThread.threadId) {
      // Validar que thread ainda existe no OpenAI
      const isValid = await this.validateThread(savedThread.threadId);
      
      if (isValid) {
        console.log(`‚úÖ Thread v√°lida recuperada do banco: ${savedThread.threadId}`);
        // Preencher cache para performance
        threadCache.set(userId, {
          threadId: savedThread.threadId,
          lastUsed: now,
          userName: savedThread.userName,
          userPhone: userPhone
        });
        return savedThread.threadId;
      } else {
        console.log(`‚ö†Ô∏è Thread inv√°lida encontrada, criando nova...`);
      }
    }

    // 2. Criar nova thread
    try {
      console.log(`üÜï Criando nova thread para ${userId}...`);
      const thread = await openai.beta.threads.create();
      
      // Salvar no cache
      threadCache.set(userId, {
        threadId: thread.id,
        lastUsed: now,
        userPhone: userPhone
      });
      
      console.log(`‚úÖ Nova thread criada: ${userId} -> ${thread.id}`);
      return thread.id;
    } catch (error) {
      console.error('‚ùå Erro ao criar thread:', error);
      throw error;
    }
  }

  /**
   * Validar se thread ainda existe no OpenAI
   */
  async validateThread(threadId) {
    try {
      const thread = await openai.beta.threads.retrieve(threadId);
      return !!thread;
    } catch (error) {
      console.error('‚ùå Thread inv√°lida:', error.message);
      return false;
    }
  }

  /**
   * Carregar thread do banco de dados
   */
  async loadThreadFromDB(userPhone) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      const { data, error } = await supabase
        .from('conversation_state')
        .select('*')
        .eq('user_phone', normalizedPhone)
        .neq('state', 'idle')
        .single();

      if (error || !data) {
        return null;
      }

      const threadId = data.temp_data?.assistant_thread_id;
      if (!threadId) {
        return null;
      }

      console.log(`üíæ Thread recuperada do banco para ${normalizedPhone}`);
      return {
        threadId,
        userName: data.temp_data?.user_name,
        conversationData: data.temp_data
      };
    } catch (error) {
      console.error('‚ùå Erro ao carregar thread do banco:', error);
      return null;
    }
  }

  /**
   * Normalizar telefone (sempre sem +)
   */
  normalizePhone(phone) {
    if (!phone) return null;
    const cleanPhone = String(phone).replace(/\D/g, ''); // Remove n√£o-d√≠gitos
    return cleanPhone; // Sempre sem + (WhatsApp n√£o usa)
  }

  /**
   * Salvar thread no banco de dados
   */
  async saveThreadToDB(userPhone, threadId, state = 'awaiting_payment_method', extraData = {}) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      const { error } = await supabase
        .from('conversation_state')
        .upsert({
          user_phone: normalizedPhone,
          state: state,
          temp_data: {
            assistant_thread_id: threadId,
            ...extraData
          },
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'user_phone'
        });

      if (error) {
        console.error('‚ùå Erro ao salvar thread no banco:', error);
      } else {
        console.log(`üíæ Thread salva no banco: ${normalizedPhone} -> ${threadId}`);
      }
    } catch (error) {
      console.error('‚ùå Erro ao salvar thread:', error);
    }
  }

  /**
   * Limpar thread do usu√°rio (ap√≥s finalizar conversa com sucesso)
   */
  async clearThread(userId, userPhone) {
    // Limpar do cache
    if (threadCache.has(userId)) {
      console.log(`üóëÔ∏è Thread removida do cache: ${userId}`);
      threadCache.delete(userId);
    }

    // Limpar do banco (marcar como idle)
    if (userPhone) {
      try {
        const normalizedPhone = this.normalizePhone(userPhone);
        
        await supabase
          .from('conversation_state')
          .update({ 
            state: 'idle',
            temp_data: {}
          })
          .eq('user_phone', normalizedPhone);
        console.log(`üíæ Thread limpa no banco: ${normalizedPhone}`);
      } catch (error) {
        console.error('‚ùå Erro ao limpar thread do banco:', error);
      }
    }
  }

  /**
   * Enviar mensagem conversacional usando GPT-4 Chat Completion (N√ÉO Assistant API)
   */
  async sendConversationalMessage(userId, userMessage, context = {}, userPhone) {
    // Garantir que context tem saveExpense
    if (!context.saveExpense) {
      console.log('‚ö†Ô∏è Context sem saveExpense, adicionando implementa√ß√£o completa');
      context.saveExpense = async (args) => {
        console.log('üíæ [SAVE] Salvando despesa com args:', args);
        
        try {
          // Normalizar payment_method (case/acento) + sin√¥nimos
          const nm = this.normalizeText(args.payment_method);
          let paymentMethod = 'other';
          if (nm.includes('pix')) paymentMethod = 'pix';
          else if (nm.includes('dinheir') || nm.includes('cash') || nm.includes('especie')) paymentMethod = 'cash';
          else if (nm.includes('deb')) paymentMethod = 'debit_card';
          else if (nm.includes('cred')) paymentMethod = 'credit_card';
          else if (nm.includes('boleto')) paymentMethod = 'boleto';
          else if (nm.includes('transfer')) paymentMethod = 'bank_transfer';
          
          // Extrair valor
          const amount = parseFloat(args.amount);
          
          // Determinar owner (se "eu", usar nome do contexto). N√£o fazer fallback silencioso.
          let owner = args.responsible;
          let ownerNorm = this.normalizeText(owner);
          if (ownerNorm === 'eu' || ownerNorm.includes('eu')) {
            owner = context.userName || context.firstName || owner;
            // Recalcular normalizado ap√≥s mapear "eu" para o nome do usu√°rio
            ownerNorm = this.normalizeText(owner);
          }
          
          // Buscar cost_center_id se owner n√£o for "Compartilhado"  
          let costCenterId = null;
          const isShared = ownerNorm.includes('compartilhado');

          if (!isShared && owner) {
            // Matching normalizado (case/acento) com suporte a primeiro nome e desambigua√ß√£o
            const { data: centers } = await supabase
              .from('cost_centers')
              .select('id, name')
              .eq('organization_id', context.organizationId);

            if (centers && centers.length) {
              const byNorm = new Map();
              for (const c of centers) byNorm.set(this.normalizeText(c.name), c);

              // 1) Match exato normalizado
              const exact = byNorm.get(ownerNorm);
              if (exact) {
                costCenterId = exact.id;
                owner = exact.name; // padroniza capitaliza√ß√£o
              } else {
                // 2) Match parcial (substring)
                let matches = centers.filter(c => {
                  const n = this.normalizeText(c.name);
                  return n.includes(ownerNorm) || ownerNorm.includes(n);
                });

                // 3) Se usu√°rio passou apenas o primeiro nome, tentar por primeiro token
                if (!matches.length) {
                  const firstToken = ownerNorm.split(/\s+/)[0];
                  matches = centers.filter(c => {
                    const tokens = this.normalizeText(c.name).split(/\s+/);
                    return tokens[0] === firstToken; // primeiro nome igual
                  });
                }

                if (matches.length === 1) {
                  costCenterId = matches[0].id;
                  owner = matches[0].name;
                } else if (matches.length > 1) {
                  const options = matches.map(m => m.name).join(', ');
                  const firstName = this.getFirstName(context);
                  const namePart = firstName ? ` ${firstName}` : '';
                  
                  const disambiguationMessages = [
                    `Encontrei mais de um respons√°vel com esse primeiro nome${namePart}. Qual deles? ${options}`,
                    `Tem mais de um ${owner} aqui${namePart}. Qual? ${options}`,
                    `Achei v√°rios com esse nome${namePart}. Qual foi? ${options}`,
                    `Qual desses${namePart}? ${options}`,
                    `Tem mais de um com esse nome${namePart}. Qual voc√™ quer? ${options}`,
                    `Preciso que voc√™ escolha${namePart}: ${options}`,
                    `Qual desses foi${namePart}? ${options}`,
                    `Tem v√°rios com esse nome${namePart}. Qual? ${options}`
                  ];
                  return {
                    success: false,
                    message: this.pickVariation(disambiguationMessages, owner)
                  };
                }
              }
            }
          }

          // Se n√£o foi poss√≠vel determinar respons√°vel/centro, pedir explicitamente
          if (!isShared && (!owner || !costCenterId)) {
            const firstName = this.getFirstName(context);
            const namePart = firstName ? ` ${firstName}` : '';
            
            const questions = [
              `Quem pagou${namePart}?`,
              `Foi voc√™ ou algu√©m espec√≠fico${namePart}?`,
              `Me diz quem pagou${namePart}?`,
              `Quem foi o respons√°vel${namePart}?`,
              `Quem pagou essa${namePart}?`,
              `Foi voc√™${namePart}?`,
              `Me conta quem pagou${namePart}?`,
              `Quem foi${namePart}?`,
              `Preciso saber quem pagou${namePart}`,
              `Quem arcou com essa${namePart}?`
            ];
            return {
              success: false,
              message: this.pickVariation(questions, owner || 'responsavel')
            };
          }
          
          // Normalizar/limpar descri√ß√£o para salvar e inferir
          if (args.description) {
            const core = this.extractCoreDescription(args.description);
            if (core) {
              args.description = core;
            }
          }

          // Se categoria n√£o vier, tentar inferir pela descri√ß√£o (sin√¥nimos/keywords)
          if (!args.category && args.description) {
            const norm = (s) => (s || '').toString().toLowerCase();
            const d = norm(args.description);
            const catHints = [
              // Casa (supermercados, mercado livre, eletrodom√©sticos, etc)
              { keys: ['mercado', 'supermercado', 'super', 'hiper', 'atacado', 'atacarejo', 'mercadolivre', 'magalu', 'amazon', 'casas bahia', 'tokstok', 'leroy', 'decoracao', 'decora√ß√£o', 'limpeza', 'material limpeza'], target: 'Casa' },
              // Eletrodom√©sticos/Eletroport√°teis ‚Üí Casa
              { keys: ['ventilador', 'ar condicionado', 'microondas', 'micro-ondas', 'geladeira', 'freezer', 'liquidificador', 'batedeira', 'cafeteira', 'aspirador', 'ferro', 'maquina lavar', 'fogao', 'fog√£o', 'forno'], target: 'Casa' },
              // Eletr√¥nicos de uso dom√©stico ‚Üí Casa
              { keys: ['tv', 'televisao', 'televis√£o', 'som', 'home theater', 'notebook', 'tablet', 'monitor', 'mouse', 'teclado'], target: 'Casa' },
              // Alimenta√ß√£o (padarias, restaurantes, delivery, etc)
              { keys: ['padaria', 'padarias', 'restaurante', 'lanche', 'lanches', 'pizza', 'ifood', 'ubereats', 'rappi', 'sushi', 'a√ßai', 'acai', 'bar', 'cafeteria', 'cafe', 'almo√ßo', 'almoco', 'jantar', 'delivery', 'pedido', 'comida', 'esfiha', 'hamburguer', 'hamb√∫rguer', 'hot dog'], target: 'Alimenta√ß√£o' },
              // Transporte
              { keys: ['posto', 'gasolina', 'etanol', 'combustivel', 'combust√≠vel', 'uber', '99', 'taxi', 't√°xi', '√¥nibus', 'onibus', 'metro', 'metr√¥', 'estacionamento', 'ipva', 'rodizio', 'rod√≠zio', 'manutencao', 'manuten√ß√£o', 'lava rapido', 'lava-r√°pido', 'oficina', 'seguro carro', 'pedagio', 'ped√°gio'], target: 'Transporte' },
              // Sa√∫de
              { keys: ['farm√°cia', 'farmacia', 'rem√©dio', 'remedio', 'remedios', 'medicamento', 'medicamentos', 'm√©dico', 'medico', 'dentista', 'hospital', 'clinica', 'cl√≠nica', 'exame', 'consulta', 'laboratorio', 'laborat√≥rio', 'optica', '√≥ptica', 'oculos', '√≥culos', 'academia', 'smartfit', 'gympass', 'suplemento', 'suplementos', 'fisioterapia', 'fonoaudiologia'], target: 'Sa√∫de' },
              // Contas
              { keys: ['aluguel', 'condominio', 'condom√≠nio', 'agua', '√°gua', 'luz', 'energia', 'g√°s', 'gas', 'internet', 'net', 'vivo', 'claro', 'tim', 'oi', 'telefone', 'celular', 'conta', 'boletos', 'iptu', 'ir', 'imposto', 'taxa', 'multas', 'detran'], target: 'Contas' },
              // Educa√ß√£o
              { keys: ['curso', 'cursos', 'faculdade', 'escola', 'livro', 'livraria', 'udemy', 'curso online', 'pluralsight', 'alura', 'material escolar', 'mensalidade'], target: 'Educa√ß√£o' },
              // Lazer
              { keys: ['cinema', 'teatro', 'show', 'balada', 'parque', 'viagem', 'hotel', 'airbnb', 'ingresso', 'ingressos', 'netflix', 'spotify', 'prime', 'disney', 'hbo', 'globoplay', 'youtube premium', 'assinatura', 'streaming'], target: 'Lazer' },
              // Beleza
              { keys: ['cabelo', 'barbearia', 'barbeiro', 'manicure', 'pedicure', 'estetica', 'est√©tica', 'cosmetico', 'cosm√©tico', 'cosmeticos', 'cosm√©ticos', 'maquiagem', 'sal√£o', 'salao'], target: 'Beleza' },
              // Vestu√°rio
              { keys: ['roupa', 'roupas', 'sapato', 'sapatos', 'tenis', 't√™nis', 'camisa', 'camiseta', 'calca', 'cal√ßa', 'vestido', 'renner', 'riachuelo', 'cea', 'c&a', 'zara', 'h&m', 'nike', 'adidas', 'puma'], target: 'Vestu√°rio' },
              // Pets
              { keys: ['petshop', 'pet shop', 'ra√ß√£o', 'racao', 'veterinario', 'veterin√°rio', 'banho tosa', 'banho e tosa', 'pet'], target: 'Pets' }
            ];
            for (const hint of catHints) {
              if (hint.keys.some(k => d.includes(k))) {
                args.category = hint.target;
                break;
              }
            }
          }

          // Buscar category_id se tiver categoria (org + globais) com normaliza√ß√£o e sin√¥nimos
          let categoryId = null;
          if (args.category) {
            const normalize = (s) => (s || '')
              .toString()
              .trim()
              .toLowerCase()
              .normalize('NFD')
              .replace(/\p{Diacritic}+/gu, '');

            const inputCategory = normalize(args.category);

            // 1) Tentativa direta case-insensitive na org
            const { data: catCI } = await supabase
              .from('budget_categories')
              .select('id, name')
              .ilike('name', args.category)
              .eq('organization_id', context.organizationId)
              .maybeSingle();

            if (catCI) {
              categoryId = catCI.id;
              // Usar nome can√¥nico (capitaliza√ß√£o correta)
              args.category = catCI.name;
            } else {
              // 2) Tentativa nas globais (case-insensitive)
              const { data: globalCatCI } = await supabase
                .from('budget_categories')
                .select('id, name')
                .ilike('name', args.category)
                .is('organization_id', null)
                .maybeSingle();

              if (globalCatCI) {
                categoryId = globalCatCI.id;
                // Usar nome can√¥nico (capitaliza√ß√£o correta)
                args.category = globalCatCI.name;
              } else {
                // 3) Carregar todas as categorias v√°lidas (org + globais) e fazer matching inteligente
                const [{ data: orgCatsAll }, { data: globalCatsAll }] = await Promise.all([
                  supabase
                    .from('budget_categories')
                    .select('id, name')
                    .eq('organization_id', context.organizationId)
                    .or('type.eq.expense,type.eq.both'),
                  supabase
                    .from('budget_categories')
                    .select('id, name')
                    .is('organization_id', null)
                    .or('type.eq.expense,type.eq.both')
                ]);

                const allCats = [...(orgCatsAll || []), ...(globalCatsAll || [])];
                const byNormalizedName = new Map();
                for (const c of allCats) {
                  byNormalizedName.set(normalize(c.name), c);
                }

                // Sin√¥nimos ‚Üí categoria can√¥nica (dicion√°rio expandido para cobertura m√°xima)
                const synonyms = [
                  // Sa√∫de
                  { keywords: ['farmacia', 'farmacia', 'remedio', 'remedios', 'remedio', 'medicamento', 'medicamentos', 'medico', 'medico', 'dentista', 'hospital', 'clinica', 'clinica', 'exame', 'consulta', 'laboratorio', 'laboratorio', 'optica', 'optica', 'oculos', 'oculos', 'academia', 'smartfit', 'gympass', 'suplemento', 'suplementos', 'fisioterapia', 'fonoaudiologia', 'psicologo', 'psic√≥logo', 'psiquiatra', 'remedio para', 'comprei remedio', 'fui na farmacia'], target: 'Sa√∫de' },
                  // Alimenta√ß√£o
                  { keywords: ['mercado', 'supermercado', 'super', 'hiper', 'padaria', 'padarias', 'lanche', 'lanches', 'restaurante', 'pizza', 'ifood', 'ubereats', 'rappi', 'sushi', 'a√ßai', 'acai', 'bar', 'cafeteria', 'cafe', 'almo√ßo', 'almoco', 'jantar', 'delivery', 'pedido', 'comida', 'esfiha', 'hamburguer', 'hamburguer', 'hot dog', 'mcdonalds', 'burger king', 'subway', 'dominos', 'bobs', 'habibs', 'bebida', 'refrigerante', 'suco', 'agua', 'agua'], target: 'Alimenta√ß√£o' },
                  // Transporte
                  { keywords: ['gasolina', 'combustivel', 'combustivel', 'posto', 'etanol', 'diesel', 'uber', '99', 'taxi', 'taxi', 'onibus', 'onibus', 'metro', 'metro', 'estacionamento', 'ipva', 'rodizio', 'rodizio', 'manutencao', 'manutencao', 'manutencao carro', 'manutencao carro', 'lava rapido', 'lava-rapido', 'oficina', 'seguro carro', 'pedagio', 'pedagio', 'mecanico', 'mec√¢nico', 'guincho', 'reboque', 'combustivel', 'abasteci', 'enchi o tanque'], target: 'Transporte' },
                  // Contas (fixas)
                  { keywords: ['aluguel', 'condominio', 'condominio', 'agua', 'agua', 'luz', 'energia', 'g√°s', 'gas', 'internet', 'net', 'vivo', 'claro', 'tim', 'oi', 'telefone', 'celular', 'conta', 'boletos', 'iptu', 'ipva', 'ir', 'imposto', 'taxa', 'multas', 'detran', 'dar', 'financiamento', 'prestacao', 'presta√ß√£o', 'cartao', 'cart√£o', 'fatura'], target: 'Contas' },
                  // Casa
                  { keywords: ['casa', 'lar', 'mercadolivre', 'magalu', 'casas bahia', 'tokstok', 'tok&stok', 'leroy', 'ferramenta', 'decoracao', 'decora√ß√£o', 'limpeza', 'material limpeza', 'ventilador', 'ar condicionado', 'microondas', 'geladeira', 'tv', 'televisao', 'notebook', 'tablet'], target: 'Casa' },
                  // Educa√ß√£o
                  { keywords: ['curso', 'cursos', 'faculdade', 'escola', 'livro', 'livraria', 'udemy', 'curso online', 'pluralsight', 'alura', 'material escolar', 'mensalidade', 'universidade', 'escola', 'faculdade', 'apostila', 'caneta', 'caderno'], target: 'Educa√ß√£o' },
                  // Lazer
                  { keywords: ['cinema', 'teatro', 'show', 'balada', 'parque', 'viagem', 'hotel', 'airbnb', 'ingresso', 'ingressos', 'netflix', 'spotify', 'prime', 'disney', 'hbo', 'globoplay', 'youtube premium', 'assinatura', 'streaming', 'festa', 'aniversario', 'anivers√°rio', 'bar', 'balada', 'clube'], target: 'Lazer' },
                  // Beleza
                  { keywords: ['cabelo', 'barbearia', 'barbeiro', 'manicure', 'pedicure', 'estetica', 'estetica', 'cosmetico', 'cosmetico', 'cosmeticos', 'cosmeticos', 'maquiagem', 'sal√£o', 'salao', 'corte', 'pintar cabelo', 'make'], target: 'Beleza' },
                  // Vestu√°rio
                  { keywords: ['roupa', 'roupas', 'sapato', 'sapatos', 'tenis', 'tenis', 'camisa', 'camiseta', 'calca', 'cal√ßa', 'vestido', 'renner', 'riachuelo', 'cea', 'c&a', 'zara', 'h&m', 'nike', 'adidas', 'puma', 'shopping', 'loja'], target: 'Vestu√°rio' },
                  // Pets
                  { keywords: ['petshop', 'pet shop', 'ra√ß√£o', 'racao', 'veterinario', 'veterinario', 'banho tosa', 'banho e tosa', 'pet', 'gato', 'cachorro', 'animal'], target: 'Pets' },
                  // Assinaturas/Streaming (j√° est√° em Lazer, mas refor√ßa)
                  { keywords: ['netflix', 'spotify', 'prime', 'disney', 'hbo', 'globoplay', 'youtube premium', 'assinatura', 'streaming', 'disney+'], target: 'Lazer' },
                  // Fitness (j√° est√° em Sa√∫de)
                  { keywords: ['academia', 'smartfit', 'gympass', 'suplemento', 'suplementos', 'treino', 'personal'], target: 'Sa√∫de' },
                  // Impostos e taxas (j√° est√° em Contas)
                  { keywords: ['iptu', 'ipva', 'ir', 'imposto', 'taxa', 'multas', 'detran', 'dar', 'licenciamento'], target: 'Contas' },
                  // Presentes/Doa√ß√µes
                  { keywords: ['presente', 'presentes', 'doacao', 'doa√ß√£o', 'vaquinha', 'aniversario', 'anivers√°rio'], target: 'Outros' }
                ];

                // 3a) Tentar sin√¥nimos pelo texto informado
                let resolvedName = null;
                for (const group of synonyms) {
                  if (group.keywords.some(k => inputCategory.includes(k))) {
                    const targetNorm = normalize(group.target);
                    if (byNormalizedName.has(targetNorm)) {
                      resolvedName = byNormalizedName.get(targetNorm).name;
                      categoryId = byNormalizedName.get(targetNorm).id;
                      break;
                    }
                  }
                }

                // 3b) Caso espec√≠fico: "farmacia" sem "Sa√∫de" dispon√≠vel ‚Üí cair para "Casa" se existir
                if (!categoryId && inputCategory.includes('farmacia')) {
                  const casa = byNormalizedName.get(normalize('Casa'));
                  if (casa) {
                    categoryId = casa.id;
                    resolvedName = casa.name;
                  }
                }

                // 3c) Matching por similaridade simples (substring) entre nomes normalizados
                if (!categoryId) {
                  const match = allCats.find(c => normalize(c.name).includes(inputCategory) || inputCategory.includes(normalize(c.name)));
                  if (match) {
                    categoryId = match.id;
                    resolvedName = match.name;
                  }
                }

                // 3d) Se ainda n√£o achou, n√£o perguntar novamente ‚Äî use "Outros" se existir
                if (!categoryId) {
                  const outros = byNormalizedName.get(normalize('Outros'))
                    || byNormalizedName.get(normalize('Outras'));
                  if (outros) {
                    categoryId = outros.id;
                    resolvedName = outros.name;
                  }
                }

                // Atualizar args.category para refletir a resolu√ß√£o, se houver
                if (categoryId && resolvedName) {
                  args.category = resolvedName;
                }

                // Se mesmo assim n√£o encontrou, manter null (sem quebrar o fluxo)
              }
            }
          }
          
          // Subfluxo de cart√£o de cr√©dito: exigir cart√£o e parcelas antes de salvar
          let cardId = null;
          if (paymentMethod === 'credit_card') {
            // Se n√£o informou o cart√£o ainda, perguntar primeiro
            if (!args.card_name || String(args.card_name).trim() === '') {
              const firstName = this.getFirstName(context);
              const namePart = firstName ? ` ${firstName}` : '';
              
              const cardQuestions = [
                `Beleza${namePart}! Qual cart√£o?`,
                `Show${namePart}! Qual foi o cart√£o?`,
                `Qual cart√£o voc√™ usou${namePart}?`,
                `Me diz qual cart√£o${namePart}?`,
                `Qual cart√£o${namePart}?`,
                `Me fala qual cart√£o${namePart}?`,
                `Preciso saber qual cart√£o${namePart}`,
                `Foi em qual cart√£o${namePart}?`,
                `Qual cart√£o voc√™ usou${namePart}?`,
                `Me conta qual cart√£o${namePart}?`
              ];
              return {
                success: false,
                message: this.pickVariation(cardQuestions, 'cartao')
              };
            }

            // Se n√£o informou parcelas, perguntar em seguida
            if (!args.installments || Number(args.installments) < 1) {
              const firstName = this.getFirstName(context);
              const namePart = firstName ? ` ${firstName}` : '';
              
              const installmentQuestions = [
                `E em quantas parcelas${namePart}?`,
                `Quantas vezes${namePart}?`,
                `Foi parcelado${namePart}? Quantas vezes?`,
                `Me diz quantas parcelas${namePart}?`,
                `Quantas parcelas foram${namePart}?`,
                `Foi √† vista ou parcelado${namePart}?`,
                `Me fala quantas vezes${namePart}?`,
                `Quantas parcelas${namePart}?`,
                `Foi parcelado em quantas vezes${namePart}?`,
                `Preciso saber quantas parcelas${namePart}`,
                `Quantas vezes voc√™ parcelou${namePart}?`,
                `Foi em quantas vezes${namePart}?`
              ];
              return {
                success: false,
                message: this.pickVariation(installmentQuestions, args.card_name || 'parcelas')
              };
            }

            const { data: cards } = await supabase
              .from('cards')
              .select('id, name')
              .eq('organization_id', context.organizationId)
              .eq('is_active', true);

            const cardNorm = this.normalizeText(args.card_name);
            let foundCard = null;
            if (cards && cards.length) {
              const byNorm = new Map();
              for (const c of cards) byNorm.set(this.normalizeText(c.name), c);
              foundCard = byNorm.get(cardNorm);
              if (!foundCard) {
                foundCard = cards.find(c => {
                  const n = this.normalizeText(c.name);
                  return n.includes(cardNorm) || cardNorm.includes(n);
                });
              }
            }

            if (foundCard) {
              cardId = foundCard.id;
              args.card_name = foundCard.name;
            } else {
              // Cart√£o n√£o encontrado - listar op√ß√µes dispon√≠veis
              const { data: allActiveCards } = await supabase
                .from('cards')
                .select('name')
                .eq('organization_id', context.organizationId)
                .eq('is_active', true);

              const cardsList = allActiveCards?.map(c => c.name).join(', ') || 'nenhum cart√£o cadastrado';
              const firstName = this.getFirstName(context);
              const namePart = firstName ? ` ${firstName}` : '';
              
              const errorMessages = [
                `N√£o encontrei esse cart√£o${namePart}. Dispon√≠veis: ${cardsList}. Qual cart√£o?`,
                `Esse cart√£o n√£o t√° cadastrado${namePart}. Tenho aqui: ${cardsList}. Qual foi?`,
                `Hmm, n√£o achei esse cart√£o${namePart}. Os dispon√≠veis s√£o: ${cardsList}. Qual voc√™ usou?`,
                `Esse cart√£o n√£o existe aqui${namePart}. Tenho: ${cardsList}. Qual foi?`,
                `N√£o reconheci esse cart√£o${namePart}. Dispon√≠veis: ${cardsList}. Qual?`,
                `N√£o achei esse cart√£o no sistema${namePart}. Os que tenho s√£o: ${cardsList}. Qual voc√™ usou?`,
                `Esse cart√£o n√£o t√° no cadastro${namePart}. Aqui tem: ${cardsList}. Qual foi?`,
                `Cart√£o n√£o encontrado${namePart}. Dispon√≠veis: ${cardsList}. Qual?`
              ];
              return {
                success: false,
                message: this.pickVariation(errorMessages, args.card_name || 'erro_cartao')
              };
            }
          }
          
          const expenseData = {
            amount: amount,
            description: args.description,
            date: new Date().toISOString().split('T')[0],
            category: args.category || null,
            category_id: categoryId,
            owner: owner,
            cost_center_id: costCenterId,
            payment_method: paymentMethod,
            card_id: cardId,
            organization_id: context.organizationId,
            user_id: context.userId || userId,
            status: 'confirmed',
            is_shared: isShared || false,
            confirmed_at: new Date().toISOString(),
            confirmed_by: context.userId || userId,
            source: 'whatsapp',
            whatsapp_message_id: `msg_${Date.now()}`
          };
          
          console.log('üíæ [SAVE] Salvando despesa com dados:', JSON.stringify(expenseData, null, 2));
          
          const { data, error } = await supabase
            .from('expenses')
            .insert(expenseData)
            .select()
            .single();
          
          if (error) {
            console.error('‚ùå Erro ao salvar:', error);
            throw error;
          }
          
          console.log('‚úÖ Despesa salva:', data.id);

          const amountFormatted = Number(amount).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
          const paymentDisplayMap = {
            'credit_card': 'Cart√£o de Cr√©dito',
            'debit_card': 'D√©bito',
            'pix': 'Pix',
            'cash': 'Dinheiro',
            'bank_transfer': 'Transfer√™ncia',
            'boleto': 'Boleto',
            'other': 'Outro'
          };
          const paymentDisplay = paymentDisplayMap[paymentMethod] || paymentMethod;

          // Data formatada (pt-BR). Usa a data salva na despesa (yyyy-mm-dd)
          const savedDate = expenseData.date;
          const dateObj = new Date(savedDate + 'T00:00:00');
          const isToday = (() => {
            const today = new Date();
            return dateObj.toDateString() === today.toDateString();
          })();
          const dateDisplay = isToday ? 'Hoje' : dateObj.toLocaleDateString('pt-BR');

          // Gerar mensagem de confirma√ß√£o variada e conversacional
          const greetings = [
            'Anotado! ‚úÖ',
            'Registrado! ‚úÖ',
            'Tudo certo! ‚úÖ',
            'Pronto! ‚úÖ',
            'Beleza, anotei! ‚úÖ',
            'Show, registrei! ‚úÖ',
            'Joia, t√° salvo! ‚úÖ'
          ];
          
          const firstName = context.userName ? context.userName.split(' ')[0] : '';
          const greeting = greetings[Math.floor(Math.random() * greetings.length)];
          
          // Criar mensagem mais natural e variada
          const confirmationMsg = [
            greeting,
            `\nR$ ${amountFormatted} - ${args.description}`,
            `${args.category || 'Sem categoria'}`,
            `${paymentDisplay}`,
            `${owner}`,
            `${dateDisplay}`
          ].join(' ‚Ä¢ ');

          return {
            success: true,
            message: confirmationMsg,
            expense_id: data.id
          };
        } catch (error) {
          console.error('‚ùå Erro ao salvar despesa:', error);
          const firstName = this.getFirstName(context);
          const namePart = firstName ? ` ${firstName}` : '';
          
          const errorMessages = [
            `Ops${namePart}! Tive um problema ao salvar. üòÖ`,
            `Eita${namePart}, algo deu errado aqui. üòÖ`,
            `Poxa${namePart}, tive um erro ao registrar. üòÖ`,
            `Ops${namePart}, algo deu errado. üòÖ`,
            `Eita${namePart}, tive um problema aqui. üòÖ`,
            `Poxa${namePart}, n√£o consegui salvar. üòÖ`,
            `Desculpa${namePart}, algo deu errado. üòÖ`,
            `Ops${namePart}, erro ao registrar. üòÖ`
          ];
          return {
            success: false,
            message: this.pickVariation(errorMessages, 'erro')
          };
        }
      };
    }
    try {
      console.log('üí¨ [GPT-4] Iniciando conversa...');
      
      // Carregar hist√≥rico da conversa do banco
      const history = await this.loadConversationHistory(userPhone);
      
      // Extrair informa√ß√µes j√° coletadas do hist√≥rico
      const collectedInfo = this.extractCollectedInfo(history);
      console.log('üìä [GPT-4] Informa√ß√µes coletadas:', JSON.stringify(collectedInfo));
      
      // Detectar primeira mensagem (hist√≥rico vazio ou muito antigo)
      const isFirstMessage = history.length === 0;
      
      // Adicionar contexto de informa√ß√µes coletadas ao system message
      let systemMessage = this.getConversationalInstructions(context);
      
      if (isFirstMessage) {
        systemMessage += `\n\nüåÖ PRIMEIRA MENSAGEM: Cumprimente ${context.userName?.split(' ')[0] || 'o usu√°rio'} de forma calorosa antes de come√ßar!`;
      }
      
      // Se tiver informa√ß√µes coletadas, dizer ao GPT para verificar
      if (Object.keys(collectedInfo).length > 0) {
        systemMessage += `\n\nüìù INFORMA√á√ïES J√Å COLETADAS NESTA CONVERSA:\n`;
        if (collectedInfo.amount) systemMessage += `- Valor: R$ ${collectedInfo.amount}\n`;
        if (collectedInfo.description) systemMessage += `- Descri√ß√£o: ${collectedInfo.description}\n`;
        if (collectedInfo.payment_method) systemMessage += `- Pagamento: ${collectedInfo.payment_method}\n`;
        if (collectedInfo.responsible) systemMessage += `- Respons√°vel: ${collectedInfo.responsible}\n`;
        if (collectedInfo.card) systemMessage += `- Cart√£o: ${collectedInfo.card}\n`;
        if (collectedInfo.installments) systemMessage += `- Parcelas: ${collectedInfo.installments}\n`;
        
        const missing = [];
        if (!collectedInfo.amount) missing.push('valor');
        if (!collectedInfo.description) missing.push('descri√ß√£o');
        if (!collectedInfo.payment_method) missing.push('pagamento');
        if (!collectedInfo.responsible) missing.push('respons√°vel');
        
        if (missing.length > 0) {
          systemMessage += `\n‚ö†Ô∏è FALTA: ${missing.join(', ')}`;
        } else {
          systemMessage += `\n‚úÖ TUDO COLETADO! Chame save_expense AGORA!`;
        }
      }
      
      // Preparar mensagens para GPT-4
      const messages = [
        {
          role: 'system',
          content: systemMessage
        },
        ...history,
        {
          role: 'user',
          content: userMessage
        }
      ];
      
      console.log('üí¨ [GPT-4] Hist√≥rico carregado:', history.length, 'mensagens');
      console.log('üí¨ [GPT-4] Hist√≥rico completo:', JSON.stringify(history, null, 2));
      
      // Chamar GPT-4 com function calling
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: messages,
        functions: this.getFunctions(),
        function_call: 'auto',
        temperature: 0.6, // Natural e consistente
        top_p: 1.0,
        frequency_penalty: 0.25, // Evita repeti√ß√£o
        presence_penalty: 0.05,
        max_tokens: 150 // Aumentado para permitir function calls
      });
      
      const assistantMessage = completion.choices[0].message;
      
      // Se chamou fun√ß√£o
      if (assistantMessage.function_call) {
        console.log('üîß [GPT-4] Function call:', assistantMessage.function_call.name);
        
        const functionName = assistantMessage.function_call.name;
        const functionArgs = JSON.parse(assistantMessage.function_call.arguments);
        
        const functionResult = await this.handleFunctionCall(functionName, functionArgs, context);
        
        // Se salvou despesa, limpar hist√≥rico e retornar APENAS mensagem da fun√ß√£o
        if (functionName === 'save_expense') {
          await this.clearConversationHistory(userPhone);
          
          // Retornar APENAS a mensagem da fun√ß√£o (ignorar qualquer texto que o GPT escreveu)
          return functionResult.message || 'Anotado! ‚úÖ';
        }
        
        // Outras fun√ß√µes: n√£o deveriam acontecer aqui
        return functionResult.message || 'Funcionou!';
      }
      
      // Resposta normal sem function call
      const response = assistantMessage.content;
      
      // Filtrar mensagens t√©cnicas que o GPT √†s vezes escreve
      const cleanedResponse = response.replace(/\[CHAMANDO.*?\]/gi, '').replace(/\[.*?AGORA.*?\]/gi, '').trim();
      
      // Salvar no hist√≥rico
      console.log('üíæ [GPT-4] Salvando no hist√≥rico: user="' + userMessage + '", assistant="' + cleanedResponse + '"');
      await this.saveToHistory(userPhone, userMessage, cleanedResponse);
      
      return cleanedResponse || response;
      
    } catch (error) {
      console.error('‚ùå [GPT-4] Erro:', error);
      throw error;
    }
  }

  /**
   * Extrair informa√ß√µes j√° coletadas do hist√≥rico
   */
  extractCollectedInfo(history) {
    const info = {};
    
    // Considerar apenas a √∫ltima mensagem do usu√°rio, para evitar infer√™ncias antigas
    const lastUserMsg = [...history].reverse().find(m => m.role === 'user');
    const conversationText = (lastUserMsg?.content || '').toLowerCase();
    
    // Extrair valor
    const amountMatch = conversationText.match(/(?:gastei|paguei|foi|valor)?\s*(?:r\$)?\s*(\d+(?:[.,]\d{1,2})?)/i);
    if (amountMatch) {
      info.amount = parseFloat(amountMatch[1].replace(',', '.'));
    }
    
    // Extrair descri√ß√£o: usar n√∫cleo descritivo da √∫ltima mensagem
    const core = this.extractCoreDescription(conversationText);
    if (core) {
      info.description = core;
    }
    
    // Extrair forma de pagamento
    if (conversationText.includes('pix')) info.payment_method = 'pix';
    else if (conversationText.includes('dinheiro') || conversationText.includes('cash')) info.payment_method = 'dinheiro';
    else if (conversationText.includes('d√©bito') || conversationText.includes('debito')) info.payment_method = 'd√©bito';
    else if (conversationText.includes('cr√©dito') || conversationText.includes('credito')) info.payment_method = 'cr√©dito';
    
    // Extrair respons√°vel apenas se explicitamente citado na √∫ltima mensagem
    if (conversationText.match(/\b(eu|eu mesmo|fui eu)\b/)) {
      info.responsible = 'eu';
    } else if (conversationText.includes('compartilhado')) {
      info.responsible = 'Compartilhado';
    }
    
    return info;
  }

  /**
   * Carregar hist√≥rico da conversa
   */
  async loadConversationHistory(userPhone) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      const { data } = await supabase
        .from('conversation_state')
        .select('temp_data')
        .eq('user_phone', normalizedPhone)
        .neq('state', 'idle')
        .single();
      
      if (data?.temp_data?.messages) {
        return data.temp_data.messages;
      }
      
      return [];
    } catch (error) {
      return [];
    }
  }

  /**
   * Salvar mensagem no hist√≥rico
   */
  async saveToHistory(userPhone, userMessage, assistantResponse) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      console.log('üíæ [saveToHistory] Phone:', normalizedPhone);
      
      const history = await this.loadConversationHistory(userPhone);
      console.log('üíæ [saveToHistory] Hist√≥rico atual:', history.length, 'mensagens');
      
      history.push(
        { role: 'user', content: userMessage },
        { role: 'assistant', content: assistantResponse }
      );
      
      console.log('üíæ [saveToHistory] Hist√≥rico ap√≥s push:', history.length, 'mensagens');
      
      // Limitar hist√≥rico a √∫ltimas 10 mensagens
      const limitedHistory = history.slice(-10);
      
      const result = await supabase
        .from('conversation_state')
        .upsert({
          user_phone: normalizedPhone,
          state: 'awaiting_confirmation', // Estado gen√©rico para conversa ativa
          temp_data: {
            messages: limitedHistory,
            last_message: userMessage,
            timestamp: new Date().toISOString()
          },
          updated_at: new Date().toISOString()
        }, {
          onConflict: 'user_phone'
        });
      
      console.log('üíæ [saveToHistory] Upsert result:', JSON.stringify(result));
      console.log('üíæ [GPT-4] Hist√≥rico salvo com', limitedHistory.length, 'mensagens');
    } catch (error) {
      console.error('‚ùå Erro ao salvar hist√≥rico:', error);
    }
  }

  /**
   * Limpar hist√≥rico da conversa
   */
  async clearConversationHistory(userPhone) {
    try {
      const normalizedPhone = this.normalizePhone(userPhone);
      
      await supabase
        .from('conversation_state')
        .update({
          state: 'idle',
          temp_data: {}
        })
        .eq('user_phone', normalizedPhone);
      
      console.log('üóëÔ∏è [GPT-4] Hist√≥rico limpo');
    } catch (error) {
      console.error('‚ùå Erro ao limpar hist√≥rico:', error);
    }
  }

  /**
   * Instru√ß√µes conversacionais (system message)
   */
  getConversationalInstructions(context) {
    const { userName, organizationId, availableCards } = context;
    const firstName = userName ? userName.split(' ')[0] : 'voc√™';
    const cardsList = availableCards?.join(', ') || 'Nubank, C6';
    
    return `Voc√™ √© Zul (ou ZUL), assistente financeiro do MeuAzul√£o.
Voc√™ √© um amigo que ajuda a organizar as finan√ßas, n√£o um rob√¥.

SOBRE VOC√ä:
- Seu nome √© Zul (ou ZUL)
- Voc√™ √© o assistente financeiro do MeuAzul√£o
- Voc√™ trabalha ajudando as pessoas a organizarem suas despesas de forma f√°cil e r√°pida
- Sua principal fun√ß√£o √© registrar despesas pelo WhatsApp de forma r√°pida e conversacional

QUANDO PERGUNTAREM SOBRE VOC√ä:
- Reconhe√ßa naturalmente QUALQUER varia√ß√£o de perguntas sobre voc√™ ("quem √© voc√™?", "o que voc√™ faz?", "como voc√™ pode ajudar?", "qual sua fun√ß√£o?", "para que voc√™ serve?", etc.)
- Responda naturalmente explicando:
  1. Seu nome: Zul
  2. Que √© assistente financeiro do MeuAzul√£o
  3. Que registra despesas pelo WhatsApp
  4. Como funciona: usu√°rio manda mensagem, voc√™ faz perguntas curtas se necess√°rio, registra
- VARIE suas respostas - n√£o use sempre as mesmas palavras
- Use o tom natural e amig√°vel do Zul - como um amigo explicando o que faz

O QUE VOC√ä PODE FAZER:
- Registrar despesas rapidinho pelo WhatsApp
- Voc√™ recebe a mensagem do usu√°rio (ex: "gastei 50 no mercado") e faz algumas perguntas curtas se necess√°rio
- Voc√™ infere automaticamente categorias quando poss√≠vel (rem√©dio ‚Üí Sa√∫de, padaria ‚Üí Alimenta√ß√£o, posto ‚Üí Transporte)
- Voc√™ ajuda a categorizar despesas (Alimenta√ß√£o, Sa√∫de, Transporte, Casa, Contas, Lazer, etc)
- Voc√™ registra a forma de pagamento (pix, dinheiro, d√©bito, cr√©dito)
- Voc√™ registra quem pagou (respons√°vel pela despesa)
- Voc√™ pode trabalhar com cart√µes de cr√©dito e parcelas
- Voc√™ √© r√°pido, amig√°vel e conversacional

PERSONALIDADE:
- Fale como um amigo pr√≥ximo, natural e descontra√≠do
- Use g√≠rias brasileiras quando fizer sentido ("beleza", "joia", "bacana", "show")
- Seja emp√°tico e caloroso
- VARIE muito suas respostas - nunca seja previs√≠vel ou rob√≥tico
- Responda a QUALQUER pergunta do usu√°rio (n√£o s√≥ sobre despesas)
- Pode fazer brincadeiras leves se fizer sentido no contexto
- Se n√£o souber algo ou a pergunta n√£o for sobre finan√ßas, responda naturalmente e redirecione amigavelmente

CONVERSAS NATURAIS:
- O usu√°rio pode come√ßar falando qualquer coisa (ex: "oi", "tudo bem?", "como voc√™ t√°?")
- Responda naturalmente, como um amigo responderia
- N√£o precisa for√ßar registrar uma despesa em toda conversa
- Se o usu√°rio s√≥ quiser conversar, converse normalmente
- Se o usu√°rio mencionar um gasto, a√≠ sim ajude a registrar

OBJETIVO PRINCIPAL:
Registrar despesas conversando naturalmente, sem parecer um rob√¥.

IMPORTANTE CR√çTICO: 
- Se FALTAR algum dado ‚Üí pergunte em texto
- Se TIVER TODOS os dados ‚Üí CHAME APENAS A FUN√á√ÉO save_expense
- N√ÉO ESCREVA NADA al√©m da chamada da fun√ß√£o
- A fun√ß√£o retorna automaticamente a mensagem de confirma√ß√£o
- VOC√ä N√ÉO PRECISA e N√ÉO DEVE escrever mensagem alguma quando chamar a fun√ß√£o

REGRAS DE PERGUNTAS CURTAS E AMIG√ÅVEIS:
- Para pagamento: pergunte SOMENTE "Pagou como?" (ou varia√ß√£o curta e calorosa). N√ÉO liste op√ß√µes na primeira pergunta.
- Liste op√ß√µes apenas ap√≥s resposta inv√°lida ou se o usu√°rio perguntar explicitamente (ex.: "quais temos?").
- Para respons√°vel: pergunte "Quem pagou?" (ou varia√ß√£o curta e calorosa). Se o usu√°rio disser "eu", mapear para o nome dele.
- Para categoria: INFIRA sempre que poss√≠vel (rem√©dio‚ÜíSa√∫de, padaria‚ÜíAlimenta√ß√£o, posto‚ÜíTransporte). Se n√£o conseguir inferir OU o usu√°rio perguntar "quais temos?", liste categorias comuns (Alimenta√ß√£o, Sa√∫de, Transporte, Casa, Contas, Lazer, etc).

Evite frases mec√¢nicas como "aguarde" ou "validando".
Suas mensagens devem ser curtas (como no WhatsApp).
Use emoji APENAS na confirma√ß√£o final (que vem da fun√ß√£o) - nunca nas perguntas.

--- DEVELOPER PROMPT ---

Slots necess√°rios para save_expense:
- valor (n√∫mero)
- descri√ß√£o (texto)
- categoria (TENTE INFERIR automaticamente baseado em palavras-chave. Exemplos: "rem√©dio"/"farm√°cia"‚ÜíSa√∫de, "padaria"/"restaurante"‚ÜíAlimenta√ß√£o, "posto"/"gasolina"‚ÜíTransporte, "mercado"/"supermercado"‚ÜíCasa, "aluguel"/"luz"‚ÜíContas. Se n√£o conseguir inferir, PERGUNTE ao usu√°rio)
- pagamento (pix | dinheiro | d√©bito | cr√©dito)
- pagador (eu | nome)
- se pagamento = cr√©dito ‚Üí OBRIGAT√ìRIO perguntar nome do cart√£o e parcelas ANTES de chamar save_expense

IMPORTANTE SOBRE CATEGORIA:
- Se a descri√ß√£o cont√©m palavras como: rem√©dio, farm√°cia, m√©dico ‚Üí INFIRA "Sa√∫de" (N√ÉO pergunte)
- Se cont√©m: padaria, restaurante, lanche, pizza ‚Üí INFIRA "Alimenta√ß√£o" (N√ÉO pergunte)
- Se cont√©m: posto, gasolina, uber, taxi ‚Üí INFIRA "Transporte" (N√ÉO pergunte)
- Se cont√©m: mercado, supermercado ‚Üí INFIRA "Casa" (N√ÉO pergunte)
- Se cont√©m: aluguel, luz, √°gua, internet ‚Üí INFIRA "Contas" (N√ÉO pergunte)
- S√≥ pergunte categoria se a descri√ß√£o for muito gen√©rica ou amb√≠gua (ex.: "50 reais")

Regras de fluxo:
- TENTE INFERIR categoria pela descri√ß√£o antes de perguntar (ex.: "rem√©dio" ‚Üí Sa√∫de, "padaria" ‚Üí Alimenta√ß√£o, "posto" ‚Üí Transporte)
- Se n√£o conseguir inferir, PERGUNTE categoria
- Se faltar 1 slot ‚Üí pergunte apenas ele
- Se faltarem 2 ou mais ‚Üí pergunte tudo em uma √∫nica mensagem curta
- AO COMPLETAR os dados, APENAS chame save_expense (n√£o escreva NADA)
- A fun√ß√£o retornar√° a mensagem de confirma√ß√£o automaticamente
- VARIE completamente a ordem das perguntas e o estilo das frases

Proibido:
- "Vou verificar...", "Aguarde...", "Validando..."
- "Vou registrar...", "Vou anotar..."
- NUNCA confirme antes de chamar a fun√ß√£o - chame direto!

--- EXEMPLOS DE CONVERSAS NATURAIS ---

Exemplo A - Sauda√ß√£o casual:
User: Oi
You: E a√≠, ${firstName}! Tudo certo? O que t√° pegando?

Exemplo B - Pergunta casual:
User: Como voc√™ t√°?
You: To bem sim! Pronto pra ajudar voc√™ a organizar suas contas. O que rolou hoje?

Exemplo C - Brincadeira leve:
User: Voc√™ √© muito √∫til
You: Valeu, ${firstName}! Tamo junto pra deixar suas finan√ßas em dia

Exemplo D - Pergunta sobre outra coisa:
User: Que horas s√£o?
You: Opa, n√£o tenho acesso ao hor√°rio agora, mas to aqui pra te ajudar com as despesas! Gastei alguma coisa hoje?

Exemplo E - Perguntas sobre voc√™ (respostas variadas e naturais):

User: Quem √© voc√™?
You: Sou o Zul, assistente financeiro do MeuAzul√£o! To aqui pra te ajudar a organizar suas despesas de um jeito f√°cil e r√°pido.

User: O que voc√™ faz?
You: Sou o Zul do MeuAzul√£o! Ajudo voc√™ a registrar suas despesas rapidinho pelo WhatsApp. S√≥ mandar um "gastei 50 no mercado" que eu registro pra voc√™!

User: O que voc√™ pode fazer?
You: Eu ajudo voc√™ a registrar suas despesas rapidinho pelo WhatsApp! √â s√≥ mandar algo tipo "gastei 50 no mercado" que eu fa√ßo algumas perguntinhas curtas (se precisar) e registro tudo pra voc√™. Bem f√°cil!

User: Como voc√™ pode ajudar?
You: Eu registro suas despesas pra voc√™! Voc√™ me manda uma mensagem como "paguei 30 na farm√°cia" e eu organizo tudo. √Äs vezes eu pergunto uma coisinha ou outra (tipo como voc√™ pagou), mas √© bem r√°pido e natural. Bora come√ßar?

User: Como voc√™ funciona?
You: Funciono assim: voc√™ me manda uma mensagem tipo "gastei 100 no mercado" pelo WhatsApp. Eu fa√ßo algumas perguntinhas curtas se precisar (como voc√™ pagou, quem pagou, etc) e depois registro tudo aqui no MeuAzul√£o. Bem simples!

User: Para que voc√™ serve?
You: Servo pra ajudar voc√™ a organizar suas despesas! Voc√™ me manda pelo WhatsApp e eu registro tudo rapidinho. Bem pr√°tico!

User: Qual sua fun√ß√£o?
You: Minha fun√ß√£o √© registrar suas despesas pelo WhatsApp! Voc√™ me manda uma mensagem e eu fa√ßo o resto.

(Nota: Voc√™ deve reconhecer e responder naturalmente QUALQUER varia√ß√£o de perguntas sobre voc√™, adaptando a resposta ao tom e estilo da pergunta)

--- EXEMPLOS DE REGISTRO DE DESPESAS ---

Exemplo 1 - Infer√™ncia autom√°tica:
User: Gastei 149 com rem√©dio
You: Beleza, ${firstName}! Rem√©dio, ent√£o. Pagou como?

Exemplo 2 - Sem infer√™ncia:
User: Gastei 150 no mercado
You: Show! 150 no mercado. Qual categoria?

Exemplo 3 - M√∫ltiplas infos:
User: 80 farm√°cia, pix, eu
You: [Neste caso, voc√™ N√ÉO DEVE escrever NADA. Apenas chame save_expense e deixe que a fun√ß√£o retorne a mensagem.]

Exemplo 4 - Cr√©dito:
User: 120 cinema no cr√©dito
You: Fechou! Qual cart√£o foi?

Exemplo 5 - Varia√ß√£o de ordem:
User: Gastei 50 na padaria
You: 50 na padaria, ${firstName}. Pagou como?
User: D√©bito
You: Quem pagou?
User: Eu
You: [Apenas chame save_expense - n√£o escreva NADA]

--- REGRA ABSOLUTA DE OURO ---

Se tiver TODOS os dados (valor, descri√ß√£o, pagamento, respons√°vel):
1. APENAS chame save_expense
2. N√ÉO escreva NADA
3. N√ÉO mostre "[CHAMANDO...]" 
4. N√ÉO confirme antes
5. Deixe a fun√ß√£o fazer seu trabalho
6. A mensagem final vem da fun√ß√£o automaticamente

Use frases curtas e varia√ß√µes: "Show!", "Beleza!", "Fechou!", "Tranquilo!", "Joia!", "Bacana!".
NUNCA use emoji nas perguntas - apenas na confirma√ß√£o final.
VARIE radicalmente:
- √Äs vezes comece perguntando pagamento, √†s vezes categoria, √†s vezes respons√°vel
- √Äs vezes combine perguntas ("Quem pagou e foi no pix, dinheiro ou d√©bito?")
- √Äs vezes fa√ßa apenas uma pergunta por vez
- SEMPRE varie o estilo e a ordem para n√£o parecer rob√≥tico
- Seja IMPREVIS√çVEL como uma conversa natural
${context.isFirstMessage ? `\nPRIMEIRA MENSAGEM: Cumprimente ${firstName} de forma calorosa e variada: "E a√≠, ${firstName}!" ou "Opa, ${firstName}! Tudo certo?" ou "Oi, ${firstName}! Como vai?"` : ''}`;
  }

  /**
   * Definir fun√ß√µes dispon√≠veis para GPT-4
   */
  getFunctions() {
    return [
      {
        name: 'save_expense',
        description: 'Salvar despesa quando tiver TODAS as informa√ß√µes (valor, descri√ß√£o, pagamento, respons√°vel). Valida√ß√£o acontece automaticamente dentro da fun√ß√£o.',
        parameters: {
          type: 'object',
          properties: {
            amount: { 
              type: 'number',
              description: 'Valor num√©rico da despesa'
            },
            description: { 
              type: 'string',
              description: 'Descri√ß√£o da despesa'
            },
            payment_method: { 
              type: 'string',
              description: 'Forma de pagamento que o usu√°rio disse (pix, dinheiro, d√©bito, cr√©dito, etc)'
            },
            responsible: { 
              type: 'string',
              description: 'Quem pagou: nome exato (ex: "Felipe", "Let√≠cia") ou "eu" (ser√° mapeado automaticamente)'
            },
            card_name: { 
              type: 'string',
              description: 'Nome do cart√£o (OBRIGAT√ìRIO se payment_method for cr√©dito)' 
            },
            installments: { 
              type: 'number',
              description: 'N√∫mero de parcelas (OBRIGAT√ìRIO se payment_method for cr√©dito, default: 1)' 
            },
            category: { 
              type: 'string',
              description: 'Categoria (opcional, ser√° inferida automaticamente)' 
            }
          },
          required: ['amount', 'description', 'payment_method', 'responsible']
        }
      }
    ];
  }

  /**
   * Enviar mensagem para o Assistant e obter resposta (ANTIGO - mantido para compatibilidade)
   */
  async sendMessage(userId, userMessage, context = {}) {
    try {
      console.log(`üì§ [ASSISTANT] Enviando mensagem para usu√°rio ${userId}`);
      console.log(`üì§ [ASSISTANT] Mensagem: "${userMessage}"`);
      console.log(`üì§ [ASSISTANT] Context:`, JSON.stringify(context, null, 2));
      
      const assistantId = await this.getOrCreateAssistant();
      if (!assistantId) {
        throw new Error('Falha ao obter/criar Assistant ID');
      }
      console.log(`‚úÖ [ASSISTANT] Assistant ID: ${assistantId}`);
      
      const threadId = await this.getOrCreateThread(userId, context.userPhone);
      if (!threadId) {
        throw new Error('Falha ao obter/criar Thread ID');
      }
      console.log(`‚úÖ [ASSISTANT] Thread ID: ${threadId}`);

      // Atualizar cache com informa√ß√µes do usu√°rio
      const cached = threadCache.get(userId);
      if (cached && context.userName) {
        cached.userName = context.userName;
        cached.userPhone = context.userPhone;
      }

      // üíæ Salvar thread no banco para persist√™ncia
      if (context.userPhone) {
        await this.saveThreadToDB(
          context.userPhone, 
          threadId, 
          'awaiting_payment_method',
          {
            user_name: context.userName,
            last_message: userMessage,
            timestamp: new Date().toISOString()
          }
        );
      }

      // Adicionar contexto do usu√°rio na primeira mensagem (se thread √© nova)
      const isNewThread = !threadCache.has(userId) || threadCache.get(userId).threadId === threadId;
      let messageContent = userMessage;
      if (context.userName && isNewThread) {
        messageContent = `[CONTEXTO: Usu√°rio: ${context.userName}]\n\n${userMessage}`;
      }

      // Adicionar mensagem do usu√°rio
      console.log(`üìù [ASSISTANT] Adicionando mensagem √† thread...`);
      await openai.beta.threads.messages.create(threadId, {
        role: 'user',
        content: messageContent
      });
      console.log(`‚úÖ [ASSISTANT] Mensagem adicionada`);

      // Executar o Assistant
      console.log(`üèÉ [ASSISTANT] Criando run...`);
      const run = await openai.beta.threads.runs.create(threadId, {
        assistant_id: assistantId
      });
      console.log(`‚úÖ [ASSISTANT] Run criado: ${run.id} (status: ${run.status})`);

      // Aguardar conclus√£o e processar
      console.log(`‚è≥ [ASSISTANT] Aguardando conclus√£o do run...`);
      const result = await this.waitForCompletion(threadId, run.id, context);
      console.log(`‚úÖ [ASSISTANT] Run completado, retornando resposta`);
      return result;

    } catch (error) {
      console.error('‚ùå [ASSISTANT] Erro ao enviar mensagem:', error);
      console.error('‚ùå [ASSISTANT] Error stack:', error.stack);
      throw error;
    }
  }

  /**
   * Aguardar conclus√£o do run e processar function calls
   */
  async waitForCompletion(threadId, runId, context) {
    console.log(`‚è≥ [ASSISTANT] Iniciando waitForCompletion - threadId: ${threadId}, runId: ${runId}`);
    
    let run = await openai.beta.threads.runs.retrieve(runId, { thread_id: threadId });
    console.log(`üìä [ASSISTANT] Status inicial: ${run.status}`);
    
    let attempts = 0;
    const maxAttempts = 60; // 60 segundos timeout (aumentado para debug)
    
    while (run.status === 'in_progress' || run.status === 'queued') {
      if (attempts >= maxAttempts) {
        console.error(`‚ùå [ASSISTANT] Timeout ap√≥s ${maxAttempts} tentativas`);
        throw new Error('Timeout aguardando resposta do Assistant');
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
      run = await openai.beta.threads.runs.retrieve(runId, { thread_id: threadId });
      attempts++;
      console.log(`‚è≥ [ASSISTANT] Status: ${run.status} (tentativa ${attempts}/${maxAttempts})`);
    }
    
    console.log(`üìä [ASSISTANT] Status final: ${run.status}`);

    // Se precisar de function calls
    if (run.status === 'requires_action') {
      const toolCalls = run.required_action.submit_tool_outputs.tool_calls;
      const toolOutputs = [];

      for (const toolCall of toolCalls) {
        const functionName = toolCall.function.name;
        const args = JSON.parse(toolCall.function.arguments);
        
        console.log(`üîß Function call: ${functionName}`, args);
        
        const output = await this.handleFunctionCall(functionName, args, context);
        toolOutputs.push({
          tool_call_id: toolCall.id,
          output: JSON.stringify(output)
        });
      }

      // Submeter os resultados das fun√ß√µes
      await openai.beta.threads.runs.submitToolOutputs(runId, {
        thread_id: threadId,
        tool_outputs: toolOutputs
      });

      // Aguardar nova conclus√£o
      return await this.waitForCompletion(threadId, runId, context);
    }

    // Se completou com sucesso, pegar a √∫ltima mensagem
    if (run.status === 'completed') {
      const messages = await openai.beta.threads.messages.list(threadId);
      const lastMessage = messages.data[0];
      
      if (lastMessage.role === 'assistant') {
        const response = lastMessage.content[0].text.value;
        console.log(`‚úÖ [ASSISTANT] Resposta: ${response.substring(0, 100)}...`);
        return response;
      }
    }

    // Se falhou, logar detalhes
    if (run.status === 'failed') {
      console.error(`‚ùå [ASSISTANT] Run falhou:`, run.last_error);
    }

    throw new Error(`Run finalizado com status: ${run.status}`);
  }

  /**
   * Processar chamadas de fun√ß√£o
   */
  async handleFunctionCall(functionName, args, context) {
    console.log(`üîß [FUNCTION_CALL] ===== IN√çCIO =====`);
    console.log(`üîß [FUNCTION_CALL] Fun√ß√£o: ${functionName}`);
    console.log(`üîß [FUNCTION_CALL] Args:`, JSON.stringify(args, null, 2));
    
    let result;
    if (functionName === 'save_expense') {
      console.log(`üîß [FUNCTION_CALL] CHAMANDO save_expense com args:`, args);
      result = await context.saveExpense(args);
      console.log(`üîß [FUNCTION_CALL] save_expense retornou:`, result);
    } else {
      result = { error: `Fun√ß√£o desconhecida: ${functionName}` };
    }
    
    console.log(`üîß [FUNCTION_CALL] Resultado:`, JSON.stringify(result, null, 2));
    console.log(`üîß [FUNCTION_CALL] ===== FIM =====`);
    return result;
  }

  /**
   * Processar mensagem do usu√°rio (m√©todo principal)
   */
  async processMessage(message, userId, userName, userPhone, context = {}) {
    try {
      console.log(`üì® [ZUL] Processando mensagem de ${userName} (${userId})`);
      console.log(`üì® [ZUL] Mensagem: "${message}"`);
      console.log(`üì® [ZUL] Context recebido:`, JSON.stringify(context, null, 2));
      
      // Se for do chat web (sem userPhone), usar vers√£o web
      if (!userPhone) {
        console.log('üíª [ZUL] Chat web detectado - usando assistente financeiro geral');
        const response = await this.sendWebChatMessage(
          userId, 
          message, 
          { userName, ...context }
        );
        
        return {
          message: response,
          threadId: null
        };
      }
      
      // Se for WhatsApp (com userPhone), usar m√©todo conversacional original
      console.log('üì± [ZUL] WhatsApp detectado - usando registrador de despesas');
      const response = await this.sendConversationalMessage(
        userId, 
        message, 
        { userName, organizationId: context.organizationId, ...context }, 
        userPhone
      );
      
      return {
        message: response,
        threadId: null // GPT-4 n√£o usa threads
      };
      
    } catch (error) {
      console.error('‚ùå [ZUL] Erro ao processar mensagem:', error);
      throw error;
    }
  }

  /**
   * Enviar mensagem para chat web (assistente financeiro geral)
   */
  async sendWebChatMessage(userId, userMessage, context = {}) {
    return await this.webChat.sendWebChatMessage(userId, userMessage, context);
  }
}


export default ZulAssistant;

