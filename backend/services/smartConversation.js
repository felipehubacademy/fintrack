import { createClient } from '@supabase/supabase-js';
import axios from 'axios';
import dotenv from 'dotenv';
import OpenAIService from './openaiService.js';

dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

const WHATSAPP_API_URL = 'https://graph.facebook.com/v18.0';

/**
 * Conversa inteligente para FinTrack V2
 * Analisa mensagens e extrai informa√ß√µes automaticamente
 */
class SmartConversation {
  constructor() {
    this.openai = new OpenAIService();
  }

  /**
   * Analisar mensagem e extrair informa√ß√µes da despesa
   */
  async analyzeExpenseMessage(text, userPhone) {
    try {
      console.log(`üß† Analisando mensagem: "${text}"`);
      
      // Buscar usu√°rio para obter categorias da organiza√ß√£o
      const user = await this.getUserByPhone(userPhone);
      const categories = user ? await this.getBudgetCategories(user.organization_id) : [];
      const categoryNames = categories.map(cat => cat.name).join(', ');
      
      const prompt = `Voc√™ √© um assistente financeiro especializado APENAS em processar despesas do FinTrack.

REGRAS R√çGIDAS:
1. Processe APENAS mensagens sobre gastos/despesas
2. Ignore completamente qualquer outro assunto
3. Seja extremamente preciso com valores monet√°rios
4. Use APENAS as categorias da organiza√ß√£o do usu√°rio
5. Retorne APENAS JSON v√°lido
6. NUNCA use "Outros" como primeira op√ß√£o - tente identificar a categoria correta

CATEGORIAS DISPON√çVEIS PARA ESTA ORGANIZA√á√ÉO:
${categoryNames}

M√âTODOS DE PAGAMENTO: credit_card, debit_card, pix, cash, other
RESPONS√ÅVEIS: Felipe, Let√≠cia, Compartilhado (ou null se n√£o especificado)

EXEMPLOS:
"Gastei 50" ‚Üí {"valor": 50, "descricao": "gasto n√£o especificado", "categoria": "${categories[0]?.name || 'Outros'}", "metodo_pagamento": null, "responsavel": null, "data": "hoje", "confianca": 0.3, "precisa_confirmar": true}

"Gastei 50 no mercado" ‚Üí {"valor": 50, "descricao": "mercado", "categoria": "Alimenta√ß√£o", "metodo_pagamento": null, "responsavel": null, "data": "hoje", "confianca": 0.9, "precisa_confirmar": true}

"Paguei 30 na farm√°cia" ‚Üí {"valor": 30, "descricao": "farm√°cia", "categoria": "Sa√∫de", "metodo_pagamento": null, "responsavel": null, "data": "hoje", "confianca": 0.95, "precisa_confirmar": true}

Se a mensagem N√ÉO for sobre despesas, retorne: {"erro": "Mensagem n√£o √© sobre despesas"}

Retorne APENAS JSON:`;

      const completion = await this.openai.client.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: prompt },
          { role: 'user', content: text }
        ],
        temperature: 0.1,
        max_tokens: 300,
        response_format: { type: 'json_object' }
      });

      const result = JSON.parse(completion.choices[0].message.content);
      
      console.log(`‚úÖ An√°lise conclu√≠da:`, result);
      return result;

    } catch (error) {
      console.error('‚ùå Erro na an√°lise:', error);
      return null;
    }
  }

  /**
   * Buscar usu√°rio por telefone
   */
  async getUserByPhone(phone) {
    try {
      const normalized = String(phone || '').replace(/^\+/, '');
      // Buscar usu√°rio primeiro
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('*')
        .in('phone', [normalized, `+${normalized}`])
        .eq('is_active', true)
        .single();

      if (userError) throw userError;
      
      // Buscar organiza√ß√£o separadamente
      const { data: organization } = await supabase
        .from('organizations')
        .select('*')
        .eq('id', user.organization_id)
        .single();

      // Buscar centros de custo separadamente
      const { data: costCenters } = await supabase
        .from('cost_centers')
        .select('*')
        .eq('organization_id', user.organization_id)
        .eq('is_active', true);

      return {
        ...user,
        organization,
        cost_centers: costCenters || []
      };
    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      return null;
    }
  }

  /**
   * Buscar centros de custo da organiza√ß√£o
   */
  async getCostCenters(organizationId) {
    try {
      const { data, error } = await supabase
        .from('cost_centers')
        .select('*')
        .eq('organization_id', organizationId)
        .eq('is_active', true)
        .order('name');

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar centros de custo:', error);
      return [];
    }
  }

  /**
   * Buscar categorias de or√ßamento
   */
  async getBudgetCategories(organizationId) {
    try {
      const { data, error } = await supabase
        .from('budget_categories')
        .select('*')
        .eq('organization_id', organizationId)
        .order('name');

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('‚ùå Erro ao buscar categorias:', error);
      return [];
    }
  }

  /**
   * Enviar mensagem WhatsApp
   */
  async sendWhatsAppMessage(to, text) {
    const phoneId = process.env.PHONE_ID;
    const token = process.env.WHATSAPP_TOKEN;

    if (!phoneId || !token) {
      console.error('‚ùå Credenciais WhatsApp n√£o configuradas');
      return;
    }

    // Normalize phone format to E.164 with leading +
    const normalizedTo = String(to || '').startsWith('+') ? String(to) : `+${String(to)}`;

    const message = {
      messaging_product: 'whatsapp',
      to: normalizedTo,
      type: 'text',
      text: {
        body: text,
      },
    };

    try {
      const response = await axios.post(`${WHATSAPP_API_URL}/${phoneId}/messages`, message, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      });
      console.log(`‚úÖ Mensagem enviada para ${normalizedTo}:`, response.data);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar mensagem:`, error.message);
      if (error.response) {
        console.error('üìÑ Detalhes do erro:', error.response.data);
      }
    }
  }

  /**
   * Enviar mensagem conversacional (sem bot√µes)
   */
  async sendConversationalMessage(to, text) {
    const phoneId = process.env.PHONE_ID;
    const token = process.env.WHATSAPP_TOKEN;

    if (!phoneId || !token) {
      console.error('‚ùå Credenciais WhatsApp n√£o configuradas');
      return;
    }

    const normalizedTo = String(to || '').startsWith('+') ? String(to) : `+${String(to)}`;

    const message = {
      messaging_product: 'whatsapp',
      to: normalizedTo,
      type: 'text',
      text: {
        body: text,
      },
    };

    try {
      const response = await axios.post(`${WHATSAPP_API_URL}/${phoneId}/messages`, message, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        timeout: 10000,
      });
      console.log(`‚úÖ Mensagem conversacional enviada para ${to}:`, response.data);
    } catch (error) {
      console.error(`‚ùå Erro ao enviar mensagem:`, error.message);
      if (error.response) {
        console.error('üìÑ Detalhes do erro:', error.response.data);
      }
    }
  }

  /**
   * Salvar despesa no banco
   */
  async saveExpense(expenseData) {
    try {
      const { data, error } = await supabase
        .from('expenses')
        .insert(expenseData)
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao salvar despesa:', error);
      throw error;
    }
  }

  /**
   * Processar mensagem principal
   */
  async handleMessage(text, userPhone) {
    try {
      console.log(`üì± Processando mensagem de ${userPhone}: "${text}"`);

      // 1. Buscar usu√°rio
      const user = await this.getUserByPhone(userPhone);
      if (!user) {
        await this.sendWhatsAppMessage(userPhone, 
          "‚ùå Usu√°rio n√£o encontrado. Entre em contato com o administrador da organiza√ß√£o."
        );
        return;
      }

      // 2. Verificar se h√° uma conversa em andamento
      const ongoingConversation = await this.getOngoingConversation(userPhone);
      if (ongoingConversation) {
        await this.continueConversation(user, ongoingConversation, text);
        return;
      }

      // 3. Analisar nova mensagem
      const analysis = await this.analyzeExpenseMessage(text, userPhone);
      if (!analysis) {
        await this.sendWhatsAppMessage(userPhone, 
          "‚ùå N√£o consegui entender sua mensagem. Tente: 'Gastei 50 no mercado'"
        );
        return;
      }

      // 4. Verificar se √© uma mensagem sobre despesas
      if (analysis.erro === "Mensagem n√£o √© sobre despesas") {
        await this.sendWhatsAppMessage(userPhone, 
          "üí∞ Ol√°! Eu sou o assistente do FinTrack.\n\n" +
          "üìù Para registrar uma despesa, envie uma mensagem como:\n" +
          "‚Ä¢ 'Gastei 50 no mercado'\n" +
          "‚Ä¢ 'Paguei 30 na farm√°cia'\n" +
          "‚Ä¢ 'R$ 25 no posto de gasolina'\n\n" +
          "üéØ Foco apenas em gastos e despesas!"
        );
        return;
      }

      // 5. Verificar se precisa de confirma√ß√£o
      if (analysis.precisa_confirmar) {
        await this.handleIncompleteInfo(user, analysis);
      } else {
        await this.handleCompleteInfo(user, analysis);
      }

    } catch (error) {
      console.error('‚ùå Erro no processamento:', error);
      await this.sendWhatsAppMessage(userPhone, 
        "‚ùå Ocorreu um erro. Tente novamente em alguns minutos."
      );
    }
  }

  /**
   * Buscar conversa em andamento
   */
  async getOngoingConversation(userPhone) {
    try {
      const { data, error } = await supabase
        .from('expenses')
        .select('*')
        .eq('whatsapp_message_id', userPhone)
        .eq('status', 'pending')
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (error && error.code !== 'PGRST116') throw error;
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao buscar conversa em andamento:', error);
      return null;
    }
  }

  /**
   * Continuar conversa em andamento
   */
  async continueConversation(user, ongoingConversation, userResponse) {
    try {
      console.log(`üîÑ Continuando conversa para ${user.phone}`);
      
      const conversationState = ongoingConversation.conversation_state || {};
      const missingFields = conversationState.missing_fields || [];
      
      if (missingFields.length === 0) {
        // Sem campos faltando, finalizar
        await this.finalizeExpense(ongoingConversation, user);
        return;
      }

      // Processar resposta do usu√°rio
      const nextField = missingFields[0];
      const updatedAnalysis = await this.processUserResponse(nextField, userResponse, ongoingConversation);
      
      if (updatedAnalysis) {
        // Atualizar estado da conversa
        const newMissingFields = missingFields.slice(1);
        const updatedState = {
          ...conversationState,
          missing_fields: newMissingFields,
          [nextField]: updatedAnalysis[nextField]
        };

        await supabase
          .from('expenses')
          .update({ 
            conversation_state: updatedState,
            amount: updatedAnalysis.valor,
            description: updatedAnalysis.descricao,
            category: updatedAnalysis.categoria,
            payment_method: updatedAnalysis.metodo_pagamento,
            date: this.parseDate(updatedAnalysis.data)
          })
          .eq('id', ongoingConversation.id);

        // Se ainda h√° campos faltando, perguntar o pr√≥ximo
        if (newMissingFields.length > 0) {
          await this.askNextQuestion(user, newMissingFields[0]);
        } else {
          // Todos os campos preenchidos, finalizar
          await this.finalizeExpense({
            ...ongoingConversation,
            conversation_state: updatedState
          }, user);
        }
      }

    } catch (error) {
      console.error('‚ùå Erro ao continuar conversa:', error);
      await this.sendWhatsAppMessage(user.phone, 
        "‚ùå Ocorreu um erro. Vou cancelar esta conversa."
      );
      await this.cancelConversation(ongoingConversation.id);
    }
  }

  /**
   * Processar resposta do usu√°rio para um campo espec√≠fico
   */
  async processUserResponse(field, userResponse, ongoingConversation) {
    try {
      // Buscar categorias da organiza√ß√£o para valida√ß√£o
      const { data: expenseData } = await supabase
        .from('expenses')
        .select('organization_id')
        .eq('id', ongoingConversation.id)
        .single();

      let categories = [];
      if (expenseData) {
        categories = await this.getBudgetCategories(expenseData.organization_id);
      }
      
      const categoryNames = categories.map(cat => cat.name).join(', ');

      const prompt = `Analise a resposta do usu√°rio para completar o campo "${field}":

RESPOSTA: "${userResponse}"

CONTEXTO: ${JSON.stringify(ongoingConversation)}

CAMPOS POSS√çVEIS:
- metodo_pagamento: credit_card, debit_card, pix, cash, other
- responsavel: Felipe, Let√≠cia, Compartilhado
- categoria: ${categoryNames}

Retorne APENAS JSON com o campo atualizado:
{"${field}": "valor_identificado"}`;

      const completion = await this.openai.client.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.1,
        max_tokens: 100,
        response_format: { type: 'json_object' }
      });

      const result = JSON.parse(completion.choices[0].message.content);
      
      // Combinar com an√°lise anterior
      const fullAnalysis = {
        valor: ongoingConversation.amount,
        descricao: ongoingConversation.description,
        categoria: ongoingConversation.category,
        data: ongoingConversation.date,
        ...result
      };

      return fullAnalysis;

    } catch (error) {
      console.error('‚ùå Erro ao processar resposta:', error);
      return null;
    }
  }

  /**
   * Perguntar pr√≥xima quest√£o
   */
  async askNextQuestion(user, field) {
    const costCenters = await this.getCostCenters(user.organization_id);
    const costCenterNames = costCenters.map(cc => cc.name);
    
    let message = '';
    
    switch (field) {
      case 'metodo_pagamento':
        message = 'üí≥ M√©todo de pagamento: D√©bito, Cr√©dito, PIX ou Dinheiro?';
        break;
      case 'responsavel':
        message = `üë§ Respons√°vel: ${costCenterNames.join(', ')} ou Compartilhado?`;
        break;
      case 'categoria':
        const categories = await this.getBudgetCategories(user.organization_id);
        const categoryNames = categories.map(cat => cat.name).join(', ');
        message = `üìÇ Categoria: ${categoryNames}?`;
        break;
      default:
        message = `‚ùì Por favor, forne√ßa: ${field}`;
    }

    await this.sendConversationalMessage(user.phone, message);
  }

  /**
   * Finalizar despesa
   */
  async finalizeExpense(expense, user) {
    try {
      const costCenters = await this.getCostCenters(user.organization_id);
      const responsibleName = (expense.conversation_state?.responsavel || expense.responsavel || '').toString();
      const costCenter = costCenters.find(cc =>
        cc.name.toLowerCase() === responsibleName.toLowerCase()
      );

      if (!costCenter) {
        await this.sendWhatsAppMessage(user.phone, 
          `‚ùå Centro de custo "${responsibleName || 'indefinido'}" n√£o encontrado.`
        );
        return;
      }

      // Atualizar despesa como confirmada
      const expenseData = {
        organization_id: user.organization_id,
        user_id: user.id,
        cost_center_id: costCenter.id,
        status: 'confirmed',
        confirmed_at: new Date().toISOString(),
        confirmed_by: user.id,
        whatsapp_message_id: `msg_${Date.now()}`
      };

      await supabase
        .from('expenses')
        .update(expenseData)
        .eq('id', expense.id);

      // Enviar confirma√ß√£o
      const amount = expense.amount ?? expense.conversation_state?.valor;
      const description = expense.description ?? expense.conversation_state?.descricao;
      const category = expense.category ?? expense.conversation_state?.categoria;
      const paymentMethod = expense.payment_method ?? expense.conversation_state?.metodo_pagamento;
      const dateVal = expense.date ?? this.parseDate(expense.conversation_state?.data);

      const confirmationMessage = `‚úÖ Despesa registrada!\n\n` +
        `üí∞ R$ ${Number(amount).toFixed(2)} - ${description}\n` +
        `üìÇ ${category} - ${responsibleName}\n` +
        `üí≥ ${this.getPaymentMethodName(paymentMethod)}\n` +
        `üìÖ ${new Date(dateVal).toLocaleDateString('pt-BR')}`;

      await this.sendWhatsAppMessage(user.phone, confirmationMessage);

    } catch (error) {
      console.error('‚ùå Erro ao finalizar despesa:', error);
    }
  }

  /**
   * Cancelar conversa
   */
  async cancelConversation(expenseId) {
    try {
      await supabase
        .from('expenses')
        .delete()
        .eq('id', expenseId);
    } catch (error) {
      console.error('‚ùå Erro ao cancelar conversa:', error);
    }
  }

  /**
   * Lidar com informa√ß√£o incompleta
   */
  async handleIncompleteInfo(user, analysis) {
    const costCenters = await this.getCostCenters(user.organization_id);
    const costCenterNames = costCenters.map(cc => cc.name);

    // Determinar campos faltando
    const missingFields = [];
    if (!analysis.metodo_pagamento) missingFields.push('metodo_pagamento');
    if (!analysis.responsavel) missingFields.push('responsavel');
    if (analysis.categoria === 'Outros' && analysis.confianca < 0.5) missingFields.push('categoria');

    if (missingFields.length > 0) {
      // Criar despesa pendente
      const expenseData = {
        organization_id: user.organization_id,
        user_id: user.id,
        amount: analysis.valor,
        description: analysis.descricao,
        category: analysis.categoria,
        date: this.parseDate(analysis.data),
        status: 'pending',
        conversation_state: {
          missing_fields: missingFields,
          metodo_pagamento: analysis.metodo_pagamento,
          responsavel: analysis.responsavel
        },
        whatsapp_message_id: user.phone // Usar telefone como ID tempor√°rio
      };

      const { data: pendingExpense } = await supabase
        .from('expenses')
        .insert(expenseData)
        .select()
        .single();

      // Perguntar primeiro campo faltando
      await this.askNextQuestion(user, missingFields[0]);

      let message = `üí∞ R$ ${analysis.valor.toFixed(2)} - ${analysis.descricao} (${analysis.categoria})`;
      await this.sendConversationalMessage(user.phone, message);
    }
  }

  /**
   * Lidar com informa√ß√£o completa
   */
  async handleCompleteInfo(user, analysis) {
    const costCenters = await this.getCostCenters(user.organization_id);
    const costCenter = costCenters.find(cc => 
      cc.name.toLowerCase() === analysis.responsavel?.toLowerCase()
    );

    if (!costCenter) {
      await this.sendWhatsAppMessage(user.phone, 
        `‚ùå Centro de custo "${analysis.responsavel}" n√£o encontrado. Contate o administrador.`
      );
      return;
    }

    // Salvar despesa
    const expenseData = {
      organization_id: user.organization_id,
      user_id: user.id,
      cost_center_id: costCenter.id,
      amount: analysis.valor,
      description: analysis.descricao,
      payment_method: analysis.metodo_pagamento,
      date: this.parseDate(analysis.data),
      status: 'confirmed',
      confirmed_at: new Date().toISOString(),
      confirmed_by: user.id,
      whatsapp_message_id: `msg_${Date.now()}`
    };

    await this.saveExpense(expenseData);

    // Enviar confirma√ß√£o
    const confirmationMessage = `‚úÖ Despesa registrada!\n\n` +
      `üí∞ R$ ${analysis.valor.toFixed(2)} - ${analysis.descricao}\n` +
      `üìÇ ${analysis.categoria} - ${analysis.responsavel}\n` +
      `üí≥ ${this.getPaymentMethodName(analysis.metodo_pagamento)}\n` +
      `üìÖ ${this.parseDate(analysis.data).toLocaleDateString('pt-BR')}`;

    await this.sendWhatsAppMessage(user.phone, confirmationMessage);
  }

  /**
   * Converter data
   */
  parseDate(dateStr) {
    const today = new Date();
    
    if (dateStr === 'hoje') return today;
    if (dateStr === 'ontem') {
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      return yesterday;
    }
    
    // Tentar parsear data espec√≠fica
    const parsed = new Date(dateStr);
    return isNaN(parsed.getTime()) ? today : parsed;
  }

  /**
   * Nome do m√©todo de pagamento
   */
  getPaymentMethodName(method) {
    const names = {
      'credit_card': 'Cart√£o de Cr√©dito',
      'debit_card': 'Cart√£o de D√©bito',
      'pix': 'PIX',
      'cash': 'Dinheiro',
      'other': 'Outro'
    };
    return names[method] || method;
  }
}

export default SmartConversation;
